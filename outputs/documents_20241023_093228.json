[
    {
        "id": "83911154e9f7c2fa3f3aab82308cb096",
        "url": "https://www.taniarascia.com",
        "title": "Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "83911154e9f7c2fa3f3aab82308cb096-chunk-1",
                "heading": "Hey, I'm Tania",
                "text": "I'm a software developer who makes open-source projects and writes about code and life. On this site, you can check out all the technical articles I've written, read some of my personal notes , or learn more about me ."
            },
            {
                "chunk_id": "83911154e9f7c2fa3f3aab82308cb096-chunk-2",
                "heading": "Highlights",
                "text": "November 17, 2021 An Introduction to GraphQL June 23, 2021 How to Structure and Organize a React Application October 15, 2020 How to Set Up webpack 5 From Scratch September 10, 2020 The Event Loop, Callbacks, Promises, and Async/Await in JavaScript March 09, 2020 How to Use Redux and React February 17, 2020 How to Set up a Mac for Development December 02, 2019 A Complete Guide to CSS Concepts and Fundamentals May 16, 2019 How to Use Vue, the JavaScript Framework February 11, 2019 Everything I Know as a Software Developer Without a Degree (2019) August 20, 2018 How to Use React, the JavaScript Framework October 12, 2017 Design for Developers: Specific Steps to Improve Your Website Design January 09, 2017 How to Use the Command Line in Linux and macOS"
            },
            {
                "chunk_id": "83911154e9f7c2fa3f3aab82308cb096-chunk-3",
                "heading": "ProjectsAll Projects",
                "text": "2022 Keyboard Accordion Play the accordion with your keyboard! Article Demo 2020 TakeNote A free, open source notes app for the web. Article Demo 2019 Chip8 A retro game emulator for three platforms. Article Demo 2021 Sokoban A web-based Sokoban implementation. Article Demo 2015 New Moon The optimized dark theme for web development. Demo 2019 Snek A terminal-based Snake implementation. Article Demo"
            }
        ]
    },
    {
        "id": "d4a9a01efa046cf094c573df1172b33b",
        "url": "https://www.taniarascia.com/writing-an-emulator-in-javascript-chip8",
        "title": "Writing an Emulator from Scratch in JavaScript (Chip-8) | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "d4a9a01efa046cf094c573df1172b33b-chunk-1",
                "heading": "What Goes Into a Chip-8 Interpreter?",
                "text": "There was a lot of pre-learning I had to do to even get started understanding what I was working with, since I had never learned about computer science basics before. So I wrote Understanding Bits, Bytes, Bases, and Writing a Hex Dump in JavaScript which goes over much of that. To summarize, there are two major takeaways of that article: Bits and Bytes - A bit is a binary digit - 0 or 1 , true or false , on or off. Eight bits is a byte, which is the basic unit of information that computers work with. Number Bases - Decimal is the base number system we're most used to dealing with, but computers usually work with binary (base 2) or hexadecimal (base 16). 1111 in binary, 15 in decimal, and f in hexadecimal are all the same number. Nibbles - Also, 4 bits is a nibble, which is cute, and I had to deal with them a bit in this project. Prefixes - In JavaScript, 0x is a prefix for a hex number, and 0b is a prefix for a binary number. I also wrote a CLI snake game in preparation of figuring out how to work with pixels in the terminal for this project. A CPU is the main processor of a computer that executes the instructions of a program. In this case, it consists of various bits of state, described below, and an instruction cycle with fetch, decode, and execute steps. Memory Program counter Registers Index register Stack Stack pointer Key input Graphical output Timers Chip-8 can access up to 4 kilobytes of memory (RAM). (That's 0.002% of the storage space on a floppy disk.) The vast majority of data in the CPU is stored in memory. 4kb is 4096 bytes, and JavaScript has some helpful typed arrays , like Uint8Array which is a fixed-size array of a certain element - in this case 8-bits. let memory = new Uint8Array ( 4096 ) You can access and use this array like a regular array, from memory[0] to memory[4095] and set each element to a value up to 255 . Anything above that will fall back to that (for example, memory[0] = 300 would result in memory[0] === 255 ). The program counter stores the address of the current instruction as an 16-bit integer . Every single instruction in Chip-8 will update the program counter (PC) when it is done to go on to the next instruction, by accessing memory with PC as the index. In the Chip-8 memory layout, 0x000 to 0x1FF in memory is reserved, so it starts at 0x200 . let PC = 0x200 // memory[PC] will access the address of  the current instruvtion *You'll notice the memory array is 8-bit and the PC is a 16-bit integer, so two program codes will be combined to make a big endian opcode. Memory is generally used for long-term storage and program data, so registers exist as a kind of \"short-term memory\" for immediate data and computations. Chip-8 has 16 8-bit registers . They're referred as V0 through VF . let registers = new Uint8Array ( 16 ) There is a special 16-bit register that accesses a specific point in memory, referred to as I . The I register exists mostly for reading and writing to memory in general, since the addressable memory is 16-bit as well. let I = 0 Chip-8 has the ability to go into subroutines , and a stack for keeping track of where to return to. The stack is 16 16-bit values , meaning the program can go into 16 nested subroutines before experiencing a \"stack overflow\". let stack = new Uint16Array ( 16 ) The stack pointer (SP) is an 8-bit integer that points to a location in the stack. It only needs to be 8-bit even though the stack is 16-bit because it's only referencing the index of the stack, so only needs to be 0 thorough 15 . let SP = - 1 // stack[SP] will access the current return address in the stack Chip-8 is capable of a glorious single beep as far as sound goes. To be honest, I didn't bother implementing an actual output for the \"music\", though the CPU itself is all set up to interface properly with it. There are two timers, both 8-bit registers - a sound timer (ST) for deciding when to beep and a delay timer (DT) for timing some events throughout the game. They count down at 60 Hz . let DT = 0 let ST = 0 Chip-8 was set up to interface with the amazing hex keyboard. It looked like this: ┌───┬───┬───┬───┐\n│ 1 │ 2 │ 3 │ C │\n│ 4 │ 5 │ 6 │ D │\n│ 7 │ 8 │ 9 │ E │\n│ A │ 0 │ B │ F │\n└───┴───┴───┴───┘ In practice, only a few of the keys seem to be used, and you can map them to whatever 4x4 grid you want, but they're pretty inconsistent between games. Chip-8 uses a monochromatic 64x32 resolution display. Each pixel is either on or off. Sprites that can be saved in memory are 8x15 - eight pixels wide by fifteen pixels high. Chip-8 also comes with a font set, but it only contains the characters in the hex keyboard, so not overall the most useful font set. Put it all together, and you get the CPU state. CPU class CPU { constructor ( ) { this . memory = new Uint8Array ( 4096 ) this . registers = new Uint8Array ( 16 ) this . stack = new Uint16Array ( 16 ) this . ST = 0 this . DT = 0 this . I = 0 this . SP = - 1 this . PC = 0x200 } }"
            },
            {
                "chunk_id": "d4a9a01efa046cf094c573df1172b33b-chunk-2",
                "heading": "Reading the ROM",
                "text": "Since we're considering this project an emulator, each Chip-8 program file can be considered a ROM. The ROM is just binary data, and we're writing the program to interpret it. We can imagine the Chip8 CPU to be a virtual console, and a Chip-8 ROM to be a virtual game cartridge. The ROM buffer will take the raw binary file and translate it into 16-bit big endian words (a word is a unit of data consisting of a set amount of bits). This is where that hex dump article comes in handy. I'm collecting the binary data and converting it into blocks that I can use, in this case the 16-bit opcodes. Big endian means that the most significant byte will be first in the buffer, so when it encounters the two bytes 12 34 , it will create a 1234 16-bit code. A little endian code would look like 3412 . RomBuffer.js class RomBuffer { /**\n   * @param {binary} fileContents ROM binary\n   */ constructor ( fileContents ) { this . data = [ ] // Read the raw data buffer from the file const buffer = fileContents // Create 16-bit big endian opcodes from the buffer for ( let i = 0 ; i < buffer . length ; i += 2 ) { this . data . push ( ( buffer [ i ] << 8 ) | ( buffer [ i + 1 ] << 0 ) ) } } } The data returned from this buffer is the \"game\". The CPU will have a load() method - like loading a cartridge into a console - that will take the data from this buffer and place it into memory. Both the buffer and memory act as arrays in JavaScript, so loading the memory is just a matter of looping through the buffer and placing the bytes into the memory array."
            },
            {
                "chunk_id": "d4a9a01efa046cf094c573df1172b33b-chunk-3",
                "heading": "Creating a CPU Interface for I/O",
                "text": "So now I have this CPU that's interpreting and executing instructions and updating all its own state, but I can't do anything with it yet. In order to play a game, you have to see it and be able to interact with it. This is where input/output , or I/O, comes in. I/O is the communication between the CPU and the outside world. Input is data received by the CPU Output is data sent from the CPU So for me, the input will be through the keyboard, and the output will be graphics onto the screen. I could just mix the I/O code in with the CPU directly, but then I would be tied to one environment. By creating a generic CPU interface to connect the I/O and the CPU, I can interface with any system. The first thing to do was look through the instructions and find any that have to do with I/O. A few examples of those instructions: CLS - Clear the screen LD Vx, K - Wait for a key press, store the value of the key in Vx. DRW Vx, Vy, nibble - Display n-byte sprite starting at memory location I Based on that, we'll want the interface to have methods like: clearDisplay() waitKey() drawPixel() ( drawSprite would have been 1:1, but it ended up to be easier doing it pixel-by-pixel from the interface) JavaScript doesn't really have a concept of an abstract class as far as I could find, but I created one by making a class that could not itself be instantiated, with methods that can only be used from classes that extend it. Here are all the interface methods on the class: CpuInterface.js // Abstract CPU interface class class CpuInterface { constructor ( ) { if ( new . target === CpuInterface ) { throw new TypeError ( 'Cannot instantiate abstract class' ) } } clearDisplay ( ) { throw new TypeError ( 'Must be implemented on the inherited class.' ) } waitKey ( ) { throw new TypeError ( 'Must be implemented on the inherited class.' ) } getKeys ( ) { throw new TypeError ( 'Must be implemented on the inherited class.' ) } drawPixel ( ) { throw new TypeError ( 'Must be implemented on the inherited class.' ) } enableSound ( ) { throw new TypeError ( 'Must be implemented on the inherited class.' ) } disableSound ( ) { throw new TypeError ( 'Must be implemented on the inherited class.' ) } } Here's how it will work: the interface will be loaded into the CPU on initialization, and the CPU will be able to access methods on the interface. class CPU { // Initialize the interface constructor ( cpuInterface ) { this . interface = cpuInterface } _execute ( instruction ) { const { id , args } = instruction switch ( id ) { case 'CLS' : // Use the interface while executing an instruction this . interface . clearDisplay ( ) } } Before setting up the interface with any real environment (web, terminal, or native) I created a mock interface for tests. It doesn't actually hook up to any I/O but it helped me to set up the state of the interface and prepare it for real data. I'll ignore the sound ones, because that was never implemented with actual speaker output, so that leaves the keyboard and screen. The screen has a resolution of 64 pixels wide by 32 pixels tall. So as far as the CPU and interface is concerned, its a 64x32 grid of bits that are either on or off. To set up an empty screen, I can just make a 3D array of zeroes to represent all pixels being off. A frame buffer is a portion of memory containing a bitmapped image that will be rendered to a display. MockCpuInterface.js // Interface for testing class MockCpuInterface extends CpuInterface { constructor ( ) { super ( ) // Store the screen data in the frame buffer this . frameBuffer = this . createFrameBuffer ( ) } // Create 3D array of zeroes createFrameBuffer ( ) { let frameBuffer = [ ] for ( let i = 0 ; i < 32 ; i ++ ) { frameBuffer . push ( [ ] ) for ( let j = 0 ; j < 64 ; j ++ ) { frameBuffer [ i ] . push ( 0 ) } } return frameBuffer } // Update a single pixel with a value (0 or 1) drawPixel ( x , y , value ) { this . frameBuffer [ y ] [ x ] ^= value } } So I end up with something like this to represent the screen (when printing it as a newline-separated string): 0000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000\n...etc... In the DRW function, the CPU will loop through the sprite it pulled from memory and update each pixel in the sprite (some details left out for brevity). case 'DRW_VX_VY_N' : // The interpreter reads n bytes from memory, starting at the address stored in I for ( let i = 0 ; i < args [ 2 ] ; i ++ ) { let line = this . memory [ this . I + i ] // Each byte is a line of eight pixels for ( let position = 0 ; position < 8 ; position ++ ) { // ...Get value, x, and y... this . interface . drawPixel ( x , y , value ) } } The clearDisplay() function is the only other method that will be used for interacting with the screen. This is all the CPU interface needs for interacting with the screen. For keys, I mapped the original hex keyboard to the following 4x4 grid of keys: ┌───┬───┬───┬───┐\n│ 1 │ 2 │ 3 │ 4 │\n│ Q │ W │ E │ R │\n│ A │ S │ D │ F │\n│ Z │ X │ C │ V │\n└───┴───┴───┴───┘ I put the keys in an array. // prettier-ignore const keyMap = [ '1' , '2' , '3' , '4' , 'q' , 'w' , 'e' , 'r' , 'a' , 's' , 'd' , 'f' , 'z' , 'x' , 'c' , 'v' ] And create some state to store the currently pressed keys. this . keys = 0 In the interface, keys is a binary number consisting of 16 digits where each index represents a key. Chip-8 just wants to know at any given time which keys are pressed out of the 16 and makes a decision based on that. A few examples below: 0b1000000000000000 // V is pressed (keyMap[15], or index 15) 0b0000000000000011 // 1 and 2 are pressed (index 0, 1) 0b0000000000110000 // Q and W are pressed (index 4, 5) Now if, for example, V is pressed ( keyMap[15] ) and the operand is 0xf (decimal 15 ), the key is pressed. Left shifting ( << ) with 1 will create a binary number with a 1 followed by as many zeroes as are in the left shift. case 'SKP_VX' : // Skip next instruction if key with the value of Vx is pressed if ( this . interface . getKeys ( ) & ( 1 << this . registers [ args [ 0 ] ] ) ) { // Skip instruction } else { // Go to next instruction } There is one other key method, waitKey , where the instruction is to wait for a keypress and return the key once pressed."
            },
            {
                "chunk_id": "d4a9a01efa046cf094c573df1172b33b-chunk-4",
                "heading": "Web App - Interfacing with the Browser",
                "text": "The next interface I made was for the web, communicating with the browser and the DOM. I made this version of the emulator a bit more fancy, since the browser is more of my familiar environment and I can't resist the urge to make retro looking websites. This one also allows you to switch between games.  For the screen, I used the Canvas API , which uses CanvasRenderingContext2D for the drawing surface. Using fillRect with canvas was basically the same as fillRegion in blessed. this . screen = document . querySelector ( 'canvas' ) this . context = this . screen . getContext ( '2d' ) this . context . fillStyle = 'black' this . context . fillRect ( 0 , 0 , this . screen . width , this . screen . height ) One slight difference I made here is I multiplied all the pixels by 10 so the screen would be more visible. this . multiplier = 10 this . screen . width = DISPLAY_WIDTH * this . multiplier this . screen . height = DISPLAY_HEIGHT * this . multiplier This made the drawPixel command more verbose, but otherwise the same concept. drawPixel ( x , y , value ) { this . frameBuffer [ y ] [ x ] ^= value if ( this . frameBuffer [ y ] [ x ] ) { this . context . fillStyle = COLOR this . context . fillRect ( x * this . multiplier , y * this . multiplier , this . multiplier , this . multiplier ) } else { this . context . fillStyle = 'black' this . context . fillRect ( x * this . multiplier , y * this . multiplier , this . multiplier , this . multiplier ) } } I had access to a lot more key event handlers with the DOM, so I was able to easily handle the keyup and keydown events without any hacks. // Set keys on key down document . addEventListener ( 'keydown' , event => { const keyIndex = keyMap . indexOf ( event . key ) if ( keyIndex ) { this . _setKeys ( keyIndex ) } } ) // Reset keys on keyup document . addEventListener ( 'keyup' , event => { this . _resetKeys ( ) } ) } I handled working with the modules by importing all of them and setting them to the global object, then using Browserify to use them in the browser. Setting them to the global makes them available on the window so I could use the code output in a browser script. Nowadays I might use Webpack or something else for this, but it was quick and simple. web.js const { CPU } = require ( '../classes/CPU' ) const { RomBuffer } = require ( '../classes/RomBuffer' ) const { WebCpuInterface } = require ( '../classes/interfaces/WebCpuInterface' ) const cpuInterface = new WebCpuInterface ( ) const cpu = new CPU ( cpuInterface ) // Set CPU and Rom Buffer to the global object, which will become window in the // browser after bundling. global . cpu = cpu\nglobal . RomBuffer = RomBuffer The web entrypoint uses the same cycle function as the terminal implementation, but has a function to fetch each ROM and reset the display every time a new one is selected. I'm used to working with json data and fetch, but in this case I fetched the raw arrayBuffer from the response. // Fetch the ROM and load the game async function loadRom ( ) { const rom = event . target . value const response = await fetch ( ` ./roms/ ${ rom } ` ) const arrayBuffer = await response . arrayBuffer ( ) const uint8View = new Uint8Array ( arrayBuffer ) const romBuffer = new RomBuffer ( uint8View ) cpu . interface . clearDisplay ( ) cpu . load ( romBuffer ) } // Add the ability to select a game document . querySelector ( 'select' ) . addEventListener ( 'change' , loadRom ) The HTML includes a canvas and a select . < canvas > </ canvas > < select > < option disabled selected > Load ROM... </ option > < option value = \" CONNECT4 \" > Connect4 </ option > < option value = \" PONG \" > Pong </ option > </ select > Then I just deployed the code onto GitHub pages because it's static."
            },
            {
                "chunk_id": "d4a9a01efa046cf094c573df1172b33b-chunk-5",
                "heading": "Entrypoint",
                "text": "I handled working with the modules by importing all of them and setting them to the global object, then using Browserify to use them in the browser. Setting them to the global makes them available on the window so I could use the code output in a browser script. Nowadays I might use Webpack or something else for this, but it was quick and simple. web.js const { CPU } = require ( '../classes/CPU' ) const { RomBuffer } = require ( '../classes/RomBuffer' ) const { WebCpuInterface } = require ( '../classes/interfaces/WebCpuInterface' ) const cpuInterface = new WebCpuInterface ( ) const cpu = new CPU ( cpuInterface ) // Set CPU and Rom Buffer to the global object, which will become window in the // browser after bundling. global . cpu = cpu\nglobal . RomBuffer = RomBuffer The web entrypoint uses the same cycle function as the terminal implementation, but has a function to fetch each ROM and reset the display every time a new one is selected. I'm used to working with json data and fetch, but in this case I fetched the raw arrayBuffer from the response. // Fetch the ROM and load the game async function loadRom ( ) { const rom = event . target . value const response = await fetch ( ` ./roms/ ${ rom } ` ) const arrayBuffer = await response . arrayBuffer ( ) const uint8View = new Uint8Array ( arrayBuffer ) const romBuffer = new RomBuffer ( uint8View ) cpu . interface . clearDisplay ( ) cpu . load ( romBuffer ) } // Add the ability to select a game document . querySelector ( 'select' ) . addEventListener ( 'change' , loadRom ) The HTML includes a canvas and a select . < canvas > </ canvas > < select > < option disabled selected > Load ROM... </ option > < option value = \" CONNECT4 \" > Connect4 </ option > < option value = \" PONG \" > Pong </ option > </ select > Then I just deployed the code onto GitHub pages because it's static."
            }
        ]
    },
    {
        "id": "aaccf8dc93eef4b12b2e213fd1558c0d",
        "url": "https://www.taniarascia.com/building-takenote",
        "title": "Building TakeNote, a Full-Stack Notes App for Developers | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "aaccf8dc93eef4b12b2e213fd1558c0d-chunk-1",
                "heading": "What I Wanted It To Do",
                "text": "A few of my most important wants for the app: Plain text notes, no WYSIWYG or rich text editor Accessible from a web browser Authenticates and syncs with GitHub Does not require a database Has the look and feel of an IDE like Visual Studio Code, with syntax highlighting, markdown preview, and keyboard shortcuts Links to internal notes like a wiki Drag and drop Easy to back up and import I'm really happy I saw it through to the end. It took about a full year with some breaks here and there (I started in September, 2019). I learned a lot along the way, much of which became knowledge that I directly used in my job."
            },
            {
                "chunk_id": "aaccf8dc93eef4b12b2e213fd1558c0d-chunk-2",
                "heading": "Why I Don't Want to Ship It",
                "text": "TakeNote has two versions - the static, client-side only demo version that only saves to local storage, and a self-hosted complete version that runs on an Express server and authenticates and syncs with GitHub. Originally, I had the full, authenticated version hosted and despite not advertising this app at all, over 1,300 people authenticated with it, but now I have the demo version hosted on Netlify at takenote.dev . Although I spent a lot of time on the project and I'm proud of it, I ultimately decided not to ship it. I spent a long time agonizing about what to do with the project, because I knew I didn't want to maintain it or have real users. There were a few reasons for that: I don't want to maintain a server. If I had real users and the app went down, I didn't feel comfortable having that knowledge in the back of mind that if there was a DDoS or DigitalOcean was down or for any other reason the server went down, the app would be down for users. I don't want to be responsible for anyone's private data. Although the data was saved in GitHub and not a database of mine, I'm just really not interested in people's private data in any capacity, and a note-taking app is inherently going to contain personal data. GitHub OAuth requires full access to all private repositories to get access to any private repository. There is no way around it. The \"GitHub App\" flow did not pertain to my use case, and all private repos is the only relevant scope for my app. I didn't feel comfortable having these permissions for any reason, and nor do many other people, which is understandable. If I were to actually host this, it would have users and likely go over the rate limiting allowed very quickly, rendering the app pretty useless. After getting far along in the project, I realized it would be impossible to make a good mobile experience for such an involved app, especially since it's impossible to disable zoom on iOS devices. I originally planned to just make a responsive web app for mobile, but after realizing I would need to make iOS/Android apps for mobile to work, I realized I wasn't willing to double the effort that I had already put in to complete this last step. What I've ended up with is an excellent desktop web app, that looks and feels exactly like I'd want a note-taking app to feel. The hosted version is perfectly fine for any private, ephemeral notes anyone wants to take that definitely does not connect to any server or database, and imports/exports to JSON. Personally, I decided to settle on Bear for a notes app for myself, as I found that it had so many of the features I implemented in TakeNote, and I appreciated it. My only issue with it is that it's not available from the web or for Windows (as I now have a Windows PC for gaming/other activities as well and would like to access notes from there)."
            },
            {
                "chunk_id": "aaccf8dc93eef4b12b2e213fd1558c0d-chunk-3",
                "heading": "What I Learned While Writing It",
                "text": "I wrote several articles that were the result of things I learned while writing this app. I wrote Client-side Authentication the Right Way (Cookies vs. Local Storage) , which details how to make a secure authentication set up using HTTP Only, Secure, Same-Site cookies with an Express server and a front end. I also learned the OAuth flow, and how easy it is to set up instead of using some third-party system like Auth0, which deceptively sounds similar to OAuth and can easily trick people into thinking they need to use it. I wanted to automate deployments and testing for the app, but I had never done it before from scratch. It's easy enough with a static site and something like Netlify or GitHub pages, but it's a whole different beast for a site with a server. I wrote Create a CI/CD Pipeline with Docker , which entailed all that I learned while creating an automation pipeline that would test all my code in PRs, and deploy it to a server behind a load balancer every time a merge was made into the master branch. Before I started this project, I mostly avoided Redux, preferring to use Context in React for projects at work. As a result of setting up Redux Toolkit and Redux sagas for this project, I wrote An Overview and Walkthrough of Redux which builds demo applications of projects using vanilla Redux and Redux Toolkit. After using Redux, I realized I preferred it greatly to using Context. It does add a lot of boilerplate upfront, but the limitations of Context caused issues in previous projects as they grew. I wrote How to Set Up webpack 5 From Scratch based on much of what of what I learned setting up a custom webpack config for the app that would support both an Express-serving-a-frontend app and a static frontend app. So the moral of the story here is it's always a good idea to reinvent the wheel and build a project because you'll learn something along the way. It's never a waste of time."
            },
            {
                "chunk_id": "aaccf8dc93eef4b12b2e213fd1558c0d-chunk-4",
                "heading": "How I made it",
                "text": "Here are the decisions and various tech I used to create the app. I chose to write TakeNote in TypeScript . I had a little bit of experience here and there with TypeScript, but I wanted to make a complete, full-stack app to see if it lives up to the hype. It did get a bit annoying with various React and web types - or using some third-party dependencies, but I did feel confident that a lot of little bugs were prevented by using the strictest settings. I used React and Redux for the front end. It was either that, or Vue and Vuex, and although I've used Vue in the past for work, I just feel faster and more productive with React. I used simple SCSS for the styles instead of a CSS-in-JS solution, just because it's easier for me and simpler in my opinion. I used Node and Express for the full version of the app. I only needed a few endpoints, for authenticating and syncing. I decided against making a real update on every change, and instead only sync all the data at once on an interval. The server is necessary to obtain an authentication token and securely store it to allow a user to remain logged in, as GitHub does not have a PKCE setup that would allow OAuth with a front end only app. I used GitHub to authenticate, instead of creating a database with users, so all of that security could be handled elsewhere. I also used the GitHub API to make commits on every interval with the changes made to the notes. The text editor is built with CodeMirror , which is also used by Chrome and Firefox DevTools, Codepen, GitHub, and basically any other in-browser fiddle environment. Behind the scenes, it uses webpack for bundling, Jest and Cypress for testing, ESLint , and a few other open-source helper libraries. The part I had the most trouble with in the application was syncing to GitHub. I had the app completed up to that point for a long time before I finally finished it. My original intention was that the app would save all the files exactly like you would organize them in a folder on your computer - all categories would be folders, and all notes would be a .md file within the folder. I imagined that every time you sync the data, it would be the equivalent of doing git add . && git commit && git push . However, it's not so simple to do that with the GitHub API. I spent a lot of time figuring out how to create and edit multiple files at once, and I realized there was really no way to do it without making an API call for every single file. I know it seems like there should be a multi-file create or update API call, but there's not. What I finally ended up doing is what you see in the sync.ts file , which does the following: Gets a reference to the current head Creates a blob for each file (I decided on just creating one file for notes.json and one file for categories.json , instead of having a file for each note) Creates a tree path Creates a tree Creates a commit Updates a reference With these steps, on every sync a new commit is created for any updates that are made since the last sync."
            },
            {
                "chunk_id": "aaccf8dc93eef4b12b2e213fd1558c0d-chunk-5",
                "heading": "Language (TypeScript)",
                "text": "I chose to write TakeNote in TypeScript . I had a little bit of experience here and there with TypeScript, but I wanted to make a complete, full-stack app to see if it lives up to the hype. It did get a bit annoying with various React and web types - or using some third-party dependencies, but I did feel confident that a lot of little bugs were prevented by using the strictest settings."
            }
        ]
    },
    {
        "id": "76859bf319155b831ce6270fa2afdbcc",
        "url": "https://www.taniarascia.com/how-to-test-useeffect-api-call/",
        "title": "Testing API Calls With React Testing Library and Jest | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "76859bf319155b831ce6270fa2afdbcc-chunk-1",
                "heading": "Setting up the Application and Test Environment",
                "text": "Feel free to skip this part if you want to get right to the good stuff. As I wrote this article, I decided to start with absolutely nothing to see what the bare minimum I could get away with. I wanted all the config files, setup, and modules to get a React environment up and running that outputs a running application and runs tests, with the most up-to-date versions of everything. I know Vite and Rome and Rollup and lord knows what else are all the rage right now - I'm just using a simple webpack setup because it still works and I care more about just showing the tests in this article. However, please leave a comment to enlighten me on some of the improvements they bring to the table! So here's the quick application setup. What I ended up with looked like this: .\n├── dist\n├── node_modules\n├── src\n│   ├── App.js\n│   └── index.js\n├── tests\n│   └── App.test.js\n├── .babelrc\n├── jest.config.js\n├── package.json\n├── setupJest.js\n└── webpack.config.js I won't force you to go on the whole journey as I did, figuring out what was needed, but I'll cut right to the end and let you know all the packages. For the application, React + React DOM was necessary, as well as a few Babel packages. npm i \\ react \\ react-dom \\ @babel/preset-env \\ @babel/preset-react For setup, bundling, and compilation, webpack, webpack CLI, and a Babel loader were necessary. npm i \\ webpack \\ webpack-cli \\ babel-loader And for testing, Jest, JSDom, and React Testing Library were necessary. I also brought in a Jest Mock package because it makes life easier. npm i -D \\ @testing-library/jest-dom \\ @testing-library/react \\ jest \\ jest-environment-jsdom \\ jest-fetch-mock So these are all the packages necessary to get an environment up and running that spits out an application and tests it. Of course, there are some additional quality of life improvements you'd want, like the webpack serve dev server for hot reloads, but it's not necessary. Of course, there's the Babel config file , the same one you've probably been using for years. .babelrc { \"presets\" : [ \"@babel/preset-env\" , \"@babel/preset-react\" ] } And the webpack config file . It makes most of the decisions by default, such as using index.js as an entry point and outputting to a dist folder. I just needed to add a module to tell it to use babel-loader . webpack.config.js module . exports = { mode : 'production' , module : { rules : [ { test : / \\.js$ / , use : [ 'babel-loader' ] } ] , } , } As for the Jest config file , I just needed it to use jsdom and set the right directories. jest.config.js module . exports = { testEnvironment : 'jsdom' , rootDir : '.' , modulePaths : [ '<rootDir>' ] , moduleDirectories : [ 'node_modules' , 'src' ] , setupFilesAfterEnv : [ '<rootDir>/setupJest.js' ] , } Finally, in setupJest.js , we just want to enable jest-fetch-mock and import the Jest DOM. setupJest.js require ( 'jest-fetch-mock' ) . enableMocks ( ) import '@testing-library/jest-dom' Adding a script to package.json that just runs webpack allows you to test the build and ensure the application is running. I also added a jest command for the test. Everything else is just the packages brought in by the commands. package.json { \"scripts\" : { \"test\" : \"jest --coverage\" , \"build\" : \"webpack\" } } So that's everything as far as config for both the application and testing, now to set up the simple app. Not too much has changed as far as the React index file goes. The ReactDOM import and API is slightly different from the last time I used it, and StrictMode seems to be the default mode, so I'm just rendering to the #root and pulling in a component. index.js import React from 'react' import ReactDOM from 'react-dom/client' import { App } from './App' const root = ReactDOM . createRoot ( document . getElementById ( 'root' ) ) root . render ( < React.StrictMode > < App /> </ React.StrictMode > ) So now comes the code we're going to be testing, App.js . I'm just going to make this file do some \"componentDidMount\"-esque fetching of data. I know it's not realistic for this to be done in App.js , but the way the code will be written will be pretty similar in a production level app, it'll just be somewhere else further down. I'm going to use JSON Placeholder for the example API, but testing will be the same with your own internal APIs, a wrapper around fetch, and even if you're using Redux or some other state management. So I'll start off with a title and a message, and start setting up the state we'll use: users for the data coming in, and error in case an error gets thrown. I could have added in some loading state, but I just kept it really simple. It should be easy to figure out testing the loading states after reading this article. App.js import React , { useState , useEffect } from 'react' export const App = ( ) => { const [ users , setUsers ] = useState ( null ) const [ error , setError ] = useState ( null ) return ( < > < h1 > List of Users </ h1 > < p > No users found </ p > </ > ) } Now I'll add in the useEffect that fetches data from the API and updates the data state, otherwise updates the error state. App.js import React , { useState , useEffect } from 'react' export const App = ( ) => { const [ users , setUsers ] = useState ( null ) const [ error , setError ] = useState ( null ) useEffect ( ( ) => { const fetchAllUsers = async ( ) => { try { const response = await fetch ( 'https://jsonplaceholder.typicode.com/users' ) const data = await response . json ( ) setUsers ( data ) } catch ( err ) { setError ( 'Something went wrong!' ) } } fetchAllUsers ( ) } , [ ] ) return ( < > < h1 > List of Users </ h1 > < p > No users found </ p > </ > ) } Finally, I'm just displaying the error if one exists, and displaying the users if they loaded. App.js import React , { useState , useEffect } from 'react' export const App = ( ) => { const [ users , setUsers ] = useState ( null ) const [ error , setError ] = useState ( null ) useEffect ( ( ) => { // ... } , [ ] ) return ( < > < h1 > List of Users </ h1 > { error && < div > { error } </ div > } { users ? ( < ul > { users . map ( ( user ) => ( < li key = { user . id } > { user . name } </ li > ) ) } </ ul > ) : ( < p > No users found </ p > ) } </ > ) } Okay, now the whole application is complete and we can write the tests. You can build to ensure everything is working properly first. Build: npm run build Output: > webpack\n\nasset main.js 145 KiB [compared for emit] [minimized] (name: main) 1 related asset\n...\nwebpack 5.75.0 compiled successfully in 4035 ms I use http-server in the dist folder to test the output of an application quickly."
            },
            {
                "chunk_id": "76859bf319155b831ce6270fa2afdbcc-chunk-2",
                "heading": "App files",
                "text": "Not too much has changed as far as the React index file goes. The ReactDOM import and API is slightly different from the last time I used it, and StrictMode seems to be the default mode, so I'm just rendering to the #root and pulling in a component. index.js import React from 'react' import ReactDOM from 'react-dom/client' import { App } from './App' const root = ReactDOM . createRoot ( document . getElementById ( 'root' ) ) root . render ( < React.StrictMode > < App /> </ React.StrictMode > ) So now comes the code we're going to be testing, App.js . I'm just going to make this file do some \"componentDidMount\"-esque fetching of data. I know it's not realistic for this to be done in App.js , but the way the code will be written will be pretty similar in a production level app, it'll just be somewhere else further down. I'm going to use JSON Placeholder for the example API, but testing will be the same with your own internal APIs, a wrapper around fetch, and even if you're using Redux or some other state management. So I'll start off with a title and a message, and start setting up the state we'll use: users for the data coming in, and error in case an error gets thrown. I could have added in some loading state, but I just kept it really simple. It should be easy to figure out testing the loading states after reading this article. App.js import React , { useState , useEffect } from 'react' export const App = ( ) => { const [ users , setUsers ] = useState ( null ) const [ error , setError ] = useState ( null ) return ( < > < h1 > List of Users </ h1 > < p > No users found </ p > </ > ) } Now I'll add in the useEffect that fetches data from the API and updates the data state, otherwise updates the error state. App.js import React , { useState , useEffect } from 'react' export const App = ( ) => { const [ users , setUsers ] = useState ( null ) const [ error , setError ] = useState ( null ) useEffect ( ( ) => { const fetchAllUsers = async ( ) => { try { const response = await fetch ( 'https://jsonplaceholder.typicode.com/users' ) const data = await response . json ( ) setUsers ( data ) } catch ( err ) { setError ( 'Something went wrong!' ) } } fetchAllUsers ( ) } , [ ] ) return ( < > < h1 > List of Users </ h1 > < p > No users found </ p > </ > ) } Finally, I'm just displaying the error if one exists, and displaying the users if they loaded. App.js import React , { useState , useEffect } from 'react' export const App = ( ) => { const [ users , setUsers ] = useState ( null ) const [ error , setError ] = useState ( null ) useEffect ( ( ) => { // ... } , [ ] ) return ( < > < h1 > List of Users </ h1 > { error && < div > { error } </ div > } { users ? ( < ul > { users . map ( ( user ) => ( < li key = { user . id } > { user . name } </ li > ) ) } </ ul > ) : ( < p > No users found </ p > ) } </ > ) } Okay, now the whole application is complete and we can write the tests. You can build to ensure everything is working properly first. Build: npm run build Output: > webpack\n\nasset main.js 145 KiB [compared for emit] [minimized] (name: main) 1 related asset\n...\nwebpack 5.75.0 compiled successfully in 4035 ms I use http-server in the dist folder to test the output of an application quickly."
            },
            {
                "chunk_id": "76859bf319155b831ce6270fa2afdbcc-chunk-3",
                "heading": "Writing the Tests",
                "text": "You may not have needed all the above context and just want to see the tests. I wrote about it all since it's an up-to-date (for now) example of everything you need to get started, which can be nicer than opening twenty tabs in StackOverflow and seeing answers from 2016. Now to get started writing the tests. I opted to put them in App.test.js , but of course there are differing opinions on where tests should live (which I discussed a bit in the React Architecture article). I'm just putting them in a tests folder for the sake of this example. To set up, we'll use render and screen from the React Testing Library . As implied by the names, render is responsible for rendering your app to the JS Dom, and screen allows you to interact with it and see what's there. I'm putting everything in a describe() block for App , and making sure fetchMock resets between each test. tests/App.test.js import React from 'react' import { render , screen } from '@testing-library/react' import { App } from 'src/App.js' describe ( 'App' , ( ) => { beforeEach ( ( ) => { fetchMock . resetMocks ( ) } ) test ( 'renders users when API call succeeds' , async ( ) => { } ) test ( 'renders error when API call fails' , async ( ) => { } ) } ) First, I'll write the test for when the API call succeeds. Using fetchMock , I'll mock the resolved value of the JSON Placeholder /users API with a list of fake users. const fakeUsers = [ { id : 1 , name : 'Joe' } , { id : 2 , name : 'Tony' } , ] fetchMock . mockResolvedValue ( { status : 200 , json : jest . fn ( ( ) => fakeUsers ) } ) Now, what we want is to see what happens after the successful fetch , which is the users displayed and the \"No users found\" message not to be there. This can be done using a combination of waitFor and getBy , which uses act behind the scenes to wait for the event to happen: await waitFor ( ( ) => { expect ( screen . getByText ( 'Joe' ) ) . toBeInTheDocument ( ) } ) However, the findBy query is a combination of waitFor and getBy , so we can simplify that even more into a one liner: expect ( await screen . findByText ( 'Joe' ) ) . toBeInTheDocument ( ) So here's our code to mock the fetch , render the App , ensure the data is rendered, and ensure nothing we don't want to see is visible: tests/App.test.js test ( 'renders users when API call succeeds' , async ( ) => { const fakeUsers = [ { id : 1 , name : 'Joe' } , { id : 2 , name : 'Tony' } , ] fetchMock . mockResolvedValue ( { status : 200 , json : jest . fn ( ( ) => fakeUsers ) } ) render ( < App /> ) expect ( screen . getByRole ( 'heading' ) ) . toHaveTextContent ( 'List of Users' ) expect ( await screen . findByText ( 'Joe' ) ) . toBeInTheDocument ( ) expect ( await screen . findByText ( 'Tony' ) ) . toBeInTheDocument ( ) expect ( screen . queryByText ( 'No users found' ) ) . not . toBeInTheDocument ( ) } ) Using what we've learned in the previous test, writing the next test is pretty easy. Instead of resolving a successful API call, we'll have the API throw an error and ensure the error is visible. tests/App.test.js test ( 'renders error when API call fails' , async ( ) => { fetchMock . mockReject ( ( ) => Promise . reject ( 'API error' ) ) render ( < App /> ) expect ( await screen . findByText ( 'Something went wrong!' ) ) . toBeInTheDocument ( ) expect ( await screen . findByText ( 'No users found' ) ) . toBeInTheDocument ( ) } ) Now that both tests are written, we just need to run them. Using the jest command, we can run the tests. You can also add the --coverage flag to see if the tests are catching everything. npm test > jest --coverage\n\n PASS  tests/App.test.js\n  App\n    ✓ renders users when API call succeeds (66 ms)\n    ✓ renders error when API call fails (6 ms)\n\n----------|---------|----------|---------|---------|-------------------\nFile      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s\n----------|---------|----------|---------|---------|-------------------\nAll files |     100 |      100 |     100 |     100 |\n App.js   |     100 |      100 |     100 |     100 |\n----------|---------|----------|---------|---------|-------------------\nTest Suites: 1 passed, 1 total\nTests:       2 passed, 2 total\nSnapshots:   0 total\nTime:        1.91 s As we can see, the tests passed with 100% coverage, so we get that green dopamine hit."
            }
        ]
    },
    {
        "id": "68aaf214d7b75fdd7fedd1b6eba5c3d1",
        "url": "https://www.taniarascia.com/overview-of-css-concepts/",
        "title": "A Complete Guide to CSS Concepts and Fundamentals | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "68aaf214d7b75fdd7fedd1b6eba5c3d1-chunk-1",
                "heading": "CSS Selectors",
                "text": "From least specific to most specific (more about that below), here are the main types of selectors: Universal selector - selects all elements Type selector - targets element(s) by HTML tag (includes pseudo elements ) Class selector , Attribute selector - targets element(s) by class or attribute, respectively (includes pseudo classes ) ID selector - targets an element by id * { /* Universal selector */ } tag { /* Type selector */ } tag::before { /* Type selector (psuedo element) */ } .class { /* Class selector */ } .class:hover { /* Class selector (pseudo class) */ } [attr] { /* Attribute selector */ } #id { /* ID selector */ } Note that even if you don't care much about CSS, learning about selectors will help you write (vanilla) JavaScript, as the DOM selectors in a JavaScript document query are the same. This query to get all elements that match a selector: .js document . querySelectorAll ( 'article h2' ) Targets all the same elements as this CSS to style all elements that match a selector: .css article h2 { } Do you know the difference between these two? .foo.bar .foo .bar The first one targets a foo and bar on the same element. .foo.bar example .foo.bar { /* without a space */ } < div class = \" foo bar \" > I'm targeted </ div > The second one targets a bar that is a descendent of a foo . .foo .bar example .foo .bar { /* with a space */ } < div class = \" foo \" > < div class = \" bar \" > I'm targeted </ div > </ div > There are other selectors that can be used instead of a space to modify the selector, such as > , + , and ~ . These all have different meanings. They are not used incredibly often so you can learn them as needed."
            },
            {
                "chunk_id": "68aaf214d7b75fdd7fedd1b6eba5c3d1-chunk-2",
                "heading": "CSS and JavaScript",
                "text": "Note that even if you don't care much about CSS, learning about selectors will help you write (vanilla) JavaScript, as the DOM selectors in a JavaScript document query are the same. This query to get all elements that match a selector: .js document . querySelectorAll ( 'article h2' ) Targets all the same elements as this CSS to style all elements that match a selector: .css article h2 { }"
            },
            {
                "chunk_id": "68aaf214d7b75fdd7fedd1b6eba5c3d1-chunk-3",
                "heading": "Layouts: Flex",
                "text": "The block , inline-block , and inline display types all apply to the element itself. Flexbox is different, because it applies to elements nested within the one that has display: flex . There are many resources that go deep into Flexbox and everything it's capable of, but I'm just going to tell you the basic stuff you can always do to easily make layouts. In the beginning, HTML documents were basically the same as MS Word documents: you had headings, paragraphs, and the occasional image. People started wanting more advanced layouts, so they began using tables to create their layouts. Since the purpose of tables was (and is) only to display tabular data, the HTML people wrote to create layouts became messier and messier. Eventually, someone discovered that they could use the float property to move things to the left and right of the page, instead of tables. This made the markup a little cleaner and easier to understand, but again, this was another attempt to mutate something for a purpose it was never designed to do. CSS floats were (and are) for \"floating\" images in an article to the left or right (like you might see in a magazine), not for creating a layout. Nonetheless, for years we were stuck with the float property to create some semblance of a unique layout without using tables. Now we have Flexbox and CSS grid for creating layouts, and we basically never have to touch float except for its rare, actual purpose. This doesn't apply if you have to support older versions of Internet Explorer, but if you do, there are more than enough resources to understand how floats were used during this time. We already know that a bunch of default block elements will stack each other: Stacked elements < section > < div > div </ div > < div > div </ div > < div > div </ div > </ section >  So how do we get elements to be side-by-side? We can make the outer container a flex container. Elements in a default flex container < section class = \" flex-container \" > < div > div </ div > < div > div </ div > < div > div </ div > </ section > .flex-container { display : flex ; }  And just like that, all the inner elements are now stacked horizontally in a row. By default, a flex container is set to flex-direction: row . Note that only the first layer of elements will be flex items - elements nested further within them will behave normally. You can also update it to flex-direction: column and the items will be stacked vertically, as they were originally. Here are a few cool things flex can do: vertically align elements with ease space items apart or group them together easily create repeating grids Let's make a practical example to demonstrate some of what flex is capable of: a navigation bar. Here's what we want it to look like: brand name to the left nav links to the right all items vertically centered navbar.html < nav > < div > Brand name </ div > < div > < a href = \" #! \" > About </ a > < a href = \" #! \" > Contact </ a > </ div > </ nav > navbar.css nav { background : blue ; height : 80px ; } Without any regard to layout applied, here's how it looks.  We'll make the navbar flex, so the brand name and nav links will be horizontal. nav { display : flex ; }  Now we want everything to be vertically aligned. With align-items: center , we can vertically align items within a flex container. nav { display : flex ; align-items : center ; }  Now we want the brand and links to be on opposite ends of the navbar. With justify-content: space-between , we can tell the items in the flex container to be spaced apart as far as possible. nav { display : flex ; align-items : center ; justify-content : space-between ; }  Then just add a little padding and you have an acceptable navbar.  I believe without knowing anything else about flex, you can get pretty far with just those properties. When thinking about any of the other values that can be applied to flex alignment, just think about the navigation bar. The brand and group of links are two items in a flex row. align-items refers to the vertical alignment : flex-start would be the top, flex-end would be the bottom, and center is vertically aligned. justify-content refers to the horizontal spacing : start would be all items to the left, end would be all items to the right, center is everything in the middle, and space-between is everything equally spaced apart. Further reading : Flexbox Froggy is a game for learning and practicing Flexbox that might come in handy. Often, you might have a bunch of cards or images in a gallery that should be in a repeating grid. By default, with a flex container, the horizontal items will continue forever horizontally. < section class = \" flex-container \" > < div > div </ div > < div > div </ div > ... </ section > .flex-container { display : flex ; }  We can make the grid repeat onto as many lines as necessary with flex-wrap . .flex-container { display : flex ; flex-wrap : wrap ; }  This is great. But wait...it only works when the elements have no content. What if I fill them with a lot of text?  Now this seems pretty useless. But with a tiny bit of flex magic, we can transform it back to a grid: div { flex : 1 ; }  So what does flex: 1 do? It tells all flex items in a container, if they all have it applied, to automatically have an equal height and width. flex is another shorthand for three properties: flex-grow , flex-shrink , and flex-basis . .element { flex : 1 ; } /* is the same as */ .element { flex-grow : 1 ; flex-shrink : 1 ; flex-basis : 0% ; } /* flex shorthand */ .element { flex : flex-grow flex-shrink flex-basis ; } Two flex elements set to flex: 1 will both be 50% of the width of the container. Three will both be 33.3333% of the width of the container, and so on. But this is still kind of random. Keep adding more divs, and once it decides that no more can fit, and to wrap to the next line (if flex-wrap is set). Then the element that gets wrapped will now take up 100% of the row.  What if you always want each element to take up 1/3 of the available horizontal space, regardless of how many flex items there are and what content they contain? You can set the flex-basis only, to the width you desire. div { flex : 0 0 33.3333% ; } Remember the Box Model, from earlier? If you have any padding on your flex items, you must have box-sizing: border-box for the percentage to be calculated correctly. If that's taken care of, it will correctly calculate each flex item to the proper 33.33333% width of the screen. But there is one more consideration - if you want gutters in your grid, you'll use margins to separate each item. Since the margins are calculated separately, you'll need to subtract the outer margins from the flex-basis . In this example, there's an extra 10px margin on both sides, so we'll subtract 20px . div { padding : 15px ; margin : 10px ; flex : 0 0 calc ( 33.3333% - 20px ) ; }  You can easily make simple grids by either setting the flex-basis (setting one to 25% and one to 75%, for example) or with varying flex-grow / flex-shrink combinations ( flex: 1 on one element and flex: 2 on another element would result in a 33.3-% / 66.6-% split, respectively). Finally, there is also an order property, in which you can rearrange the order of flex items."
            },
            {
                "chunk_id": "68aaf214d7b75fdd7fedd1b6eba5c3d1-chunk-4",
                "heading": "History lesson",
                "text": "In the beginning, HTML documents were basically the same as MS Word documents: you had headings, paragraphs, and the occasional image. People started wanting more advanced layouts, so they began using tables to create their layouts. Since the purpose of tables was (and is) only to display tabular data, the HTML people wrote to create layouts became messier and messier. Eventually, someone discovered that they could use the float property to move things to the left and right of the page, instead of tables. This made the markup a little cleaner and easier to understand, but again, this was another attempt to mutate something for a purpose it was never designed to do. CSS floats were (and are) for \"floating\" images in an article to the left or right (like you might see in a magazine), not for creating a layout. Nonetheless, for years we were stuck with the float property to create some semblance of a unique layout without using tables. Now we have Flexbox and CSS grid for creating layouts, and we basically never have to touch float except for its rare, actual purpose. This doesn't apply if you have to support older versions of Internet Explorer, but if you do, there are more than enough resources to understand how floats were used during this time."
            },
            {
                "chunk_id": "68aaf214d7b75fdd7fedd1b6eba5c3d1-chunk-5",
                "heading": "Other Considerations",
                "text": "This article is getting incredibly long, and there's still plenty I haven't covered. Here's a few quick answers and additional resources to the holes in my attempt to cover everything at once. To get an idea of how I generally like to style my CSS, take a look at Primitive CSS , the CSS/Sass framework I designed a few years ago, which contains a clean Sass setup and sensible defaults. Creating your own CSS framework and grid is a fun, challenging way to really learn CSS, and I highly recommend it! My rules are as follows: IDs are exclusively used for JavaScript purposes. To easily target an individual element with JavaScript, you can use an ID, and know that it has no affect on the style. If you wish, you could also \"scope\" sections of content by nesting everything in an ID, though I don't personally do that. For tags, never style elements like main , article , div , section , aside , etc. You should always feel secure that these elements will be unstyled and only denote the type of content they contain. If you wish to add styling to them, create classes like .container . I usually give some default styling to h1 through h5 , p , ul , ol , li , a , and table . For most other styling, I use classes. Try to make classes \"semantic\" by describing what they are, not what they do. For example, having a class called .app-sidebar would be acceptable, but having .bg-white , .blue-border , .large-text ultimately becomes difficult to maintain. (A few helper classes, such as the Bootstrap spacing utilities can come in handy). Further reading : The Difference Between ID and Class I use pixels ( px ) on borders, and rem on all font sizes, padding, and margins. I don't use em at all, as using it has more possible unintended consequences on nested elements (although I used px on all examples throughout this resource for simplicity and familiarity). Further reading : Responsive Typography: rem, em, and px , Comprehensive Guide: When to Use Em vs Rem I prefer to use Sass for all CSS preprocessing, much like the popular CSS framework, Bootstrap . It also works fantastically out-of-the-box with the JavaScript framework, Vue . LESS is generally less popular and I don't prefer it, but Ant Design and Semantic UI do. You can also use tools like PostCSS to compile the latest CSS to something most browsers can understand (much like Babel with ES6). Further reading : Learn Sass Now: A Guide to Installing and Understanding Sass Browsers have been known to have inconsistencies with each other regarding CSS, and you might see -webkit , -moz , -ms , and -o prefixes for various properties that might not work on all browsers, or may have been experimental in some earlier browsers, like so: .flex { display : -webkit-box ; display : -moz-box ; display : -ms-flexbox ; display : -webkit-flex ; display : flex ; } Use something like Autoprefixer with Webpack , Gulp or Grunt , whatever you may be using for bundling or task running. You should never have to write out or remember prefixes. I'll be honest, almost every time I create something in CSS grid, I end up converting it to Flexbox because I find it easier to work with and more intuitive. I didn't cover grid in this article because it's too big of a subject to just tack on at the end. See the further reading for many examples you can play around with. Further reading : Grid by Example - the examples A lot of people have come up with a lot of solutions on how to structure your CSS - BEM , OOCSS , SMACSS ...BEM (Block-Element-Modifier) seems to be one of the more popular and prevailing. I personally prefer not to use any of these in specific (and I don't like using underlines in CSS at all). Use numbers (as percents) on line-height . I prefer line-height: 1.2 for headings, and line-height: 1.6 for font (using the Golden Ratio ). You can use the pseudo class/function :not() to target every element that doesn't match what you input. Here's a useful one for ensuring all headings, except for the first one in a section, have some extra spacing. h1:not(:first-child),\nh2:not(:first-child),\nh3:not(:first-child) { margin-top : 2.5rem ; } Always have a .container element handy, that looks something like this ( max-width and padding can be changed up to whatever you want). .container { max-width : 1200px ; padding : 0 15px ; margin-left : auto ; margin-right : auto ; } This will make your content pretty responsive by default. You'll have padding around the content on mobile, and the content won't expand too far on desktop screens, and will be horizontally centered (this is what happens when auto is applied to both margins). Don't spread text out too wide. Think about a page in a book; you wouldn't want one page to be too wide, or reading it is oddly stressful. I like to make a small container for text-only, to ensure articles and text aren't too wide. .small-container { max-width : 800px ; padding : 0 15px ; margin-left : auto ; margin-right : auto ; } Use max-width: 100% and height: auto for responsive images. This way, the image will retain it's original aspect ratio, but resize according to the width of its container. img.responsive-image { max-width : 100% ; height : auto ; } Finally, I didn't get into transitions and animations, but I think those are overall less important than the concepts I laid out here today."
            },
            {
                "chunk_id": "68aaf214d7b75fdd7fedd1b6eba5c3d1-chunk-6",
                "heading": "When should I style ids, classes, or tags?",
                "text": "My rules are as follows: IDs are exclusively used for JavaScript purposes. To easily target an individual element with JavaScript, you can use an ID, and know that it has no affect on the style. If you wish, you could also \"scope\" sections of content by nesting everything in an ID, though I don't personally do that. For tags, never style elements like main , article , div , section , aside , etc. You should always feel secure that these elements will be unstyled and only denote the type of content they contain. If you wish to add styling to them, create classes like .container . I usually give some default styling to h1 through h5 , p , ul , ol , li , a , and table . For most other styling, I use classes. Try to make classes \"semantic\" by describing what they are, not what they do. For example, having a class called .app-sidebar would be acceptable, but having .bg-white , .blue-border , .large-text ultimately becomes difficult to maintain. (A few helper classes, such as the Bootstrap spacing utilities can come in handy). Further reading : The Difference Between ID and Class"
            },
            {
                "chunk_id": "68aaf214d7b75fdd7fedd1b6eba5c3d1-chunk-7",
                "heading": "What about CSS grid?",
                "text": "I'll be honest, almost every time I create something in CSS grid, I end up converting it to Flexbox because I find it easier to work with and more intuitive. I didn't cover grid in this article because it's too big of a subject to just tack on at the end. See the further reading for many examples you can play around with. Further reading : Grid by Example - the examples"
            },
            {
                "chunk_id": "68aaf214d7b75fdd7fedd1b6eba5c3d1-chunk-8",
                "heading": "What else?",
                "text": "Use numbers (as percents) on line-height . I prefer line-height: 1.2 for headings, and line-height: 1.6 for font (using the Golden Ratio ). You can use the pseudo class/function :not() to target every element that doesn't match what you input. Here's a useful one for ensuring all headings, except for the first one in a section, have some extra spacing. h1:not(:first-child),\nh2:not(:first-child),\nh3:not(:first-child) { margin-top : 2.5rem ; } Always have a .container element handy, that looks something like this ( max-width and padding can be changed up to whatever you want). .container { max-width : 1200px ; padding : 0 15px ; margin-left : auto ; margin-right : auto ; } This will make your content pretty responsive by default. You'll have padding around the content on mobile, and the content won't expand too far on desktop screens, and will be horizontally centered (this is what happens when auto is applied to both margins). Don't spread text out too wide. Think about a page in a book; you wouldn't want one page to be too wide, or reading it is oddly stressful. I like to make a small container for text-only, to ensure articles and text aren't too wide. .small-container { max-width : 800px ; padding : 0 15px ; margin-left : auto ; margin-right : auto ; } Use max-width: 100% and height: auto for responsive images. This way, the image will retain it's original aspect ratio, but resize according to the width of its container. img.responsive-image { max-width : 100% ; height : auto ; } Finally, I didn't get into transitions and animations, but I think those are overall less important than the concepts I laid out here today."
            }
        ]
    },
    {
        "id": "3ad08b3086e768669cc602c169b03952",
        "url": "https://www.taniarascia.com/2023-into-2024/",
        "title": "2023 into 2024 | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "3ad08b3086e768669cc602c169b03952-chunk-1",
                "heading": "Career",
                "text": "One big thing I realized is that 2024 marks ten years (!) that I've been a developer, which is my second career. In 2014, I interned during the day for a bartender I knew who had a WordPress shop, and worked at night at NAMCO's Pac-Man restaurant (yes, somehow that was a thing. Billy Mitchell even showed up). By the first half of 2015, I found my first job as a junior web developer for Lettuce Entertain You, a Chicago restaurant group, and I've been in the field ever since! I love my career and I'm happy I've had the opportunity to work in this field and keep doing it for a full decade."
            },
            {
                "chunk_id": "3ad08b3086e768669cc602c169b03952-chunk-2",
                "heading": "Coding & Writing",
                "text": "I wrote two posts, one about where to set up websockets in a React/Redux application, and my final post for DigitalOcean, which was about the GraphQL type system . Both bangers. I learned some stuff that I didn't get around to writing, but most of my coding has been on work projects during work hours. I've written about burnout in the past, and I think it really takes a few years to get over it. Writing thirty-five articles for DigitalOcean in particular burned me out, because I had to write in a very dry style that took the joy of writing out of it for me. I think I'm getting to the point where I'd be excited to start writing again, and mostly I'm more interested non-software related topics. I really enjoyed writing the Ode to Animorphs post, for example. I'd also be interested in writing about weight lifting, Lego, gaming, cooking, art, music, DDR, and other hobbies and interests of mine."
            },
            {
                "chunk_id": "3ad08b3086e768669cc602c169b03952-chunk-3",
                "heading": "Internet",
                "text": "One thing that has made it hard to inspire myself to write here is that the internet is just...different now. It used to be called \"Surfing the 'Net\" and you never knew what you were going to find: a fansite, a personal art gallery, or a place where someone documented everything they knew about some obscure topic. I've intended this site to be a bit like the fun old websites of yore. Now I scroll through reddit a bit and check the news, whether hacker or standard, but aside from a few small Slack or Discord spots, I don't spend too much time on the web. It's harder and harder to find genuine, interesting people and sites instead of ads and bots, and I think the ease at which we can create AI generated content isn't going to make that much better. Nonetheless, the internet has been part of my life ever since my brother took me to the library when I was eight, and even though it's changed a lot since then, there are still cool things to stumble upon, and I want my website to be one of them."
            }
        ]
    },
    {
        "id": "7d97fdda6319af0b51ef5c8718905c70",
        "url": "https://www.taniarascia.com/how-to-use-the-command-line-for-apple-macos-and-linux/",
        "title": "How to Use the Command Line in Linux and macOS | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "7d97fdda6319af0b51ef5c8718905c70-chunk-1",
                "heading": "What is the command line?",
                "text": "I promise this is the most important thing to understand, and it completely blew my mind when I finally understood it. Windows, macOS - whatever operating system you're using - is simply a visual representation of your computer. This is known as a Graphical User Interface (GUI) . Take away the file explorer, the desktop, the icons, and all the other graphics, and you're left with the command line. Instead of dragging and dropping, pointing and clicking, you're typing. That's the only difference. I really want to reiterate this. Your entire computer can be accessed through the command line. You can do everything through the command line. It's the same computer you already know and love. On a Mac, if I open Finder, this is my home folder. It's called taniarascia .  I can access the same exact files through a web browser. If I open Google Chrome and I type in /Users/taniarascia , I'll be in the same place.  The same is true of the command line interface. I'm going to open Terminal.app by opening Spotlight search (command + spacebar) and type in Terminal .  Just as I was \"in\" the taniarascia folder in Google Chrome and Finder, I'm currently \"in\" the same folder via the command prompt/terminal. I'm going to prove this by typing pwd into the terminal, then pressing enter. pwd stands for Print Working Directory , and will show me exactly \"where I am\" at any point. Here's what I type. pwd And here's what is written (printed) to the screen. NolBook:~ taniarascia$ pwd\n/Users/taniarascia  It wrote /Users/taniarascia as my current working directory, where I \"am\". But how do I know what's there? How do I interact with any of those files and directories? I'm going to use the ls command, which stands for List Directory Contents ls NolBook:~ taniarascia$ ls\n  Desktop   Documents Library   Music     Private   Sites\n  Dev       Downloads Movies    Pictures  Public    Songs And now I see exactly what I see in Finder and Chrome/a web browser! Now you should understand that you're accessing the same files and folders from the command line as you would from any program on the computer. If it doesn't quite make sense yet, just follow along and I promise it will very soon. If you think that's incredibly simple and I spent way too much time explaining it, then you're probably a little brighter than I am."
            },
            {
                "chunk_id": "7d97fdda6319af0b51ef5c8718905c70-chunk-2",
                "heading": "Commands",
                "text": "We're going to learn how to do a lot of the regular things you do on a computer with a mouse or keyboard shortcuts. We're going to move between directories, create files and folders, delete them, move them, copy and paste them, and edit files. You can also press clear at any point to wipe all the history and have a clean screen. So far, we've learned three things. Always remember to type pwd before writing any commands to make sure you know where you are. Right now, I'm in my home folder. If I want to move somewhere else, I will use the cd command - Change Directory . I'm going to move to the Music folder, then check my location. Type these commands, and press enter after each one. cd music pwd ls Here is the output. NolBook:~ taniarascia$ cd music\nNolBook:music taniarascia$ pwd\n/Users/taniarascia/music\nNolBook:music taniarascia$ ls\nAudio Music Apps GarageBand iTunes First, I moved to the Music folder. The terminal will understand a directory regardless of case, so I can write music or Music . As you can see, it says NolBook:music instead of NolBook:~ , so I know I'm in a different directory now. I printed out my current location to make sure, then listed the contents. That's great, but I don't really want to do anything in the Music folder. How do I go back? In the terminal, one dot ( . ) represents the current directory, and two dots ( .. ) represents one directory backwards, or closer to the root. I want to go back one directory, back into my home folder. cd .. NolBook:~ taniarascia$ By typing cd .. I've told the shell to take me back one directory, and now I'm back in home/ ~ . Right now would be a good time to practice moving between directories. ../.. will take you back two directories, and so on. If you try to move into a directory that has a space, you may encounter an issue. For example, in my Music folder, there was a directory called Audio Music Apps . However, if I try to simply type that.. cd Audio Music Apps -bash: cd: Audio: No such file or directory The shell thinks I'm trying to move into Audio instead of Audio Music Apps because it does not recognize the space. There are two ways to remedy this. Wrap any file in double quotes to preserve the spaces. cd \"Audio Music Apps\" Type a backslash \\ character before each space. If you press tab, the Terminal will do this for you! Simply type cd A and press tab and the shell will automatically assume what you want to type. cd Audio \\ Music \\ Apps/ You can create files and folders from the command line. Let's create a folder for practicing named Shell with the mkdir ( Make Directory ) command. mkdir Shell Congratulations, you created a directory! If I type ls , I'll see my newly created directory in the home folder. I can also see this through Finder.  Now you can move into the Shell directory by inputting cd shell . NolBook:~ taniarascia$ cd shell\nNolBook:shell taniarascia$ pwd\n/Users/taniarascia/shell Now let's make a file. You can do this with the touch command. I imagine it as Merlin tapping a wand and creating something out of thin air. touch test.html I'm not very unique with my example names, so I just called it test.html . When you input this code, it won't output anything to signify that the command was successful. You can ls to see it, or check in Finder that you have created a valid .html file. You can create any sort of file, but it likely only makes sense to create text based files through terminal. You can also create multiple files at the same time. touch one.txt two.txt three.txt We used touch to create an empty file, but we can even create a file on the fly with some content using echo . echo \"Hello World\" > hello.txt Now I have a plain text file called hello.txt that contains the contents Hello World . I can check this by opening it from Finder, but I can also see the contents through Terminal with the cat command. cat hello.txt NolBook:shell taniarascia$ cat hello.txt\nHello World At this point, I would recommend creating some more files and directories and moving between them to get more familiarized with the commands. Now hopefully you've make a big mess of files and directories in your testing folder, so we can start cleaning it up. Use the rm ( Remove ) command to remove a file. rm hello.txt Note that this will permanently delete the file - it won't send to the Trash/Recycling bin. Now, let's say you create a new directory called goodbye with mkdir goodbye , and you try to delete it with rm goodbye . You'll get this error. NolBook:shell taniarascia$ rm goodbye\nrm: goodbye: is a directory No problem, we'll just delete it with rmdir ( Remove Directory ). rmdir goodbye And now it's gone. If you want to remove a folder that has files in it, you'll have to run a slightly different command. rm -r goodbye Just like with touch , we can remove multiple files or folders at the same time. rm one.txt two.txt three.txt We can also copy and paste files through the command line with the cp ( Copy ) command. Simply type cp followed by the source (file you want to copy) and destination (place you want to copy it to). cp source destination I'm in my Shell folder. Let's say I make a new directory called websites with mkdir websites . Now I can copy my test.html from /Users/taniarascia/shell to /Users/taniarascia/shell/websites . cp test.html websites This is the same as copying and pasting (command + C). To copy an entire directory, use the -R option. I can copy the websites directory and all of it's contents to a new directory. cp -R websites websites2 You can also duplicate a file in the same folder. cp test.html test2.html You can move files just as you copy them with the mv ( Move ) command. mv source destination This is similar to cutting and pasting (command + X). We can run multiple commands with the double ampersand ( && ) operator. As long as the first command is successful, the subsequent one will run. touch newfile.txt && mv newfile.txt websites I just created a new file and moved it to a different directory with one command. File permissions aren't often taken into consideration when you're a casual Windows or Mac user, but if you've ever worked on a web server you likely have experience with permissions. You can change permissions with the chmod ( Change Mode ) command. chmod 644 test.html I've given 644 (read and write by owner) permissions to test.html, a common permission for files.  The term sudo stands for Super User Do. You might encounter a situation in which the current user you're logged in as does not have sufficient permissions to perform a task. You can precede a command with sudo to run the command as administrator, as long as you have the admin password. When you type the password, it will not show any asterisks to indicate that you've typed anything. sudo chmod 775 directory You can also switch to the administrator user. This is not something you should do often, but it's useful to know. At times you will need to be logged in as admin to move between restricted directories. sudo su Now my terminal looks different - it has a # instead of a $ to indicate that I'm logged in as the super user. sh-3.2# Since I don't really want to be logged in as admin, I'm going to exit , which will return me to my regular user account. exit If you're a web developer or designer, you'll be familiar with connecting to a web server via FTP or SFTP. You can achieve a secure connection via the command line with ssh ( Secure SHell ). You connect to the server with the same information you'd use to connect via a GUI like FileZilla or Transmit. ssh username@host Once you've entered your password, you are now \"inside\" the other server. Your console will most likely look something like this: [username@host ~]$ All the commands we've already learned will work on your web host as well. You can exit the server and return to your own computer with the exit command. Sometimes, when I'm having an existential crisis, I turn to my computer to bring me back to reality. whoami NolBook:~ taniarascia$ whoami\ntaniarascia I often need to check the IP address of a given domain when I'm migrating a website. I can do this with the dig ( DNS Lookup ) command. dig google.com ;; QUESTION SECTION:\n;google.com.\t\t\tIN\tA\n\n;; ANSWER SECTION:\ngoogle.com.\t\t279\tIN\tA\t216.58.192.238 If I forget something, I can also check the help guide for the command line with man ( Manual ). man touch NAME\ntouch -- change file access and modification times To exit the manual pages, simply press q."
            },
            {
                "chunk_id": "7d97fdda6319af0b51ef5c8718905c70-chunk-3",
                "heading": "Changing permissions",
                "text": "File permissions aren't often taken into consideration when you're a casual Windows or Mac user, but if you've ever worked on a web server you likely have experience with permissions. You can change permissions with the chmod ( Change Mode ) command. chmod 644 test.html I've given 644 (read and write by owner) permissions to test.html, a common permission for files."
            },
            {
                "chunk_id": "7d97fdda6319af0b51ef5c8718905c70-chunk-4",
                "heading": "Connecting to another computer or server",
                "text": "If you're a web developer or designer, you'll be familiar with connecting to a web server via FTP or SFTP. You can achieve a secure connection via the command line with ssh ( Secure SHell ). You connect to the server with the same information you'd use to connect via a GUI like FileZilla or Transmit. ssh username@host Once you've entered your password, you are now \"inside\" the other server. Your console will most likely look something like this: [username@host ~]$ All the commands we've already learned will work on your web host as well. You can exit the server and return to your own computer with the exit command."
            }
        ]
    },
    {
        "id": "2de51b7090d216ef3bd42f52e5c98c54",
        "url": "https://www.taniarascia.com/design-for-developers/",
        "title": "Design for Developers: Specific Steps to Improve Your Website Design | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "2de51b7090d216ef3bd42f52e5c98c54-chunk-1",
                "heading": "Finished Product",
                "text": "Here is what we will start with.  Here is what we will end up with. You can view a working, responsive, coded version of it here .  Why Prague and Chicago? Because I'm from Chicago, and I started writing this article in Prague. (In Munich now...we'll see where I am when I finish). View Demo View GitHub Repo Note that the start is not actually bad design, but unstyled. It's easier to make a good design from nothing, than improve a bad one. However, all these guidelines can be used one-by-one to check for problems in your design."
            },
            {
                "chunk_id": "2de51b7090d216ef3bd42f52e5c98c54-chunk-2",
                "heading": "Step Zero: HTML",
                "text": "First, I'm going to set up the HTML here and the rest of the article will only focus on CSS. A basic overview of how the card is structured is here. (I'm leaving out the image as it's not the focus. We'll just add it at the end.) index.html < div class = \" card \" > < div class = \" card-content \" > <!-- title and content will go here --> < div class = \" card-details \" > <!-- read article, comments, and likes will go here --> </ div > </ div > </ div > Here is the actual, final HTML for one card. It's inside a container to keep the shape, but there are no other styles, normalizers, resets, or any CSS applied yet. index.html < div class = \" card \" > < div class = \" card-content \" > < h1 > The Second City </ h1 > < div class = \" subtitle \" > City of Big Shoulders </ div > < p > Chicago is the home of the blues and the truth of jazz, the heart of comedy and the idea of\n      the skyscraper. It's a city with a swagger, but without the surliness or even the fake smiles\n      found in other cities of its size. </ p > < div class = \" card-details \" > < div class = \" card-details-inner \" > < div class = \" read-more \" > < a class = \" button \" href = \" https://en.wikivoyage.org/wiki/Chicago \" > Read Article </ a > </ div > < div class = \" options \" > < div class = \" comments \" > < a href = \" #! \" > < i class = \" fa fa-comments-o \" > </ i > 16 comments </ a > </ div > < div class = \" likes \" > < a href = \" #! \" > < i class = \" fa fa-heart-o \" > </ i > 322 likes </ a > </ div > </ div > </ div > </ div > </ div > </ div > Here is where we begin.  There's going to be a typo on this throughout the entire thing, so do me the favor of ignoring it."
            },
            {
                "chunk_id": "2de51b7090d216ef3bd42f52e5c98c54-chunk-3",
                "heading": "Structure layout first",
                "text": "Before doing any design, you should figure out structure of the layout first. This means anything that uses flex , float , position , etc, without letting style and design get in the way. Since this article focuses on the design, I won't go into much detail about how flex and absolute positioning work, but I'll explain what's happening. Here is our code, in scss. .card { flex : 1 1 50% ; position : relative ; border : 1px solid #efefef ; } .card-content { padding : 0 0 30px ; } .card-details { position : absolute ; width : 100% ; bottom : 0 ; left : 0 ; } .card-details-inner { display : flex ; justify-content : space-between ; align-items : center ; }  Okay, it looks like a whole lot of code for almost no change whatsoever. But here's what's happening: Each card will be equal in size, but not exceed 50% width of the outer container , meaning there will only ever be two cards side-by-side. The details section on the bottom (read more, comments, etc) will be absolutely positioned to the bottom . Why? So that they'll always be equally placed at the bottom, no matter how much content is in the card. The two halves of the details section will be placed to the left and right and vertically centered . \"Read more\" on the left, \"Comments\" and \"Likes\" on the right. I've only included the border so we can see the Now everything that has to do with layout of the card is taken care of, and we can begin to style it."
            },
            {
                "chunk_id": "2de51b7090d216ef3bd42f52e5c98c54-chunk-4",
                "heading": "Use More Padding",
                "text": "This is the number one issue I see that indicates to me that someone is an amateur at design: not enough padding, or inconsistent padding and margins . We're going to add an equal amount of padding around the four sides of the card ( 30px ), adding extra to to bottom to account for the absolute positioning. .card-content { padding : 30px 30px 110px ; } .card-details-inner { border-top : 1px solid #efefef ; margin : 0 30px ; padding : 30px 0 ; } I'm also going to remove the top margin of the <h1> so it doesn't interfere with the equal padding of the element. I prefer to remove all top margins and only use bottom margins. This is personal preference, but it works best for me. .card h1 { margin : 0 ; } .card p { margin : 0 0 30px ; } .subtitle { margin : 0 0 15px ; }  I think it's starting to look better already. You might notice there seems to be too much space around the bottom details area, but that's only because the \"Read Article\" link will become a button - otherwise we would use less."
            },
            {
                "chunk_id": "2de51b7090d216ef3bd42f52e5c98c54-chunk-5",
                "heading": "Use fewer colors, or complementary colors",
                "text": "Same advice applies to colors as to fonts when you're new to design: if you don't know what you're doing, just use one color . The example we're making just uses one color. Want to use more than one color? That makes sense, but at least use the complementary color wheel . Here's one for you to look at.  If you're not familiar with it from first grade art class, just look at opposite ends of the wheel and match them. Blue and orange. Purple and yellow. Generally more subdued colors look better on the web. I chose #E76C67 , a flat reddish-orange for the color of our design. I could have as easily chose blue, purple, or green, because all of them would look fine with black and white, but I chose this one. a { color : #e76c67 ; text-decoration : none ; } .subtitle { margin : 0 0 15px ; font-weight : 700 ; font-size : 1.25rem ; color : #e76c67 ; }  Now we have some color to the design, and as it's only one, it has nothing to clash with."
            },
            {
                "chunk_id": "2de51b7090d216ef3bd42f52e5c98c54-chunk-6",
                "heading": "Be consistent with borders and corners",
                "text": "If you're going to have round corners, use round corners throughout all your elements: forms, buttons, cards, etc. If you're going to have square corners, use square corners throughout all your elements. Keep your borders and border-radius consistent. I'm sure you're noticing consistency is a common theme throughout this article, and it's for good reason. I'm going to go with sharp corners in our example - no border radius on any of my elements. That means my card and buttons (and if it were a full website, my form inputs as well) will all be rectangles. If I wanted to use rounded corners, I should make sure everything has rounded corners. If your buttons have a 1px border, make sure your forms have a 1px border as well. Make sure the hover and active states match the border size of the regular element so the shape doesn't change on hover and tab. Here's the CSS for our button. .button { display : block ; font-size : 1rem ; background : #e76c67 ; border : 1px solid #e76c67 ; padding : 0.75rem 1rem ; color : white ; text-decoration : none ; font-weight : 700 ; text-align : center ; } .button:hover,\n.button:focus { background : darken ( #e76c67 , 10% ) ; border : 1px solid darken ( #e76c67 , 10% ) ; }"
            }
        ]
    },
    {
        "id": "a68b35d354e33ca30e3e1dc81386a950",
        "url": "https://www.taniarascia.com/rss.xml",
        "title": "Tania Rascia | RSS Feed",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": []
    },
    {
        "id": "8d230f5e31e522a4a95afe8008211f8b",
        "url": "https://www.taniarascia.com/graphql-type-system/",
        "title": "Understanding the GraphQL Type System | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "8d230f5e31e522a4a95afe8008211f8b-chunk-1",
                "heading": "Introduction",
                "text": "GraphQL is a modern solution for facilitating the communication between a front end and a data source. All of the details and capabilities of a GraphQL implementation are laid out in the GraphQL Schema . In order to write a functioning GraphQL schema, you must understand the GraphQL Type System . In this article, you will learn about GraphQL types: the five built-in scalar types, Enums , the List and Non-Null wrapping types, Object types , and the abstract Interface and Union types that work alongside them. You will review examples for each type and learn how to use them to build a complete GraphQL schema."
            },
            {
                "chunk_id": "8d230f5e31e522a4a95afe8008211f8b-chunk-2",
                "heading": "Object Type",
                "text": "If GraphQL scalar types describe the \"leaves\" at the end of the hierarchical GraphQL response, then Object types describe the intermediary \"branches\", and almost everything in a GraphQL schema is a type of Object. Objects consist of a list of named fields (keys) and the value type that each field will resolve to. Objects are defined with the type keyword. At least one or more fields must be defined, and fields cannot begin with two underscores ( __ ) to avoid conflict with the GraphQL introspection system. In the GraphQL Fantasy Game API example, you could create a Fighter Object to represent a type of character in a game: \" A hero with direct combat ability and strength. \" type Fighter { id : ID ! name : String ! level : Int active : Boolean ! } In this example, the Fighter Object type has been declared, and it has has four named fields: id yields a Non-Null ID type. name yields a Non-Null String type. level yields an Int type. active yields a Non-Null Boolean type. Above the declaration, you can also add a comment using double quotes, as in this example: \"A hero with direct combat ability and strength.\" . This will appear as the description for the type. In this example, each field resolves to a scalar type, but Object fields can also resolve to other Object types. For example, you could create a Weapon type, and the GraphQL schema can be set up where the weapon field on the Fighter will resolve to a Weapon Object: \" A valiant weapon wielded by a fighter. \" type Weapon { name : String ! attack : Int range : Int } \" A hero with direct combat ability and strength. \" type Fighter { id : ID ! name : String ! level : Int active : Boolean ! weapon : Weapon } Objects can also be nested into the fields of other Objects. There are three special Objects that serve as entrypoints into a GraphQL schema: Query, Mutation, and Subscription. These are known as Root Operation types and follow all the same rules as any other Object type. The schema keyword represents the entrypoint into a GraphQL schema. Your root Query, Mutation, and Subcription types will be on the root schema Object: schema { query : Query mutation : Mutation subscription : Subscription } The Query type is required on any GraphQL schema and represents a read request, similar to a REST API GET . The following is an example of a root Query Object that returns a List of Fighter types: type Query { fighters : [ Fighter ] } Mutations represent a write request, which would be analogous to a POST , PUT , or DELETE in a REST API. In the following example, the Mutation has an addFighter field with a named argument ( input ): type Mutation { addFighter ( input : FighterInput ) : Fighter } Finally, a Subscription corresponds to an event stream, which would be used in conjunction with a Websocket in a web app. In the GraphQL Fantasy API, perhaps it could be used for random battle encounters, like so: type Subscription { randomBattle ( enemy : Enemy ) : BattleResult } Note that the schema entrypoint is often abstracted away in some GraphQL implementations. The fields of a GraphQL Object are essentially functions that return a value, and they can accept arguments like any function. Field arguments are defined by the name of the argument followed by the type. Arguments can be any non-Object type. In this example, the Fighter Object can be filtered by the id field (which resolves to a Non-Null ID type): type Query { fighter ( id : ID ! ) : Fighter } This particular example is useful for fetching a single item from the data store, but arguments can also be used for filtering, pagination, and other more specific queries."
            },
            {
                "chunk_id": "8d230f5e31e522a4a95afe8008211f8b-chunk-3",
                "heading": "Root Operation Types",
                "text": "There are three special Objects that serve as entrypoints into a GraphQL schema: Query, Mutation, and Subscription. These are known as Root Operation types and follow all the same rules as any other Object type. The schema keyword represents the entrypoint into a GraphQL schema. Your root Query, Mutation, and Subcription types will be on the root schema Object: schema { query : Query mutation : Mutation subscription : Subscription } The Query type is required on any GraphQL schema and represents a read request, similar to a REST API GET . The following is an example of a root Query Object that returns a List of Fighter types: type Query { fighters : [ Fighter ] } Mutations represent a write request, which would be analogous to a POST , PUT , or DELETE in a REST API. In the following example, the Mutation has an addFighter field with a named argument ( input ): type Mutation { addFighter ( input : FighterInput ) : Fighter } Finally, a Subscription corresponds to an event stream, which would be used in conjunction with a Websocket in a web app. In the GraphQL Fantasy API, perhaps it could be used for random battle encounters, like so: type Subscription { randomBattle ( enemy : Enemy ) : BattleResult } Note that the schema entrypoint is often abstracted away in some GraphQL implementations."
            }
        ]
    },
    {
        "id": "71d5be06fa2b64504a1f1f88cd0e35cd",
        "url": "https://www.taniarascia.com/digital-gardening/",
        "title": "Tending to My Digital Garden | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "71d5be06fa2b64504a1f1f88cd0e35cd-chunk-1",
                "heading": "Treating My Work as Precious",
                "text": "There are a lot of reasons contributing to less activity from me, but I think one of the major ones is that I've been treating all my blog posts like they have to be precious. They're not posts, I'll think, they're articles . It's not a blog, it's the writing section of my site. It feels weird to have a short, low-effort post about how I'm doing, what I'm doing, or something personal next to a massive diatribe about the event loop or everything you might want to know about CSS fundamentals . It's weird that I feel weird about that, considering it's my blog, so what else could or should it consist of aside from whatever I want to put on it? There are no sponsors, no affiliates, no guest posts, I'm not selling you anything, I have no set writing schedule, it's just whatever I find interesting and whatever I'm working on. If that ends up being scales on the chromatic accordion, or a list of shortcuts I use on Photoshop, or a blog roll of personal website designs I enjoy, or how my day is going, that should be completely fine. Look at kottke , nothing is too precious for his site. So I'm writing this post to give myself permission to put whatever I want on the site. One thing that held me back is that I have around 13,000 newsletter subscribers, and I felt like I didn't want to bother them, so I was neither posting nor sharing anything that I didn't deem big or important enough. This means that months go by without me sending out a single email. But then I had the thought - so many companies spam me all day with content I don't want in the attempt to get my money. It doesn't matter if I uncheck the \"send me promotional materials\" option, I'll get those emails. No matter how hard I work towards having a perfect inbox that doesn't get any spam where I only get personal emails, important emails, and a few newsletters I actually sign up for, this impersonal, useless content still manages to sneak through. That doesn't mean I shouldn't respect your inbox, but once again - it's not quite as precious as I'm making it out to be. I'm not sending out an emergency push notification to your phone, I'm sending you an email that you can read at your leisure. Personally, I'd rather get an email in my inbox from a random, genuine person online talking about whatever interests them on a semi-regular basis then the vast majority of emails I actually receive. Anyone who isn't interested is free to unsubscribe. It's not a big deal. What do you think?"
            },
            {
                "chunk_id": "71d5be06fa2b64504a1f1f88cd0e35cd-chunk-2",
                "heading": "Working with Burnout",
                "text": "Another thing that affects me is burnout, which is honestly something I've been dealing with on and off for a long time. I have a lot of methods for managing it. Mostly I try to do my best to not look at code after 5pm on a workday, and I usually don't look at code at all on weekends. Like anyone else in the field, I get imposter syndrome. The fact that I keep my coding to a minimum during non-work hours means I'm not familiar with the latest and greatest in my field. I've never tried out Rome . I don't really know what Astro, Vite, and Quik are. I have no experience with Kafka. I don't know if webpack is old and crusty and I should be using something else for my bundling. Since I'm focused on front end at my current job, my SQL, Node, and backend architecture skills are not progressing and are being replaced with other things, like a recipe for Chicken Masala or how to play Waltz No. 2 by Shostakovich. Not to say that I haven't picked up anything new - I made keyboardaccordion.com with Svelte this year, for example, a language I hadn't previously used for anything. One thing I have is a confidence that I can jump into a new project or language or framework and learn whatever is necessary and relevant for me to succeed. I live by the mantra of \"You don't need to know anything\" . You'll figure it out when you need to know it. This is not necessarily something that is tested in coding interviews, however. Anyway, it's easy for me to feel like I haven't accomplished much. Only seven articles for the whole year? Hardly any creative accomplishments? But then I look back over eight years of several side projects, and mostly consistent writing for both myself and companies in addition to having a full-time job and trying to live a life and be a person, and maybe it's not so bad. Maybe I can be proud of what I've done, and not be afraid to do something small or something new. I wish taking a sabbatical was more commonplace. Actually, every time I think about it, I just think about the mess that dealing with insurance would be, and then I put it off. Hitting that reset button wouldn't be a bad idea, though."
            }
        ]
    },
    {
        "id": "28381ee30f574b9d51e4d30cb08ea415",
        "url": "https://www.taniarascia.com/getting-started-with-vue/",
        "title": "How to Use Vue, the JavaScript Framework | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-1",
                "heading": "How to Use Vue, the JavaScript Framework",
                "text": ""
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-2",
                "heading": "What is Vue?",
                "text": "Vue (or Vue.js) is an open-source front-end JavaScript framework Vue is the view layer of an MVC application (Model View Controller) Vue is currently one of the most popular JavaScript libraries/frameworks Unlike other popular JavaScript projects, Vue is not backed by a large corporation like React (Facebook) or Angular (Google). Vue was originally written by Evan You and the open-source community."
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-3",
                "heading": "Setup and Installation",
                "text": "There are two main ways to set up Vue - in a Node project, or directly injected into a static HTML file. I'd first like to take a look at setting up Vue in an HTML file, as it's the simplest setup and introduction. Those who have only ever used a library like jQuery will be most familiar with this method. If you've already used React or another JavaScript framework, feel free to skip to the next section. We can just create a basic HTML file and add a link to a Vue CDN in the head, and create a <div> with an id of app . index.html <! DOCTYPE html > < html lang = \" en \" > < head > < meta charset = \" utf-8 \" /> < meta http-equiv = \" X-UA-Compatible \" content = \" IE=edge \" /> < meta name = \" viewport \" content = \" width=device-width,initial-scale=1.0 \" /> < script src = \" https://cdn.jsdelivr.net/npm/vue/dist/vue.js \" > </ script > < title > Vue App </ title > </ head > < body > < div id = \" app \" > </ div > </ body > </ html > We can create a simple \"Hello World\" with Vue. Using double brackets, we'll render message in app . In the <script> tag, we'll link the data and the DOM. We create a new Vue , and the message property on data will be rendered. index.html < html lang = \" en \" > < head > < meta charset = \" utf-8 \" /> < meta http-equiv = \" X-UA-Compatible \" content = \" IE=edge \" /> < meta name = \" viewport \" content = \" width=device-width,initial-scale=1.0 \" /> < script src = \" https://cdn.jsdelivr.net/npm/vue/dist/vue.js \" > </ script > < title > Vue App </ title > </ head > < body > < div id = \" app \" > {{message}} </ div > < script > const App = new Vue ( { el : '#app' , data : { message : 'Hello Vue!' , } , } ) </ script > </ body > </ html > We can see the data render.  At this point, it's not very impressive, and it's what you'll learn in the introduction of the documentation , but it drives home the important point that Vue is just JavaScript, and there's no need to get nervous about Node, Babel, Webpack, and so on. More often, you won't be injecting Vue into a static HTML file, but you'll be taking advantage of the Node ecosystem. The easiest way we can do this is vue Vue CLI , or the Vue Command Line Interface. As mentioned in the prerequisites, you should be familiar with Node and npm/yarn and how to work with local and global packages. First, we'll install Vue CLI. # install with npm npm i -g @vue/cli @vue/cli-service-global # install with yarn yarn global add @vue/cli @vue/cli-service-global Now that we have Vue CLI installed globally, we can use the vue command anywhere. We'll use vue create to start a new project. vue create vue-app You'll be given an option to do default or manual, and we can just select default. Vue CLI v3.7.0\n? Please pick a preset: (Use arrow keys)\n❯ default (babel, eslint)\n  Manually select features Once that's done, you can move to the new app that's been created and serve to run the dev server. cd vue-app npm run serve # or yarn serve Once that's done, you can navigate to http://localhost:8080/ to see the default page.  At this point, you're all set up and ready to go with Vue. If you're using Visual Studio Code, install the Vetur plugin for syntax highlighting, formatting, and so on. One final thing to have in your toolbelt while working with Vue is Vue DevTools. It's an add-on to regular DeveloperTools which will show you all the information about your components - their state, methods, etc. Vue DevTools on Chrome Vue DevTools on FireFox"
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-4",
                "heading": "Static HTML File",
                "text": "index.html <! DOCTYPE html > < html lang = \" en \" > < head > < meta charset = \" utf-8 \" /> < meta http-equiv = \" X-UA-Compatible \" content = \" IE=edge \" /> < meta name = \" viewport \" content = \" width=device-width,initial-scale=1.0 \" /> < script src = \" https://cdn.jsdelivr.net/npm/vue/dist/vue.js \" > </ script > < title > Vue App </ title > </ head > < body > < div id = \" app \" > </ div > </ body > </ html > We can create a simple \"Hello World\" with Vue. Using double brackets, we'll render message in app . In the <script> tag, we'll link the data and the DOM. We create a new Vue , and the message property on data will be rendered. index.html < html lang = \" en \" > < head > < meta charset = \" utf-8 \" /> < meta http-equiv = \" X-UA-Compatible \" content = \" IE=edge \" /> < meta name = \" viewport \" content = \" width=device-width,initial-scale=1.0 \" /> < script src = \" https://cdn.jsdelivr.net/npm/vue/dist/vue.js \" > </ script > < title > Vue App </ title > </ head > < body > < div id = \" app \" > {{message}} </ div > < script > const App = new Vue ( { el : '#app' , data : { message : 'Hello Vue!' , } , } ) </ script > </ body > </ html > We can see the data render.  At this point, it's not very impressive, and it's what you'll learn in the introduction of the documentation , but it drives home the important point that Vue is just JavaScript, and there's no need to get nervous about Node, Babel, Webpack, and so on."
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-5",
                "heading": "Vue CLI",
                "text": "More often, you won't be injecting Vue into a static HTML file, but you'll be taking advantage of the Node ecosystem. The easiest way we can do this is vue Vue CLI , or the Vue Command Line Interface. As mentioned in the prerequisites, you should be familiar with Node and npm/yarn and how to work with local and global packages. First, we'll install Vue CLI. # install with npm npm i -g @vue/cli @vue/cli-service-global # install with yarn yarn global add @vue/cli @vue/cli-service-global Now that we have Vue CLI installed globally, we can use the vue command anywhere. We'll use vue create to start a new project. vue create vue-app You'll be given an option to do default or manual, and we can just select default. Vue CLI v3.7.0\n? Please pick a preset: (Use arrow keys)\n❯ default (babel, eslint)\n  Manually select features Once that's done, you can move to the new app that's been created and serve to run the dev server. cd vue-app npm run serve # or yarn serve Once that's done, you can navigate to http://localhost:8080/ to see the default page.  At this point, you're all set up and ready to go with Vue. If you're using Visual Studio Code, install the Vetur plugin for syntax highlighting, formatting, and so on."
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-6",
                "heading": "Vue DevTools",
                "text": "One final thing to have in your toolbelt while working with Vue is Vue DevTools. It's an add-on to regular DeveloperTools which will show you all the information about your components - their state, methods, etc. Vue DevTools on Chrome Vue DevTools on FireFox"
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-7",
                "heading": "Getting Started",
                "text": "Congrats, you're all set up! You have a new Vue boilerplate app. In the project files, you have a public folder which contains index.html , and an src folder with main.js as the entry point. We're introduced to .vue files, with the HelloWorld.vue and App.vue components.  In main.js , we're bringing in Vue and rendering the App to our app div in index.html . This file won't need to change. src/main.js import Vue from 'vue' import App from './App.vue' Vue . config . productionTip = false new Vue ( { render : ( h ) => h ( App ) , } ) . $mount ( '#app' )"
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-8",
                "heading": "Entry point",
                "text": "In main.js , we're bringing in Vue and rendering the App to our app div in index.html . This file won't need to change. src/main.js import Vue from 'vue' import App from './App.vue' Vue . config . productionTip = false new Vue ( { render : ( h ) => h ( App ) , } ) . $mount ( '#app' )"
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-9",
                "heading": "Anatomy of a Vue file",
                "text": "Anything else we make will be a .vue file, which always consists of three things: <template> <script> <style> And looks like this: example.vue < template > </ template > < script > export default { name : 'component-name' , } </ script > < style scoped > </ style > This may seem strange to you, as it did to me at first. I originally learned front end coding with a focus on separation of concerns for HTML, CSS, and JavaScript, and here we have all three together. Yet JavaScript and the way we design apps has evolved, and keeping our styles and view and component coupled together is generally considered an advantage and improves maintainability. The data and logic for the component goes in the <script> tag, but only name is required. The <style> tag is just CSS. We have the advantage of being able to scope the CSS so it only applies to this component and not globally with the scoped attribute. Now let's start actually building this app. As always, this tutorial is about functionality, not styles, so I'm just going to link to Primitive UI in the index.html file to add some easy default styles. < link rel = \" stylesheet \" href = \" https://unpkg.com/primitive-ui/dist/css/main.css \" />"
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-10",
                "heading": "Creating a Component",
                "text": "Create a file called EmployeeTable.vue in src/components . We're going to create a table with some static data in here. src/components/EmployeeTable.vue < template > < div id = \" employee-table \" > < table > < thead > < tr > < th > Employee name </ th > < th > Employee email </ th > </ tr > </ thead > < tbody > < tr > < td > Richard Hendricks </ td > < td > richard@piedpiper.com </ td > </ tr > < tr > < td > Bertram Gilfoyle </ td > < td > gilfoyle@piedpiper.com </ td > </ tr > < tr > < td > Dinesh Chugtai </ td > < td > dinesh@piedpiper.com </ td > </ tr > </ tbody > </ table > </ div > </ template > < script > export default { name : 'employee-table' , } </ script > < style scoped > </ style > In Vue, the convention is that the filename and import will be in PascalCase, such as EmployeeTable , but when used in a template, this will translate to kebab-case, <employee-table> . This uses the proper conventions for JavaScript and HTML respectively. We're exporting EmployeeTable and importing it into App.vue . In our import , we can use @ to reference the src folder. App.vue knows which components it can use via the components property. All imported components must be added there. I've also added in some global styles. src/App.vue < template > < div id = \" app \" class = \" small-container \" > < h1 > Employees </ h1 > < employee-table /> </ div > </ template > < script > import EmployeeTable from '@/components/EmployeeTable.vue' export default { name : 'app' , components : { EmployeeTable , } , } </ script > < style > button { background : #009435 ; border : 1px solid #009435 ; } .small-container { max-width : 680px ; } </ style > So here's what we have so far.  We want to refactor this already to use data in the form of arrays and object as opposed to hard coding all our values into the table. So let's add a data() method, and return an employees array. We're also going to add IDs to each one to make them uniquely identifiable. App.vue import EmployeeTable from '@/components/EmployeeTable.vue' export default { name : 'app' , components : { EmployeeTable , } , data ( ) { return { employees : [ { id : 1 , name : 'Richard Hendricks' , email : 'richard@piedpiper.com' , } , { id : 2 , name : 'Bertram Gilfoyle' , email : 'gilfoyle@piedpiper.com' , } , { id : 3 , name : 'Dinesh Chugtai' , email : 'dinesh@piedpiper.com' , } , ] , } } , } Now we have this data on App.vue , but we want to pass it to EmployeeTable . We can do that by passing the data down as a property. An attribute that begins with a colon : will allow you to pass data. The more verbose version would be v-bind . In this case we'll pass our employees array. < employee-table :employees = \" employees \" /> <!-- this is the same thing --> < employee-table v-bind: employees = \" employees \" /> Now on the EmployeeTable side, we want to retrieve that data, so we tell the component that it will receive props, in this case an Array . EmployeeTable.vue export default { name : 'employee-table' , props : { employees : Array , } , } Now that we have the data, we want to loop through the data and display the DOM nodes accordingly. We'll do this with the v-for attribute. Now that we can retrieve employees in EmployeeTable , we'll display one table row per employee. EmployeeTable.vue < template > < div id = \" employee-table \" > < table > <!-- ...thead... --> < tbody > < tr v-for = \" employee in employees \" :key = \" employee.id \" > < td > {{ employee.name }} </ td > < td > {{ employee.email }} </ td > </ tr > </ tbody > </ table > </ div > </ template > Vue (like React) has a requirement for uniquely identifying any element in an array, so we'll use :key on the table row and set it to a unique value. Now our table hasn't changed from a view perspective, but it is now set up to work with data more efficiently."
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-11",
                "heading": "Loops",
                "text": "Now that we have the data, we want to loop through the data and display the DOM nodes accordingly. We'll do this with the v-for attribute. Now that we can retrieve employees in EmployeeTable , we'll display one table row per employee. EmployeeTable.vue < template > < div id = \" employee-table \" > < table > <!-- ...thead... --> < tbody > < tr v-for = \" employee in employees \" :key = \" employee.id \" > < td > {{ employee.name }} </ td > < td > {{ employee.email }} </ td > </ tr > </ tbody > </ table > </ div > </ template > Vue (like React) has a requirement for uniquely identifying any element in an array, so we'll use :key on the table row and set it to a unique value. Now our table hasn't changed from a view perspective, but it is now set up to work with data more efficiently."
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-12",
                "heading": "Working with Forms",
                "text": "Now we're successfully accomplishing the \"Read\" portion of a CRUD app, but the next most important thing to do is add the ability to create a new employee. We're going to create an add employee form. Make EmployeeForm.vue and set it up a field to enter name, email, and a button to submit. I'll go ahead and create an employee data property with name and email on it. src/components/EmployeeForm.vue < template > < div id = \" employee-form \" > < form > < label > Employee name </ label > < input type = \" text \" /> < label > Employee Email </ label > < input type = \" text \" /> < button > Add Employee </ button > </ form > </ div > </ template > < script > export default { name : 'employee-form' , data ( ) { return { employee : { name : '' , email : '' , } , } } , } </ script > < style scoped > form { margin-bottom : 2rem ; } </ style > We'll also need to add this to App.vue src/components/App.vue < template > < div id = \" app \" class = \" small-container \" > < h1 > Employees </ h1 > < employee-form /> < employee-table :employees = \" employees \" /> </ div > </ template > < script > import EmployeeTable from '@/components/EmployeeTable.vue' import EmployeeForm from '@/components/EmployeeForm.vue' export default { name : 'app' , components : { EmployeeTable , EmployeeForm , } , data : { // ... } , } </ script >  Now we have to figure out how to get the data that we're writing in the input into Vue's component state. To do that we'll use v-model . v-model is some built-in Vue syntactic sugar for updating an input value with an onchange event. EmployeeForm.vue < template > < div id = \" employee-form \" > < form > < label > Employee name </ label > < input v-model = \" employee.name \" type = \" text \" /> < label > Employee Email </ label > < input v-model = \" employee.email \" type = \" text \" /> < button > Add Employee </ button > </ form > </ div > </ template > Now that you've added this, you can see in Vue DevTools that the state of the component changes. We just need to submit these values and update the parent (App) state with the new employee object. We want to do an onsubmit event on the form. We can do that with v-on:submit , or @submit for short. This convention will be the same for @click / v-on:click or any other similar event. The submit event also has a handy prevent we can add to it, which is the same as putting event.preventDefault() inside the submit function, since we won't be using the default GET/POST methods provided by forms. Let's add this to the form, and reference a handleSubmit method we'll make. EmployeeForm.vue < form @submit.prevent = \" handleSubmit \" > </ form > Now we're going to create our first method on a component. Below data() , we can create a methods object, which will contain all the custom methods we create. Let's add handleSubmit there. EmployeeForm.vue export default { name : 'employee-form' , data ( ) { return { employee : { name : '' , email : '' , } , } } , methods : { handleSubmit ( ) { console . log ( 'testing handleSubmit' ) } , } , } Now if you try to submit the form, you'll see the message logged in the console. We know the form submit method is working properly, so we can pass the data up to App now. We'll do this using $emit . Emit broadcasts a name of an event and data to its parent component, like so. this . $emit ( 'name-of-emitted-event' , dataToPass ) In our case, we'll create an event called add:employee , and pass this.employee . EmployeeForm.vue handleSubmit ( ) { this . $emit ( 'add:employee' , this . employee ) } Once you add this, click to add form button and go to Vue DevTools. You'll see a notification for a new event, and it will tell you the name, source, and payload, which in this case is an object we created.  Now employee-form is broadcasting its emitted event, but we need to capture the event and value in the parent to work with it. The first thing we need to do is make employee-form acknowledge and handle the emitted event, and invoke a new method. It will look like this: < component @name-of-emitted-event = \" methodToCallOnceEmitted \" > </ component > So let's add that to App.vue . App.vue < employee-form @add: employee = \" addEmployee \" /> Now we just have to create the addEmployee method on App.vue , which will modify the employees array by adding a new item to it. That will essentially look like this: App.vue methods : { addEmployee ( employee ) { this . employees = [ ... this . employees , employee ] } } Since I have to make an id as well, I'll just write some code to get the new employees ID based on number of items in the array. Note that in a real database, this ID would be uniquely generated or auto incremented. addEmployee ( employee ) { const lastId = this . employees . length > 0 ? this . employees [ this . employees . length - 1 ] . id : 0 ; const id = lastId + 1 ; const newEmployee = { ... employee , id } ; this . employees = [ ... this . employees , newEmployee ] ; } Now with this, you can add new employees. Note that the new employee will not persist, as it is front end only and not connected to a database."
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-13",
                "heading": "Event listeners",
                "text": "We want to do an onsubmit event on the form. We can do that with v-on:submit , or @submit for short. This convention will be the same for @click / v-on:click or any other similar event. The submit event also has a handy prevent we can add to it, which is the same as putting event.preventDefault() inside the submit function, since we won't be using the default GET/POST methods provided by forms. Let's add this to the form, and reference a handleSubmit method we'll make. EmployeeForm.vue < form @submit.prevent = \" handleSubmit \" > </ form >"
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-14",
                "heading": "Methods",
                "text": "Now we're going to create our first method on a component. Below data() , we can create a methods object, which will contain all the custom methods we create. Let's add handleSubmit there. EmployeeForm.vue export default { name : 'employee-form' , data ( ) { return { employee : { name : '' , email : '' , } , } } , methods : { handleSubmit ( ) { console . log ( 'testing handleSubmit' ) } , } , }"
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-15",
                "heading": "Emitting events to the parent",
                "text": "Now if you try to submit the form, you'll see the message logged in the console. We know the form submit method is working properly, so we can pass the data up to App now. We'll do this using $emit . Emit broadcasts a name of an event and data to its parent component, like so. this . $emit ( 'name-of-emitted-event' , dataToPass ) In our case, we'll create an event called add:employee , and pass this.employee . EmployeeForm.vue handleSubmit ( ) { this . $emit ( 'add:employee' , this . employee ) } Once you add this, click to add form button and go to Vue DevTools. You'll see a notification for a new event, and it will tell you the name, source, and payload, which in this case is an object we created."
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-16",
                "heading": "Retrieving events from the child",
                "text": "Now employee-form is broadcasting its emitted event, but we need to capture the event and value in the parent to work with it. The first thing we need to do is make employee-form acknowledge and handle the emitted event, and invoke a new method. It will look like this: < component @name-of-emitted-event = \" methodToCallOnceEmitted \" > </ component > So let's add that to App.vue . App.vue < employee-form @add: employee = \" addEmployee \" /> Now we just have to create the addEmployee method on App.vue , which will modify the employees array by adding a new item to it. That will essentially look like this: App.vue methods : { addEmployee ( employee ) { this . employees = [ ... this . employees , employee ] } } Since I have to make an id as well, I'll just write some code to get the new employees ID based on number of items in the array. Note that in a real database, this ID would be uniquely generated or auto incremented. addEmployee ( employee ) { const lastId = this . employees . length > 0 ? this . employees [ this . employees . length - 1 ] . id : 0 ; const id = lastId + 1 ; const newEmployee = { ... employee , id } ; this . employees = [ ... this . employees , newEmployee ] ; } Now with this, you can add new employees. Note that the new employee will not persist, as it is front end only and not connected to a database."
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-17",
                "heading": "Basic form validation",
                "text": "This technically works, but we can clean it up a little. We want to... Show a success message if everything went through Show an error message if something was missing Highlight the inputs that have invalid data Clear the inputs after the form is done submitting properly, and Focus on the first item in the input after successful submission In Vue, we can use computed properties , which are functions that are automatically computed when something changes. This way we can avoid putting complex logic in the Vue template itself. I'm just going to put a basic check to make sure the field isn't empty for both fields. EmployeeForm.vue computed : { invalidName ( ) { return this . employee . name === '' } , invalidEmail ( ) { return this . employee . email === '' } , } , To set all this up, I'm going to add a submitting state, to check whether or not the form is currently being submitted, an error state if something went wrong, and a success state if it went through properly. EmployeeForm.vue data ( ) { return { submitting : false , error : false , success : false , employee : { name : '' , email : '' , } } } The submit function will first clear whether or not success or error have been set, the start submitting. It'll check our computed properties, and if either is true, an error will be set. If not, we can submit, and set all the states back to default. EmployeeForm.vue methods : { handleSubmit ( ) { this . submitting = true this . clearStatus ( ) if ( this . invalidName || this . invalidEmail ) { this . error = true return } this . $emit ( 'add:employee' , this . employee ) this . employee = { name : '' , email : '' , } this . error = false this . success = true this . submitting = false } , clearStatus ( ) { this . success = false this . error = false } } Since we want an error message and a success message, I'll set up the CSS for that. EmployeeForm.vue < style scoped > form { margin-bottom : 2rem ; } [class*='-message'] { font-weight : 500 ; } .error-message { color : #d33c40 ; } .success-message { color : #32a95d ; } </ style > Finally, we'll set up the form. If the form is submitting and one of the computed properties is invalid, we want to set a has-error class on the input. Using :class= ensures that the class will be treated as JavaScript instead of a plain string. We can make sure the statuses get cleared on focus and keypress events, and we have success and error messages displayed accordingly at the bottom. EmployeeForm.vue < form @submit.prevent = \" handleSubmit \" > < label > Employee name </ label > < input type = \" text \" :class = \" { ' has-error ' : submitting && invalidName } \" v-model = \" employee.name \" @focus = \" clearStatus \" @keypress = \" clearStatus \" /> < label > Employee Email </ label > < input type = \" text \" :class = \" { ' has-error ' : submitting && invalidEmail } \" v-model = \" employee.email \" @focus = \" clearStatus \" /> < p v-if = \" error && submitting \" class = \" error-message \" > ❗Please fill out all required fields </ p > < p v-if = \" success \" class = \" success-message \" > ✅ Employee successfully added </ p > < button > Add Employee </ button > </ form > You'll notice a v-if property. This is a conditional in Vue . In this case, the <p> element will only be displayed if the condition is true. There is also a v-else-if , and v-else property, which work the same as their vanilla JS counterparts. Now that that's complete, we can see these conditionally rendered elements. Here's the error message on a missing field.  And here's the success message.  There's one more small improvement we can make. After submitting the form, it would be nice if the focus went back on the first item to make it easy to add many items without clicking around. We can do that with refs , which we can use to target a specific element. We can just add a ref to the first input... EmployeeForm.vue < input ref = \" first \" ... /> And focus that ref after submitting the form in handleSubmit . EmployeeForm.vue this . $emit ( 'add:employee' , this . employee ) this . $refs . first . focus ( ) Now after you submit the focus will automatically go to the first field in the form. The @keypress event to clearStatus we added to it before will ensure the success or error message goes away once you start typing."
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-18",
                "heading": "Computed properties",
                "text": "In Vue, we can use computed properties , which are functions that are automatically computed when something changes. This way we can avoid putting complex logic in the Vue template itself. I'm just going to put a basic check to make sure the field isn't empty for both fields. EmployeeForm.vue computed : { invalidName ( ) { return this . employee . name === '' } , invalidEmail ( ) { return this . employee . email === '' } , } , To set all this up, I'm going to add a submitting state, to check whether or not the form is currently being submitted, an error state if something went wrong, and a success state if it went through properly. EmployeeForm.vue data ( ) { return { submitting : false , error : false , success : false , employee : { name : '' , email : '' , } } } The submit function will first clear whether or not success or error have been set, the start submitting. It'll check our computed properties, and if either is true, an error will be set. If not, we can submit, and set all the states back to default. EmployeeForm.vue methods : { handleSubmit ( ) { this . submitting = true this . clearStatus ( ) if ( this . invalidName || this . invalidEmail ) { this . error = true return } this . $emit ( 'add:employee' , this . employee ) this . employee = { name : '' , email : '' , } this . error = false this . success = true this . submitting = false } , clearStatus ( ) { this . success = false this . error = false } } Since we want an error message and a success message, I'll set up the CSS for that. EmployeeForm.vue < style scoped > form { margin-bottom : 2rem ; } [class*='-message'] { font-weight : 500 ; } .error-message { color : #d33c40 ; } .success-message { color : #32a95d ; } </ style > Finally, we'll set up the form. If the form is submitting and one of the computed properties is invalid, we want to set a has-error class on the input. Using :class= ensures that the class will be treated as JavaScript instead of a plain string. We can make sure the statuses get cleared on focus and keypress events, and we have success and error messages displayed accordingly at the bottom. EmployeeForm.vue < form @submit.prevent = \" handleSubmit \" > < label > Employee name </ label > < input type = \" text \" :class = \" { ' has-error ' : submitting && invalidName } \" v-model = \" employee.name \" @focus = \" clearStatus \" @keypress = \" clearStatus \" /> < label > Employee Email </ label > < input type = \" text \" :class = \" { ' has-error ' : submitting && invalidEmail } \" v-model = \" employee.email \" @focus = \" clearStatus \" /> < p v-if = \" error && submitting \" class = \" error-message \" > ❗Please fill out all required fields </ p > < p v-if = \" success \" class = \" success-message \" > ✅ Employee successfully added </ p > < button > Add Employee </ button > </ form >"
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-19",
                "heading": "Conditonals",
                "text": "You'll notice a v-if property. This is a conditional in Vue . In this case, the <p> element will only be displayed if the condition is true. There is also a v-else-if , and v-else property, which work the same as their vanilla JS counterparts. Now that that's complete, we can see these conditionally rendered elements. Here's the error message on a missing field.  And here's the success message."
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-20",
                "heading": "Adding a reference",
                "text": "There's one more small improvement we can make. After submitting the form, it would be nice if the focus went back on the first item to make it easy to add many items without clicking around. We can do that with refs , which we can use to target a specific element. We can just add a ref to the first input... EmployeeForm.vue < input ref = \" first \" ... /> And focus that ref after submitting the form in handleSubmit . EmployeeForm.vue this . $emit ( 'add:employee' , this . employee ) this . $refs . first . focus ( ) Now after you submit the focus will automatically go to the first field in the form. The @keypress event to clearStatus we added to it before will ensure the success or error message goes away once you start typing."
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-21",
                "heading": "Deleting Items",
                "text": "Now that the form is done, we have to finish the other actions on the table - editing and deleting. We'll start with deleting, which is an easier operation. First, we'll update the table to have an \"Actions\" row, and add buttons for editing and deleting. EmployeeTable.vue < template > < div id = \" employee-table \" > < table > < thead > < tr > < th > Employee name </ th > < th > Employee email </ th > < th > Actions </ th > </ tr > </ thead > < tbody > < tr v-for = \" employee in employees \" :key = \" employee.id \" > < td > {{ employee.name }} </ td > < td > {{ employee.email }} </ td > < td > < button > Edit </ button > < button > Delete </ button > </ td > </ tr > </ tbody > </ table > </ div > </ template > < style scoped > button { margin : 0 0.5rem 0 0 ; } </ style > We'll emit an event like before, this time called deleteEmployee . We can pass the id of the employee as the payload. EmployeeTable.vue < button @click = \" $emit( ' delete:employee ' , employee.id) \" > Delete </ button > Back in App.vue , we have to tell employee-table to perform an action on delete-employee ... App.vue < employee-table :employees = \" employees \" @delete: employee = \" deleteEmployee \" /> And we'll filter the deleted row out. App.vue methods : { addEmployee ( employee ) { ... } , deleteEmployee ( id ) { this . employees = this . employees . filter ( employee => employee . id !== id ) } } Now you'll notice you can delete items. Let's just add a message in case there are no employees. EmployeeTable.vue < div id = \" employee-table \" > < p v-if = \" employees.length < 1 \" class = \" empty-table \" > No employees </ p > < table v-else > ... </ table > </ div > We can successfully add and delete employees now.  Editing is a little more complex than deleting. The setup from App.vue is simple though, so we'll do that first. Just add the edit:employee event that we'll be making: App.vue < employee-table :employees = \" employees \" @delete: employee = \" deleteEmployee \" @edit: employee = \" editEmployee \" /> And create the editEmployee method, which will take id and updatedEmployee parameters, map through the employees array, and update the correct employee. App.vue editEmployee ( id , updatedEmployee ) { this . employees = this . employees . map ( employee => employee . id === id ? updatedEmployee : employee ) } Simple enough. Now back in EmployeeTable.vue , we'll basically want to make an \"edit mode\" that is enabled when the button is pressed. EmployeeTable.vue < button @click = \" editMode(employee.id) \" > Edit </ button > We'll create an editing state that will get set to the id of the row that's currently being edited when editMode is enabled. EmployeeTable will have it's own local editEmployee method, which emits edit:employee to App if the fields aren't empty, and resets the editing state. EmployeeTable.vue data ( ) { return { editing : null , } } , methods : { editMode ( id ) { this . editing = id } , editEmployee ( employee ) { if ( employee . name === '' || employee . email === '' ) return this . $emit ( 'edit:employee' , employee . id , employee ) this . editing = null } } Here's the current state of our table row - we're just displaying the values. < tr v-for = \" employee in employees \" :key = \" employee.id \" > < td > {{ employee.name }} </ td > < td > {{ employee.email }} </ td > < td > < button @click = \" editMode(employee.id) \" > Edit </ button > < button @click = \" $emit( ' delete:employee ' , employee.id) \" > Delete </ button > </ td > </ tr > To make it editable, we'll check if editing === employee.id is true for a particular row, and display and input instead. We'll also add a cancel button that will cancel the editing by setting it to null. < tr v-for = \" employee in employees \" :key = \" employee.id \" > < td v-if = \" editing === employee.id \" > < input type = \" text \" v-model = \" employee.name \" /> </ td > < td v-else > {{employee.name}} </ td > < td v-if = \" editing === employee.id \" > < input type = \" text \" v-model = \" employee.email \" /> </ td > < td v-else > {{employee.email}} </ td > < td v-if = \" editing === employee.id \" > < button @click = \" editEmployee(employee) \" > Save </ button > < button class = \" muted-button \" @click = \" editing = null \" > Cancel </ button > </ td > < td v-else > < button @click = \" editMode(employee.id) \" > Edit </ button > < button @click = \" $emit( ' delete:employee ' , employee.id) \" > Delete </ button > </ td > </ tr > And now I can edit a single row at a time!  Editing works, but you still can't cancel the state from updating with this code, even if the new values don't get sent to the API call. We'll create cancelEdit , and make the cancel button call @click=\"cancelEdit(employee)\" and remove .id from the edit button. We'll make a cached employee that we can return to. editMode ( employee ) { this . cachedEmployee = Object . assign ( { } , employee ) this . editing = employee . id } , cancelEdit ( employee ) { Object . assign ( employee , this . cachedEmployee ) this . editing = null ; } At this point, the app is technically complete, but a real production app will probably be making API calls to a back end database, so we'll make a mock version of that."
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-22",
                "heading": "Editing Items",
                "text": "Editing is a little more complex than deleting. The setup from App.vue is simple though, so we'll do that first. Just add the edit:employee event that we'll be making: App.vue < employee-table :employees = \" employees \" @delete: employee = \" deleteEmployee \" @edit: employee = \" editEmployee \" /> And create the editEmployee method, which will take id and updatedEmployee parameters, map through the employees array, and update the correct employee. App.vue editEmployee ( id , updatedEmployee ) { this . employees = this . employees . map ( employee => employee . id === id ? updatedEmployee : employee ) } Simple enough. Now back in EmployeeTable.vue , we'll basically want to make an \"edit mode\" that is enabled when the button is pressed. EmployeeTable.vue < button @click = \" editMode(employee.id) \" > Edit </ button > We'll create an editing state that will get set to the id of the row that's currently being edited when editMode is enabled. EmployeeTable will have it's own local editEmployee method, which emits edit:employee to App if the fields aren't empty, and resets the editing state. EmployeeTable.vue data ( ) { return { editing : null , } } , methods : { editMode ( id ) { this . editing = id } , editEmployee ( employee ) { if ( employee . name === '' || employee . email === '' ) return this . $emit ( 'edit:employee' , employee . id , employee ) this . editing = null } } Here's the current state of our table row - we're just displaying the values. < tr v-for = \" employee in employees \" :key = \" employee.id \" > < td > {{ employee.name }} </ td > < td > {{ employee.email }} </ td > < td > < button @click = \" editMode(employee.id) \" > Edit </ button > < button @click = \" $emit( ' delete:employee ' , employee.id) \" > Delete </ button > </ td > </ tr > To make it editable, we'll check if editing === employee.id is true for a particular row, and display and input instead. We'll also add a cancel button that will cancel the editing by setting it to null. < tr v-for = \" employee in employees \" :key = \" employee.id \" > < td v-if = \" editing === employee.id \" > < input type = \" text \" v-model = \" employee.name \" /> </ td > < td v-else > {{employee.name}} </ td > < td v-if = \" editing === employee.id \" > < input type = \" text \" v-model = \" employee.email \" /> </ td > < td v-else > {{employee.email}} </ td > < td v-if = \" editing === employee.id \" > < button @click = \" editEmployee(employee) \" > Save </ button > < button class = \" muted-button \" @click = \" editing = null \" > Cancel </ button > </ td > < td v-else > < button @click = \" editMode(employee.id) \" > Edit </ button > < button @click = \" $emit( ' delete:employee ' , employee.id) \" > Delete </ button > </ td > </ tr > And now I can edit a single row at a time!  Editing works, but you still can't cancel the state from updating with this code, even if the new values don't get sent to the API call. We'll create cancelEdit , and make the cancel button call @click=\"cancelEdit(employee)\" and remove .id from the edit button. We'll make a cached employee that we can return to. editMode ( employee ) { this . cachedEmployee = Object . assign ( { } , employee ) this . editing = employee . id } , cancelEdit ( employee ) { Object . assign ( employee , this . cachedEmployee ) this . editing = null ; } At this point, the app is technically complete, but a real production app will probably be making API calls to a back end database, so we'll make a mock version of that."
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-23",
                "heading": "Making Asynchronous REST API Calls",
                "text": "We're going to use JSON Placeholder to make fake API calls that will give us real responses. We can GET values (for example, visit https://jsonplaceholder.typicode.com/users to see the users JSON we'll be using), and we can make POST , PUT , and DELETE requests. These requests will not persist in a real database because they're for example purposes. An asynchronous method with async/await will look something like this, using a try/catch block. async asynchronousMethod ( ) { try { const response = await fetch ( 'url' ) const data = await response . json ( ) // do something with `data` } catch ( error ) { // do something with `error` } } So at this point, I'll replace all our CRUD methods with async methods, and update the data via the API as well as the front end. With GET, we'll want to remove all the pre-populated data we have in the employees array, and replace it with the data from the API. We'll call that GET in the mounted lifecycle method . mounted tells our component to perform the action once the component is actually inserted to the DOM. This is a common way to display data from an API. (Some use the created lifecycle for this task.) App.vue export default { name : 'app' , components : { EmployeeTable , EmployeeForm , } , data ( ) { return { employees : [ ] , } } , mounted ( ) { this . getEmployees ( ) } , } So now we can update all our CRUD methods with their asynchronous API-call equivalents. Retrieve a resource. App.vue async getEmployees ( ) { try { const response = await fetch ( 'https://jsonplaceholder.typicode.com/users' ) const data = await response . json ( ) this . employees = data } catch ( error ) { console . error ( error ) } } Create a new resource (non-idempotent). App.vue async addEmployee ( employee ) { try { const response = await fetch ( 'https://jsonplaceholder.typicode.com/users' , { method : 'POST' , body : JSON . stringify ( employee ) , headers : { 'Content-type' : 'application/json; charset=UTF-8' } , } ) const data = await response . json ( ) this . employees = [ ... this . employees , data ] } catch ( error ) { console . error ( error ) } } Update an exiting resource (idempotent). App.vue async editEmployee ( id , updatedEmployee ) { try { const response = await fetch ( ` https://jsonplaceholder.typicode.com/users/ ${ id } ` , { method : 'PUT' , body : JSON . stringify ( updatedEmployee ) , headers : { 'Content-type' : 'application/json; charset=UTF-8' } , } ) const data = await response . json ( ) this . employees = this . employees . map ( employee => ( employee . id === id ? data : employee ) ) } catch ( error ) { console . error ( error ) } } Remove an existing resource. App.vue async deleteEmployee ( id ) { try { await fetch ( ` https://jsonplaceholder.typicode.com/users/ ${ id } ` , { method : \"DELETE\" } ) ; this . employees = this . employees . filter ( employee => employee . id !== id ) ; } catch ( error ) { console . error ( error ) ; } } Okay, all API calls should be working properly, and we're getting data from JSON Placeholder instead of our own, static data.  And the app is complete! You can check out the live demo or view the source ."
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-24",
                "heading": "Lifecycle methods",
                "text": "With GET, we'll want to remove all the pre-populated data we have in the employees array, and replace it with the data from the API. We'll call that GET in the mounted lifecycle method . mounted tells our component to perform the action once the component is actually inserted to the DOM. This is a common way to display data from an API. (Some use the created lifecycle for this task.) App.vue export default { name : 'app' , components : { EmployeeTable , EmployeeForm , } , data ( ) { return { employees : [ ] , } } , mounted ( ) { this . getEmployees ( ) } , } So now we can update all our CRUD methods with their asynchronous API-call equivalents."
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-25",
                "heading": "GET",
                "text": "Retrieve a resource. App.vue async getEmployees ( ) { try { const response = await fetch ( 'https://jsonplaceholder.typicode.com/users' ) const data = await response . json ( ) this . employees = data } catch ( error ) { console . error ( error ) } }"
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-26",
                "heading": "POST",
                "text": "Create a new resource (non-idempotent). App.vue async addEmployee ( employee ) { try { const response = await fetch ( 'https://jsonplaceholder.typicode.com/users' , { method : 'POST' , body : JSON . stringify ( employee ) , headers : { 'Content-type' : 'application/json; charset=UTF-8' } , } ) const data = await response . json ( ) this . employees = [ ... this . employees , data ] } catch ( error ) { console . error ( error ) } }"
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-27",
                "heading": "PUT",
                "text": "Update an exiting resource (idempotent). App.vue async editEmployee ( id , updatedEmployee ) { try { const response = await fetch ( ` https://jsonplaceholder.typicode.com/users/ ${ id } ` , { method : 'PUT' , body : JSON . stringify ( updatedEmployee ) , headers : { 'Content-type' : 'application/json; charset=UTF-8' } , } ) const data = await response . json ( ) this . employees = this . employees . map ( employee => ( employee . id === id ? data : employee ) ) } catch ( error ) { console . error ( error ) } }"
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-28",
                "heading": "DELETE",
                "text": "Remove an existing resource. App.vue async deleteEmployee ( id ) { try { await fetch ( ` https://jsonplaceholder.typicode.com/users/ ${ id } ` , { method : \"DELETE\" } ) ; this . employees = this . employees . filter ( employee => employee . id !== id ) ; } catch ( error ) { console . error ( error ) ; } } Okay, all API calls should be working properly, and we're getting data from JSON Placeholder instead of our own, static data.  And the app is complete! You can check out the live demo or view the source ."
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-29",
                "heading": "Deploying a Build to GitHub Pages",
                "text": "You might want to deploy your newly completed app to GitHub pages, a static site host. Assuming you've already created a repository and committed to master, using the steps below... git remote add origin https://github.com/username/vue-app git add . git commit -m \"initial commit\" git push -u origin master You can commit the build with the following steps: Create a gh-pages branch. git checkout -b gh-pages Remove the dist directory from .gitignore . Create vue.config.js and add the publicPath of your GitHub vue.config.js module . exports = { publicPath : 'vue-app' , } Create a build, which will output the dist folder. npm run build # or yarn build Add the build, commit, and send it to gh-pages on GitHub. git add dist git commit -m \"gh-pages commit\" git subtree push --prefix dist origin gh-pages And within a minute or two, it should be all hosted!"
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-30",
                "heading": "Conclusion",
                "text": "Wow, that was a lot. We learned what Vue is, how to set up a Vue project via static HTML or Vue Cli, and how to make a complete CRUD app in Vue. We learned about Vue components, data, methods, computed methods, lifecycles, conditionals, events, form handling, and building. If you went through and did this whole tutorial, you should feel pretty good starting to build your own apps from scratch in Vue. From here, you might want to look into Vuex for state management (similar to React's Redux), and Vue Router for front-end routing (similar to React Router DOM). The great part about the Vue environment is that it's batteries optional, but official batteries also included should you need it. A lot of work went into creating this app and tutorial, and if you enjoyed it I hope you share it with anyone you think might benefit from it! If you see any mistakes, please let me know. View Source View Demo"
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-31",
                "heading": "About me",
                "text": "Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts."
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-32",
                "heading": "Post Details",
                "text": "Published: May 16, 2019 Category: Technical"
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-33",
                "heading": "Tags",
                "text": "javascript vue tutorial frameworks Newsletter Subscribe to the Newsletter"
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-34",
                "heading": "Newsletter",
                "text": "Subscribe to the Newsletter"
            },
            {
                "chunk_id": "28381ee30f574b9d51e4d30cb08ea415-chunk-35",
                "heading": "Comments",
                "text": ""
            }
        ]
    },
    {
        "id": "90e33e51e8a4c788b1b155598f5ae8cb",
        "url": "https://www.taniarascia.com/projects",
        "title": "Projects | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "90e33e51e8a4c788b1b155598f5ae8cb-chunk-1",
                "heading": "Projects",
                "text": "Open-source projects I've made over the years, including this website, an emulator, and various games, apps, frameworks, and boilerplates."
            }
        ]
    },
    {
        "id": "d3ab291f3463965d7d8233f27032ca50",
        "url": "https://www.taniarascia.com/notes",
        "title": "Notes | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "d3ab291f3463965d7d8233f27032ca50-chunk-1",
                "heading": "2022",
                "text": "The Lore of Animorphs (an Ode) Dec 29 Tending to My Digital Garden Dec 01 Memories of Josh Aug 02 Redesign: Version 6.0 Jul 03 Building a Musical Instrument with the Web Audio API and Svelte May 01 2021 into 2022 Jan 01"
            },
            {
                "chunk_id": "d3ab291f3463965d7d8233f27032ca50-chunk-2",
                "heading": "2017",
                "text": "2017 into 2018 Dec 27 Backpacking in Europe: Planning and Packing Jul 11 How I Made a Career Change into Web Development Jul 06 Web Developers and Bloggers I Follow (2017) Jun 30 The Beginning of the Next Phase Jun 27 Website Redesign: Version 2.0 (863 Commits Later) Jun 10 The Three Types of Can't May 25 2016 into 2017 Jan 03"
            }
        ]
    },
    {
        "id": "eafb10ad26c00ed489c4e81e12b50eaf",
        "url": "https://www.taniarascia.com/animorphs/",
        "title": "The Lore of Animorphs (an Ode) | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "eafb10ad26c00ed489c4e81e12b50eaf-chunk-1",
                "heading": "Conclusion",
                "text": "I really don't know if I'd recommend an adult to read Animorphs. Most of these books I read when I was 7-10 years old, and while the themes are very adult, the prose is very simple and full of onomatopoeia, and the books are full of dated '90s references, and there are a lot of them. As an adult, it's much harder to read between the lines and use your imagination to fill in all the blanks. I don't tend to have a very good memory for the details of most books after reading them, but Animorphs has stayed with me through the years. I'm sad that the TV show was so bad, and I have little hope for any good adaptation, but I find the world created around Animorphs to be fascinating, as well as the feelings that come along with all these stories. I wrote this article to share the backstory of this world with an audience who I don't expect to ever read the books. And there will always be a soft spot in my soul for a blue alien who falls in love with a human."
            }
        ]
    },
    {
        "id": "28803b24bcce021bea2883712b9c2ef6",
        "url": "https://www.taniarascia.com/everything-i-know-as-a-software-developer-without-a-degree/",
        "title": "Everything I Know as a Software Developer Without a Degree (2019) | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "28803b24bcce021bea2883712b9c2ef6-chunk-1",
                "heading": "Pre-Knowledge (1998 - 2014)",
                "text": "I made my first websites in the late nineties by viewing the source of sites I landed on in Netscape Navigator (a browser), copying the HTML into Notepad (a text editor), and uploading the pages to Geocities (a web host). HTML, text editors, and hosting most likely seem like second nature to many of us, but like everything else related to computers, it's not inherent knowledge, and it's a hurdle to get through as a beginner. I just happened to do it early enough that I wasn't even aware I was learning. Here's what I learned in that period, although since I learned by doing, I didn't know the proper terms for many things: An idea of what HTML (Hypertext Markup Language) is - the very first step to doing anything related to web development. How to view the HTML source of a web browser (Netscape Navigator, and later Internet Explorer). How to create and edit an HTML file with a text editor (Notepad) and save it locally on my file system (Windows as my OS). Basic HTML tags/elements - text, headings, lists, tables, links, images, formatting (also blinking text). How to make colors with hex codes . How to use FTP (File Transfer Protocol) to upload files from my computer to a web host on the internet to make my website publicly accessible. A few years later, CSS became popular, and I spent the next several years copying the CSS of sites I liked to make designs. CSS was revolutionary because you could do things like change all the colors of your links in one spot instead of all over your pages, having different sets of link colors, and so on. How to use CSS (Cascading Style Sheets) to design the layout, font, spacing, and colors of a website. How to bring CSS (Cascading Style Sheets) files into an HTML file. How to create layouts with floats instead of tables. Although I had been making websites for years, I'd never read a tutorial, article, or watched a video about web design/development. So although I was oddly competent at making a website intuitively from all the sites I downloaded and played around with, I didn't actually know many basic concepts like how CSS selector specificity worked, or ids vs. classes, how to use pseudo selectors, and I would often end up brute forcing solutions for things like positioning and the box model. This is generally the extent of everything I knew about web development before I decided to make a career out of it: basic HTML, basic CSS, basic managed hosting, and transferring files via FTP - everything I knew was static development, and I had absolutely no concept of programming. For anything that might be more advanced or dynamic - counters, guestbooks, blogs, forums - I used a third-party resource."
            },
            {
                "chunk_id": "28803b24bcce021bea2883712b9c2ef6-chunk-2",
                "heading": "Job 1: Junior Web Developer - WordPress (2015-2017)",
                "text": "11% salary increase from experienced chef to entry level junior WordPress developer It's great that I learned all that, because for my first real job in the industry, I was going to use practically none of it. No Git, no Node, no Sass, no Grunt nor Gulp, no command line, no Bootstrap. Just cold, hard WordPress. Nonetheless, this was going to present a whole new group of challenges to overcome and things to learn. A few months into my internship, I applied for a job at a different company as a junior web developer/designer. I'd spend the next two years (exactly two years, to the day!) making websites with Teo . How to set up a LAMP environment - I had hosting, but I never used PHP and it never occurred to me that a host was any different than my local HTML setup. I learned how to set up a local environment for Linux (or Mac, or Windows), Apache (the server), MySQL (the database), and PHP - a full \"stack\". How to set up Apache and virtual hosts - I learned how to configure the Apache server to be able to run many virtual hosts at the same time. How to set up cron jobs in Linux. The basics of PHP and PHP tags - \"PHP: HyperText Preprocessor\", as is what PHP stands for, is the most popular programming language on the web and the language most web developers start off with. I learned that if I started some code with <?php and ended it with ?> , everything inside would be PHP, and everything outside of that would be rendered as regular HTML. For the longest time, I wanted to know how to make my OWN blog - not rely on Blogger, or WordPress(.com) hosting, but something I hosted myself with my own design - not someone else's theme. But how? I didn't know how and it was immensely frustrating. I struggled a lot, and when I finally figured out how to use WordPress(.org)'s platform to create my own unique blog, I wrote an article to share with the world what I learned. How to develop a WordPress theme from scratch - this is the article that enabled me to begin this blog, and to start my first job in web development. I began by learning how to make posts, pages, a front page, header, footer, and navigation and put it into a unique, custom layout. WordPress pagination, comments, functions, & custom posts - I began taking my WordPress development to an intermediate level. WordPress custom fields - The final step to learning how to turn WordPress into a true CMS (Content Management System). How to use JSON with PHP and/or JavaScript - I learned how to utilize data stored in JSON format (JavaScript Object Notation) in my PHP or JavaScript code. Ajax How to use Google Maps API - my first foray into learning what an API (Application Program Interface) key is and how to use one. How to set up a website with TLS (Transport Layer Security)/SSL (Secure Sockets Layer) - to get a HTTP secure (https) URL. At some point, I was given the responsibility of learning how to use AWS (Amazon Web Services) to set up Linux servers and migrate our websites over. How to use AWS and the AWS ecosystem - I learned so much about DevOps and AWS in this period - setting up a VPC (virtual private cloud), an EC2 instance (a virtual server in the cloud), S3 (object storage buckets for static files), setting up a LAMP server from scratch, migrating websites and configuring DNS (Domain Name Service), generating public/private keys, and much more. How to set up virtual machines , using Vagrant and VirtualBox How to set up an SSG (Static Site Generator) using Jekyll - I started exploring other methods of setting up things like a blog, and learned how to make a Jekyll blog and host it on GitHub. How to use PDO to connect to MySQL and create a CRUD app: Creating, reading , updating and deleting - Soon, I got tired of relying on WordPress to do anything dynamic with a website. Since I already knew some PHP from WordPress, I looked into learning how to build my own dynamic site that could connect to a database. Accessibility - I learned much about making a website accessible for people with disabilities, from having appropriate contrast, to making websites accessible only by keyboard, to captioning audio, and much more, following WCAG 2.0 standards. While working as a WordPress developer, I also made all my own custom designs for the sites I created. To speed up this process, I created Primitive (source) , a minimal CSS framework and website boilerplate that made it quick and easy for me to make unique, custom designs. The framework is built in Sass. With Primitive, I could create the majority of a site's CSS in a few hours. I built many sites with Primitive - Cafe Ba Ba Reeba , Shaw's Crabhouse , Tokio Pub , Krispy Kreme Pacific Northwest , this blog, and more. I created New Moon , the best code theme for web development, and distrubuted it to Visual Studio Code , Brackets , Sublime Text , Chrome DevTools , learning how to create extensions for each of those environments."
            },
            {
                "chunk_id": "28803b24bcce021bea2883712b9c2ef6-chunk-3",
                "heading": "Side project: New Moon",
                "text": "I created New Moon , the best code theme for web development, and distrubuted it to Visual Studio Code , Brackets , Sublime Text , Chrome DevTools , learning how to create extensions for each of those environments."
            },
            {
                "chunk_id": "28803b24bcce021bea2883712b9c2ef6-chunk-4",
                "heading": "Job 2: Back End PHP Developer (2018)",
                "text": "28% salary increase from previous starting salary After I got back from traveling, I started looking for another job. I knew I never wanted to work in WordPress again, and I didn't necessarily want to learn another programming language and its environment to find a job right away. I also thought PHP was fun, so I wanted to find a job where I could use PHP, but not WordPress. How to write a memory game in JavaScript - For one job interview for becoming a PHP developer, I made a memory game in JavaScript, putting together much of what I learned about the DOM and data types to actually build things without any libraries or frameworks or tutorials. How to write unit tests and set up automated testing - I had never had a job that knew the concept of testing, and my next job would be no exception, but I did learn some concepts of testing , what unit, integration, and end-to-end tests mean and how to set them up. How to connect to a REST API with JavaScript - I began to learn what REST (Representational State Transfer) was, and how REST HTTP methods could be comparable with CRUD. JavaScript local storage and session storage How to work with files and file uploads - I worked a lot with modifying and saving files to a file system through JavaScript and PHP, something that was intensely mysterious to me previously. How to work with SVGs, polygons and paths - I worked a lot with maps of concert halls and arenas at this job, and learned how to create and work with SVGs, polygons and paths. How to use SQL (Structured Query Language) commands - my job involved a lot of raw SQL queries, and I learned all about creating, inserting, updating, deleting, altering, constraining, and joining tables with SQL. I also learned all sorts of conditionals that can be applied to queries, grouping, ordering, limiting, and offsetting. How to create and use Bash scripts CSS shapes During this time, I wrote Laconia , a modern MVC (Model View Controller) application written in plain PHP without libraries or frameworks. I wanted to learn how to create something with MVC architecture, and I didn't want to rely on a framework to do it. I wanted it to be secure, and I wanted it to have users. I aimed to and succeeded in learning the basics of: Authentication - logging in, logging out, resetting a password, having private content/dashboard hidden from anonymous users Security and validation - encrypted passwords and hashing, parameter binding with SQL, making sure users cannot be overridden, making sure no spam or empty content can go through, making sure passwords and usernames have the proper characters Routing - Redirecting to URLs based on incoming request method and URI path, creating public user profiles in the root directory, creating dynamic pages based on GET requests Object oriented programming - I had never used a class in a working application before writing this app, so I learned a lot about constructors, inheritance, and abstract classes Composer - I had no prior experience using Composer, so I wanted to find out why it was the standard in modern PHP development. I used it for autoloading classes and configuration. Database schema - how to structure a database to relate information easily between the tables, i.e. linking lists and list items, users and user comments, etc. Sessions and Users - how to easily deal with sessions, users, and authentication."
            },
            {
                "chunk_id": "28803b24bcce021bea2883712b9c2ef6-chunk-5",
                "heading": "Side project: Laconia MVC Framework",
                "text": "During this time, I wrote Laconia , a modern MVC (Model View Controller) application written in plain PHP without libraries or frameworks. I wanted to learn how to create something with MVC architecture, and I didn't want to rely on a framework to do it. I wanted it to be secure, and I wanted it to have users. I aimed to and succeeded in learning the basics of: Authentication - logging in, logging out, resetting a password, having private content/dashboard hidden from anonymous users Security and validation - encrypted passwords and hashing, parameter binding with SQL, making sure users cannot be overridden, making sure no spam or empty content can go through, making sure passwords and usernames have the proper characters Routing - Redirecting to URLs based on incoming request method and URI path, creating public user profiles in the root directory, creating dynamic pages based on GET requests Object oriented programming - I had never used a class in a working application before writing this app, so I learned a lot about constructors, inheritance, and abstract classes Composer - I had no prior experience using Composer, so I wanted to find out why it was the standard in modern PHP development. I used it for autoloading classes and configuration. Database schema - how to structure a database to relate information easily between the tables, i.e. linking lists and list items, users and user comments, etc. Sessions and Users - how to easily deal with sessions, users, and authentication."
            },
            {
                "chunk_id": "28803b24bcce021bea2883712b9c2ef6-chunk-6",
                "heading": "Job 3: Front End Software Engineer (2018-2019)",
                "text": "17% salary increase Eventually, I wanted to do anything else besides PHP or jQuery. JavaScript seemed like a good choice due to all the JavaScript I had been teaching myself on my own, so I ended up getting a position as a front end software engineer writing applications in React. I also didn't know React when I got the position, but I learned quickly. ES6+ - The syntax of ECMAScript 2015/ES6+, the new additions to JavaScript made over the last few years. How to use React - I was very opposed to learning React, Vue, Angular, or any other JavaScript framework/library until I felt like I could do what those things accomplish in vanilla JavaScript first. (The same policy is why I created Laconia instead of learning Laravel.) I struggled to understand React for quite a bit, and once I got it I wrote this article, which is awesomely included in the official docs! How to use React Hooks , and other React components , and React Router. How to use the Semantic UI React library to quickly and efficiently make prototype applications. A deeper understanding of REST and REST APIs - I really began to understand how resources should be structured. How to make a server in Node.js , using the HTTP module or Express . How to connect to a MySQL database from Node.js and make API calls. How to use PostgreSQL . The concept of asynchronous programming , and how to use callbacks, promises , and async/await. How to write scripts in Node.js - I wrote a script that would generate JSON from a Google Sheets/Excel CSV that could be utilized throughout an application. How to set up a project with Webpack with hot reloading How to use Git to work with a team - merging, rebasing, fixing merge conflicts, stashing, and working with feature branches . Error handling . My project of 2019 has been creating a Chip-8 emulator in Node.js from scratch, thanks to Vanya Sergeev. I've learned many lower-level programming concepts, such as: The concept of binary, decimal, and hexadecimal base systems how they interact with each other and the concept of abstract numbers in programming. Bits, nibbles, bytes, ASCII encoding , and big and little endian values. Bitwise operators - AND ( & ), OR ( | ), XOR ( ^ ), left shift ( << ), right shift ( >> ) and how to use them for masking, setting, and testing values. Using the Node built-in file system ( fs ). The concept of a raw data buffer and how to work with it, how to convert an 8-bit buffer to a 16-bit big endian array. How to write and understand an 8-bit and 16-bit hex dump. How to disassemble and decode an opcode into instructions a CPU can use. How a CPU can utilize memory, stack, program counters, stack pointers, memory addresses, and registers . How a CPU implements*- fetch, decode, and execute**. The importance of unit testing ."
            },
            {
                "chunk_id": "28803b24bcce021bea2883712b9c2ef6-chunk-7",
                "heading": "Conclusion",
                "text": "Carl Sagan once said, \"if you wish to make an apple pie from scratch, you must first invent the universe\" . That is how I felt writing this article. I tried to compile everything I know, but each new thing involved some previous knowledge, and that required previous knowledge, and at what point do I stop? I'm missing plenty, I glossed over more, but in the past five years or so, I've tried to compile and write about everything that has tripped me up along the way. I hope something I've written has helped you in your own journey, and will continue to do so in the future. I've written 123 articles about web development between my own website, DigitalOcean, SitePoint, Codrops, Envato Tuts+, and Progress."
            }
        ]
    },
    {
        "id": "8a11b149b23536f33fdce650716aba32",
        "url": "https://www.taniarascia.com/me",
        "title": "About Me | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "8a11b149b23536f33fdce650716aba32-chunk-1",
                "heading": "Publications",
                "text": "Understanding the GraphQL Type System DigitalOcean, 2023 How To Set Up a GraphQL API Server in Node.js DigitalOcean, 2022 An Introduction to GraphQL DigitalOcean, 2021 How to Code in JavaScript (Tutorial Series, 32 articles) DigitalOcean, 2017 - 2020 Understanding the DOM — Document Object Model (Tutorial Series, 8 articles) DigitalOcean, 2017 - 2018 Setting up a RESTful API with Node.js and PostgreSQL LogRocket, 2018 An Introduction to CSS Shapes Tympanus Codrops, 2018 ES6 Syntax, Features and Additions: A Reference Guide Progress Telerik, 2018 REST API Tutorial (1): Understanding REST APIs Envato Tuts+, 2018 REST API Tutorial (2): Set Up a Node/Express Server Envato Tuts+, 2018 REST API Tutorial (3): Connect to a Postgres Database Envato Tuts+, 2018 A Beginner’s Guide to JavaScript Variables and Datatypes SitePoint, 2017 JavaScript Operators, Conditionals & Functions SitePoint, 2017"
            },
            {
                "chunk_id": "8a11b149b23536f33fdce650716aba32-chunk-2",
                "heading": "Interviews & Podcasts",
                "text": "How to Organize your React App React Round Up, Jack Herrington, Paige Niedringhaus, TJ VanToll Switching Careers and Learning in Public Egghead.io Podcast, Joel Hooks Web Developer: Tania Rascia You are techY Podcast, Ellen Twomey Interview Hashnode Townhall, Bolaji Ayodeji"
            }
        ]
    },
    {
        "id": "d39d43d4c43c24ae23132c0e4bb6fce5",
        "url": "https://www.taniarascia.com/react-architecture-directory-structure/",
        "title": "How to Structure and Organize a React Application | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "d39d43d4c43c24ae23132c0e4bb6fce5-chunk-1",
                "heading": "How to Structure and Organize a React Application",
                "text": ""
            },
            {
                "chunk_id": "d39d43d4c43c24ae23132c0e4bb6fce5-chunk-2",
                "heading": "Directory Structure",
                "text": "The top level directory structure will be as follows: assets - global static assets such as images, svgs, company logo, etc. components - global shared/reusable components, such as layout (wrappers, navigation), form components, buttons services - JavaScript modules store - Global Redux store utils - Utilities, helpers, constants, and the like views - Can also be called \"pages\", the majority of the app would be contained here I like keeping familiar conventions wherever possible, so src contains everything, index.js is the entry point, and App.js sets up the auth and routing. .\n└── /src\n    ├── /assets\n    ├── /components\n    ├── /services\n    ├── /store\n    ├── /utils\n    ├── /views\n    ├── index.js\n    └── App.js I can see some additional folders you might have, such as types if it's a TypeScript project, middleware if necessary, maybe context for Context , etc. I would set up the system to use aliases, so anything within the components folder could be imported as @components , assets as @assets , etc. If you have a custom Webpack, this is done through the resolve configuration. module . exports = { resolve : { extensions : [ 'js' , 'ts' ] , alias : { '@' : path . resolve ( __dirname , 'src' ) , '@assets' : path . resolve ( __dirname , 'src/assets' ) , '@components' : path . resolve ( __dirname , 'src/components' ) , // ...etc } , } , } It just makes it a lot easier to import from anywhere within the project and move files around without changing imports, and you never end up with something like ../../../../../components/ . Within the components folder, I would group by type - forms , tables , buttons , layout , etc. The specifics will vary by your specific app. In this example, I'm assuming you're either creating your own form system, or creating your own bindings to an existing form system (for example, combining Formik and Material UI). In this case, you'd create a folder for each component ( TextField , Select , Radio , Dropdown , etc.), and inside would be a file for the component itself, the styles, the tests, and the Storybook if it's being used. Component.js - The actual React component Component.styles.js - The Styled Components file for the component Component.test.js - The tests Component.stories.js - The Storybook file To me, this makes a lot more sense than having one folder that contains the files for ALL components, one folder that contains all the tests, and one folder that contains all the Storybook files, etc. Everything related is grouped together and easy to find. .\n└── /src\n    └── /components\n        ├── /forms\n        │   ├── /TextField\n        │   │   ├── TextField.js\n        │   │   ├── TextField.styles.js\n        │   │   ├── TextField.test.js\n        │   │   └── TextField.stories.js\n        │   ├── /Select\n        │   │   ├── Select.js\n        │   │   ├── Select.styles.js\n        │   │   ├── Select.test.js\n        │   │   └── Select.stories.js\n        │   └── index.js\n        ├── /routing\n        │   └── /PrivateRoute\n        │       ├── /PrivateRoute.js\n        │       └── /PrivateRoute.test.js\n        └── /layout\n            └── /navigation\n                └── /NavBar\n                    ├── NavBar.js\n                    ├── NavBar.styles.js\n                    ├── NavBar.test.js\n                    └── NavBar.stories.js You'll notice there's an index.js file in the components/forms directory. It is often rightfully suggested to avoid using index.js files as they're not explicit, but in this case it makes sense - it will end up being an index of all the forms and look something like this: src/components/forms/index.js import { TextField } from './TextField/TextField' import { Select } from './Select/Select' import { Radio } from './Radio/Radio' export { TextField , Select , Radio } Then when you need to use one or more of the components, you can easily import them all at once. import { TextField , Select , Radio } from '@components/forms' I would recommend this approach more than making an index.js inside of every folder within forms , so now you just have one index.js that actually indexes the entire directory, as opposed to ten index.js files just to make imports easier for each individual file. The services directory is less essential than components , but if you're making a plain JavaScript module that the rest of the application is using, it can be handy. A common contrived example is a LocalStorage module, which might look like this: .\n└── /src\n    └── /services\n        ├── /LocalStorage\n        │   ├── LocalStorage.service.js\n        │   └── LocalStorage.test.js\n        └── index.js An example of the service: src/services/LocalStorage/LocalStorage.service.js export const LocalStorage = { get ( key ) { } , set ( key , value ) { } , remove ( key ) { } , clear ( ) { } , } import { LocalStorage } from '@services' LocalStorage . get ( 'foo' ) The global data store will be contained in the store directory - in this case, Redux. Each feature will have a folder, which will contain the Redux Toolkit slice, as well as actions and tests. This setup can also be used with regular Redux, you would just create a .reducers.js file and .actions.js file instead of a slice . If you're using sagas, it could be .saga.js instead of .actions.js for Redux Thunk actions. .\n└── /src\n    ├── /store\n    │   ├── /authentication\n    │   │   ├── /authentication.slice.js\n    │   │   ├── /authentication.actions.js\n    │   │   └── /authentication.test.js\n    │   ├── /authors\n    │   │   ├── /authors.slice.js\n    │   │   ├── /authors.actions.js\n    │   │   └── /authors.test.js\n    │   └── /books\n    │       ├── /books.slice.js\n    │       ├── /books.actions.js\n    │       └── /books.test.js\n    ├── rootReducer.js\n    └── index.js You can also add something like a ui section of the store to handle modals, toasts, sidebar toggling, and other global UI state, which I find better than having const [isOpen, setIsOpen] = useState(false) all over the place. In the rootReducer you would import all your slices and combine them with combineReducers , and in index.js you would configure the store. Whether or not your project needs a utils folder is up to you, but I think there are usually some global utility functions, like validation and conversion, that could easily be used across multiple sections of the app. If you keep it organized - not just having one helpers.js file that contains thousands of functions - it could be a helpful addition to the organization of your project. .\n└── src\n    └── /utils\n        ├── /constants\n        │   └── countries.constants.js\n        └── /helpers\n            ├── validation.helpers.js\n            ├── currency.helpers.js\n            └── array.helpers.js Again, the utils folder can contain anything you want that you think makes sense to keep on a global level. If you don't prefer the \"multi-tier\" filenames, you could just call it validation.js , but the way I see it, being explicit does not take anything away from the project, and makes it easier to navigate filenames when searching in your IDE. Here's where the main part of your app will live: in the views directory. Any page in your app is a \"view\". In this small example, the views line up pretty well with the Redux store, but it won't necessarily be the case that the store and views are exactly the same, which is why they're separate. Also, books might pull from authors , and so on. Anything within a view is an item that will likely only be used within that specific view - a BookForm that will only be used at the /books route, and an AuthorBlurb that will only be used on the /authors route. It might include specific forms, modals, buttons, any component that won't be global. The advantage of keeping everything domain-focused instead of putting all your pages together in components/pages is that it makes it really easy to look at the structure of the application and know how many top level views there are, and know where everything that's only used by that view is. If there are nested routes, you can always add a nested views folder within the main route. .\n└── /src\n    └── /views\n        ├── /Authors\n        │   ├── /AuthorsPage\n        │   │   ├── AuthorsPage.js\n        │   │   └── AuthorsPage.test.js\n        │   └── /AuthorBlurb\n        │       ├── /AuthorBlurb.js\n        │       └── /AuthorBlurb.test.js\n        ├── /Books\n        │   ├── /BooksPage\n        │   │   ├── BooksPage.js\n        │   │   └── BooksPage.test.js\n        │   └── /BookForm\n        │       ├── /BookForm.js\n        │       └── /BookForm.test.js\n        └── /Login\n            ├── LoginPage\n            │   ├── LoginPage.styles.js\n            │   ├── LoginPage.js\n            │   └── LoginPage.test.js\n            └── LoginForm\n                ├── LoginForm.js\n                └── LoginForm.test.js"
            },
            {
                "chunk_id": "d39d43d4c43c24ae23132c0e4bb6fce5-chunk-3",
                "heading": "Aliases",
                "text": "I would set up the system to use aliases, so anything within the components folder could be imported as @components , assets as @assets , etc. If you have a custom Webpack, this is done through the resolve configuration. module . exports = { resolve : { extensions : [ 'js' , 'ts' ] , alias : { '@' : path . resolve ( __dirname , 'src' ) , '@assets' : path . resolve ( __dirname , 'src/assets' ) , '@components' : path . resolve ( __dirname , 'src/components' ) , // ...etc } , } , } It just makes it a lot easier to import from anywhere within the project and move files around without changing imports, and you never end up with something like ../../../../../components/ ."
            },
            {
                "chunk_id": "d39d43d4c43c24ae23132c0e4bb6fce5-chunk-4",
                "heading": "Components",
                "text": "Within the components folder, I would group by type - forms , tables , buttons , layout , etc. The specifics will vary by your specific app. In this example, I'm assuming you're either creating your own form system, or creating your own bindings to an existing form system (for example, combining Formik and Material UI). In this case, you'd create a folder for each component ( TextField , Select , Radio , Dropdown , etc.), and inside would be a file for the component itself, the styles, the tests, and the Storybook if it's being used. Component.js - The actual React component Component.styles.js - The Styled Components file for the component Component.test.js - The tests Component.stories.js - The Storybook file To me, this makes a lot more sense than having one folder that contains the files for ALL components, one folder that contains all the tests, and one folder that contains all the Storybook files, etc. Everything related is grouped together and easy to find. .\n└── /src\n    └── /components\n        ├── /forms\n        │   ├── /TextField\n        │   │   ├── TextField.js\n        │   │   ├── TextField.styles.js\n        │   │   ├── TextField.test.js\n        │   │   └── TextField.stories.js\n        │   ├── /Select\n        │   │   ├── Select.js\n        │   │   ├── Select.styles.js\n        │   │   ├── Select.test.js\n        │   │   └── Select.stories.js\n        │   └── index.js\n        ├── /routing\n        │   └── /PrivateRoute\n        │       ├── /PrivateRoute.js\n        │       └── /PrivateRoute.test.js\n        └── /layout\n            └── /navigation\n                └── /NavBar\n                    ├── NavBar.js\n                    ├── NavBar.styles.js\n                    ├── NavBar.test.js\n                    └── NavBar.stories.js You'll notice there's an index.js file in the components/forms directory. It is often rightfully suggested to avoid using index.js files as they're not explicit, but in this case it makes sense - it will end up being an index of all the forms and look something like this: src/components/forms/index.js import { TextField } from './TextField/TextField' import { Select } from './Select/Select' import { Radio } from './Radio/Radio' export { TextField , Select , Radio } Then when you need to use one or more of the components, you can easily import them all at once. import { TextField , Select , Radio } from '@components/forms' I would recommend this approach more than making an index.js inside of every folder within forms , so now you just have one index.js that actually indexes the entire directory, as opposed to ten index.js files just to make imports easier for each individual file."
            },
            {
                "chunk_id": "d39d43d4c43c24ae23132c0e4bb6fce5-chunk-5",
                "heading": "Services",
                "text": "The services directory is less essential than components , but if you're making a plain JavaScript module that the rest of the application is using, it can be handy. A common contrived example is a LocalStorage module, which might look like this: .\n└── /src\n    └── /services\n        ├── /LocalStorage\n        │   ├── LocalStorage.service.js\n        │   └── LocalStorage.test.js\n        └── index.js An example of the service: src/services/LocalStorage/LocalStorage.service.js export const LocalStorage = { get ( key ) { } , set ( key , value ) { } , remove ( key ) { } , clear ( ) { } , } import { LocalStorage } from '@services' LocalStorage . get ( 'foo' )"
            },
            {
                "chunk_id": "d39d43d4c43c24ae23132c0e4bb6fce5-chunk-6",
                "heading": "Store",
                "text": "The global data store will be contained in the store directory - in this case, Redux. Each feature will have a folder, which will contain the Redux Toolkit slice, as well as actions and tests. This setup can also be used with regular Redux, you would just create a .reducers.js file and .actions.js file instead of a slice . If you're using sagas, it could be .saga.js instead of .actions.js for Redux Thunk actions. .\n└── /src\n    ├── /store\n    │   ├── /authentication\n    │   │   ├── /authentication.slice.js\n    │   │   ├── /authentication.actions.js\n    │   │   └── /authentication.test.js\n    │   ├── /authors\n    │   │   ├── /authors.slice.js\n    │   │   ├── /authors.actions.js\n    │   │   └── /authors.test.js\n    │   └── /books\n    │       ├── /books.slice.js\n    │       ├── /books.actions.js\n    │       └── /books.test.js\n    ├── rootReducer.js\n    └── index.js You can also add something like a ui section of the store to handle modals, toasts, sidebar toggling, and other global UI state, which I find better than having const [isOpen, setIsOpen] = useState(false) all over the place. In the rootReducer you would import all your slices and combine them with combineReducers , and in index.js you would configure the store."
            },
            {
                "chunk_id": "d39d43d4c43c24ae23132c0e4bb6fce5-chunk-7",
                "heading": "Utils",
                "text": "Whether or not your project needs a utils folder is up to you, but I think there are usually some global utility functions, like validation and conversion, that could easily be used across multiple sections of the app. If you keep it organized - not just having one helpers.js file that contains thousands of functions - it could be a helpful addition to the organization of your project. .\n└── src\n    └── /utils\n        ├── /constants\n        │   └── countries.constants.js\n        └── /helpers\n            ├── validation.helpers.js\n            ├── currency.helpers.js\n            └── array.helpers.js Again, the utils folder can contain anything you want that you think makes sense to keep on a global level. If you don't prefer the \"multi-tier\" filenames, you could just call it validation.js , but the way I see it, being explicit does not take anything away from the project, and makes it easier to navigate filenames when searching in your IDE."
            },
            {
                "chunk_id": "d39d43d4c43c24ae23132c0e4bb6fce5-chunk-8",
                "heading": "Views",
                "text": "Here's where the main part of your app will live: in the views directory. Any page in your app is a \"view\". In this small example, the views line up pretty well with the Redux store, but it won't necessarily be the case that the store and views are exactly the same, which is why they're separate. Also, books might pull from authors , and so on. Anything within a view is an item that will likely only be used within that specific view - a BookForm that will only be used at the /books route, and an AuthorBlurb that will only be used on the /authors route. It might include specific forms, modals, buttons, any component that won't be global. The advantage of keeping everything domain-focused instead of putting all your pages together in components/pages is that it makes it really easy to look at the structure of the application and know how many top level views there are, and know where everything that's only used by that view is. If there are nested routes, you can always add a nested views folder within the main route. .\n└── /src\n    └── /views\n        ├── /Authors\n        │   ├── /AuthorsPage\n        │   │   ├── AuthorsPage.js\n        │   │   └── AuthorsPage.test.js\n        │   └── /AuthorBlurb\n        │       ├── /AuthorBlurb.js\n        │       └── /AuthorBlurb.test.js\n        ├── /Books\n        │   ├── /BooksPage\n        │   │   ├── BooksPage.js\n        │   │   └── BooksPage.test.js\n        │   └── /BookForm\n        │       ├── /BookForm.js\n        │       └── /BookForm.test.js\n        └── /Login\n            ├── LoginPage\n            │   ├── LoginPage.styles.js\n            │   ├── LoginPage.js\n            │   └── LoginPage.test.js\n            └── LoginForm\n                ├── LoginForm.js\n                └── LoginForm.test.js"
            },
            {
                "chunk_id": "d39d43d4c43c24ae23132c0e4bb6fce5-chunk-9",
                "heading": "Conclusion",
                "text": "This is my proposal for a sytem for React organization that scales well for a large production app, and handles testing and styling as well as keeping everything together in a feature focused way. It's more nested than the traditional structure of everything being in components and containers , but that system is a bit more dated due to Redux being much easier to implement with Hooks, and \"smart\" containers and \"dumb\" components no longer being necessary. It's easy to look at this system and understand everything that is needed for your app and where to go to work on a specific section, or a component that affects the app globally. This system may not make sense for every type of app, but it has worked for me. I'd love to hear any comments about ways this system can be improved, or other systems that have merit."
            },
            {
                "chunk_id": "d39d43d4c43c24ae23132c0e4bb6fce5-chunk-10",
                "heading": "About me",
                "text": "Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts."
            },
            {
                "chunk_id": "d39d43d4c43c24ae23132c0e4bb6fce5-chunk-11",
                "heading": "Post Details",
                "text": "Published: June 23, 2021 Category: Technical"
            },
            {
                "chunk_id": "d39d43d4c43c24ae23132c0e4bb6fce5-chunk-12",
                "heading": "Tags",
                "text": "javascript react Newsletter Subscribe to the Newsletter"
            },
            {
                "chunk_id": "d39d43d4c43c24ae23132c0e4bb6fce5-chunk-13",
                "heading": "Newsletter",
                "text": "Subscribe to the Newsletter"
            },
            {
                "chunk_id": "d39d43d4c43c24ae23132c0e4bb6fce5-chunk-14",
                "heading": "Comments",
                "text": ""
            }
        ]
    },
    {
        "id": "d585d4bcf099b640b07644302dda0579",
        "url": "https://www.taniarascia.com/how-to-use-webpack/",
        "title": "How to Set Up webpack 5 From Scratch | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "d585d4bcf099b640b07644302dda0579-chunk-1",
                "heading": "What is webpack?",
                "text": "For the most part, websites are no longer just written in plain HTML with a bit of optional JavaScript - they're often entirely built by JavaScript. So we have to bundle, minify, and transpile the code into something all browsers understand, which is where webpack comes in. webpack is a module bundler. It packs all your code neatly for the browser. It allows you to write the latest JavaScript with Babel or use TypeScript, and compile it into something cross-browser compatible and neatly minified. It also allows you to import static assets into your JavaScript. For development, webpack also supplies a development server that can update modules and styles on the fly when you save. vue create and create-react-app rely on webpack under the hood, but you can easily set up your own webpack config for them. There is much more that webpack can do, but this article will help you get familiar with the concepts and get something set up."
            },
            {
                "chunk_id": "d585d4bcf099b640b07644302dda0579-chunk-2",
                "heading": "Plugins",
                "text": "webpack has a plugin interface that makes it flexible. Internal webpack code and third party extensions use plugins. There are a few main ones almost every webpack project will use. So we have a random bundle file, but it's not very useful to us yet. If we're building a web app, we need an HTML page that will load that JavaScript bundle as a script. Since we want the HTML file to automatically bring in the script, we'll create an HTML template with html-webpack-plugin . html-webpack-plugin - Generates an HTML file from a template Install the plugin. npm i -D html-webpack-plugin Create a template.html file in the src folder. We can include variables other custom information in the template. We'll add a custom title , and otherwise it will look like a regular HTML file with a root div. src/template.html <! DOCTYPE html > < html lang = \" en \" > < head > < title > <%= htmlWebpackPlugin.options.title %> </ title > </ head > < body > < div id = \" root \" > </ div > </ body > </ html > Create a plugins property of your config and you'll add the plugin, filename to output ( index.html ), and link to the template file it will be based on. webpack.config.js const path = require ( 'path' ) const HtmlWebpackPlugin = require ( 'html-webpack-plugin' ) module . exports = { /* ... */ plugins : [ new HtmlWebpackPlugin ( { title : 'webpack Boilerplate' , template : path . resolve ( __dirname , './src/template.html' ) , // template file filename : 'index.html' , // output file } ) , ] , } Now run a build again. You'll see the dist folder now contains an index.html with the bundle loaded in. Success! If you load that file into a browser, you'll see Interesting! in the console. Let's update it to inject some content into the DOM. Change the index.js entry point to this, and run the build command again. src/index.js // Create heading node const heading = document . createElement ( 'h1' ) heading . textContent = 'Interesting!' // Append heading node to the DOM const app = document . querySelector ( '#root' ) app . append ( heading ) Now to test it out you can go to the dist folder and start up a server. (Install http-server globally if necessary.) http-server You'll see our JavaScript injected into the DOM, saying \"Interesting!\". You'll also notice the bundle file is minified. You'll also want to set up clean-webpack-plugin , which clears out anything in the dist folder after each build. This is important to ensure no old data gets left behind. clean-webpack-plugin - Remove/clean build folders webpack.config.js const path = require ( 'path' ) const HtmlWebpackPlugin = require ( 'html-webpack-plugin' ) const { CleanWebpackPlugin } = require ( 'clean-webpack-plugin' ) module . exports = { /* ... */ plugins : [ /* ... */ new CleanWebpackPlugin ( ) , ] , }"
            },
            {
                "chunk_id": "d585d4bcf099b640b07644302dda0579-chunk-3",
                "heading": "HTML template file",
                "text": "So we have a random bundle file, but it's not very useful to us yet. If we're building a web app, we need an HTML page that will load that JavaScript bundle as a script. Since we want the HTML file to automatically bring in the script, we'll create an HTML template with html-webpack-plugin . html-webpack-plugin - Generates an HTML file from a template Install the plugin. npm i -D html-webpack-plugin Create a template.html file in the src folder. We can include variables other custom information in the template. We'll add a custom title , and otherwise it will look like a regular HTML file with a root div. src/template.html <! DOCTYPE html > < html lang = \" en \" > < head > < title > <%= htmlWebpackPlugin.options.title %> </ title > </ head > < body > < div id = \" root \" > </ div > </ body > </ html > Create a plugins property of your config and you'll add the plugin, filename to output ( index.html ), and link to the template file it will be based on. webpack.config.js const path = require ( 'path' ) const HtmlWebpackPlugin = require ( 'html-webpack-plugin' ) module . exports = { /* ... */ plugins : [ new HtmlWebpackPlugin ( { title : 'webpack Boilerplate' , template : path . resolve ( __dirname , './src/template.html' ) , // template file filename : 'index.html' , // output file } ) , ] , } Now run a build again. You'll see the dist folder now contains an index.html with the bundle loaded in. Success! If you load that file into a browser, you'll see Interesting! in the console. Let's update it to inject some content into the DOM. Change the index.js entry point to this, and run the build command again. src/index.js // Create heading node const heading = document . createElement ( 'h1' ) heading . textContent = 'Interesting!' // Append heading node to the DOM const app = document . querySelector ( '#root' ) app . append ( heading ) Now to test it out you can go to the dist folder and start up a server. (Install http-server globally if necessary.) http-server You'll see our JavaScript injected into the DOM, saying \"Interesting!\". You'll also notice the bundle file is minified."
            },
            {
                "chunk_id": "d585d4bcf099b640b07644302dda0579-chunk-4",
                "heading": "Development",
                "text": "Running npm run build every single time you make an update is tedious. The bigger your site gets, the longer it will take to build. You'll want to set up two configurations for webpack: a production config, that minifies, optimizes and removes all source maps a development config, that runs webpack in a server, updates with every change, and has source maps Instead of building to a dist file, the development mode will just run everything in memory. To set up for development, you'll install webpack-dev-server . webpack-dev-server - Development server for webpack npm i -D webpack-dev-server For demonstrative purposes, we can just add the development config to the current webpack.config.js file we're building and test it out. However, you'll want to create two config files: one with mode: production and one with mode: development . In the webpack 5 boilerplate , I demonstrate how to use webpack-merge to put all the base webpack config in one file, and any special development or production configs in a webpack.prod.js and webpack.dev.js files. const webpack = require ( 'webpack' ) module . exports = { /* ... */ mode : 'development' , devServer : { historyApiFallback : true , contentBase : path . resolve ( __dirname , './dist' ) , open : true , compress : true , hot : true , port : 8080 , } , plugins : [ /* ... */ // Only update what has changed on hot reload new webpack . HotModuleReplacementPlugin ( ) , ] , } ) We're adding mode: development , and creating a devServer property. I'm setting a few defaults on it - the port will be 8080 , it will automatically open a browser window, and uses hot-module-replacement , which requires the webpack.HotModuleReplacementPlugin plugin. This will allow modules to update without doing a complete reload of the page - so if you update some styles, just those styles will change, and you won't need to reload the entirety of the JavaScript, which speeds up development a lot. Now you'll use the webpack serve command to set up the server. package.json \"scripts\" : { \"start\" : \"webpack serve\" } npm start When you run this command, a link to localhost:8080 will automatically pop up in your browser. Now you can update Sass and JavaScript and watch it update on the fly."
            },
            {
                "chunk_id": "d585d4bcf099b640b07644302dda0579-chunk-5",
                "heading": "Conclusion",
                "text": "That should help you get started with webpack. Once again, I've created a production-ready webpack 5 boilerplate, with Babel, Sass, PostCSS, production optimization, and a development server, that has everything from this article but goes into more details. From here, you can easily set up React, Vue, Typescript, or anything else you might want. webpack 5 boilerplate Check it out, play around with it, and enjoy!"
            }
        ]
    },
    {
        "id": "64c766b6e7919c4b087bb5d2ec097194",
        "url": "https://www.taniarascia.com/asynchronous-javascript-event-loop-callbacks-promises-async-await/",
        "title": "The Event Loop, Callbacks, Promises, and Async/Await in JavaScript | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "64c766b6e7919c4b087bb5d2ec097194-chunk-1",
                "heading": "Introduction",
                "text": "In the early days of the internet, websites often consisted of static data in an HTML page . But now that web applications have become more interactive and dynamic, it has become increasingly necessary to do intensive operations like make external network requests to retrieve API data. To handle these operations in JavaScript, a developer must use asynchronous programming techniques. Since JavaScript is a single-threaded programming language with a synchronous execution model that proccesses one operation after another, it can only process one statement at a time. However, an action like requesting data from an API can take an indeterminate amount of time, depending on the size of data being requested, the speed of the network connection, and other factors. If API calls were performed in a synchronous manner, the browser would not be able to handle any user input, like scrolling or clicking a button, until that operation completes. This is known as blocking . In order to prevent blocking behavior, the browser environment has many Web APIs that JavaScript can access that are asynchronous , meaning they can run in parallel with other operations instead of sequentially. This is useful because it allows the user to continue using the browser normally while the asynchronous operations are being processed. As a JavaScript developer, you need to know how to work with asynchronous Web APIs and handle the response or error of those operations. In this article, you will learn about the event loop, the original way of dealing with asynchronous behavior through callbacks, the updated ECMAScript 2015 addition of promises, and the modern practice of using async / await ."
            },
            {
                "chunk_id": "64c766b6e7919c4b087bb5d2ec097194-chunk-2",
                "heading": "The Event Loop",
                "text": "This section will explain how JavaScript handles asynchronous code with the event loop. It will first run through a demonstration of the event loop at work, and will then explain the two elements of the event loop: the stack and the queue. JavaScript code that does not use any asynchronous Web APIs will execute in a synchronous manner—one at a time, sequentially. This is demonstrated by this example code that calls three functions that each print a number to the console : // Define three example functions function first ( ) { console . log ( 1 ) } function second ( ) { console . log ( 2 ) } function third ( ) { console . log ( 3 ) } In this code, you define three functions that print numbers with console.log() . Next, write calls to the functions: // Execute the functions first ( ) second ( ) third ( ) The output will be based on the order the functions were called: first() , second() , then third() . 1\n2\n3 When an asynchronous Web API is used, the rules become more complicated. A built-in API that you can test this with is setTimeout , which sets a timer and performs an action after a specified amount of time. setTimeout needs to be asynchronous, otherwise the entire browser would remain frozen during the waiting, which would result in a poor user experience. Add setTimeout to the second function to simulate an asynchronous request: // Define three example functions, but one of them contains asynchronous code function first ( ) { console . log ( 1 ) } function second ( ) { setTimeout ( ( ) => { console . log ( 2 ) } , 0 ) } function third ( ) { console . log ( 3 ) } setTimeout takes two arguments: the function it will run asynchronously, and the amount of time it will wait before calling that function. In this code you wrapped console.log in an anonymous function and passed it to setTimeout , then set the function to run after 0 milliseconds. Now call the functions, as you did before: // Execute the functions first ( ) second ( ) third ( ) You might expect with a setTimeout set to 0 that running these three functions would still result in the numbers being printed in sequential order. But because it is asynchronous, the function with the timeout will be printed last: 1\n3\n2 Whether you set the timeout to zero seconds or five minutes will make no difference—the console.log called by asynchronous code will execute after the synchronous top-level functions. This happens because the JavaScript host environment, in this case the browser, uses a concept called the event loop to handle concurrency, or parallel events. Since JavaScript can only execute one statement at a time, it needs the event loop to be informed of when to execute which specific statement. The event loop handles this with the concepts of a stack and a queue . The stack , or call stack, holds the state of what function is currently running. If you're unfamiliar with the concept of a stack, you can imagine it as an array with \"Last in, first out\" (LIFO) properties, meaning you can only add or remove items from the end of the stack. JavaScript will run the current frame (or function call in a specific environment) in the stack, then remove it and move on to the next one. For the example only containing synchronous code, the browser handles the execution in the following order: Add first() to the stack, run first() which logs 1 to the console, remove first() from the stack. Add second() to the stack, run second() which logs 2 to the console, remove second() from the stack. Add third() to the stack, run third() which logs 3 to the console, remove third() from the stack. The second example with setTimout looks like this: Add first() to the stack, run first() which logs 1 to the console, remove first() from the stack. Add second() to the stack, run second() . Add setTimeout() to the stack, run the setTimeout() Web API which starts a timer and adds the anonymous function to the queue , remove setTimeout() from the stack. Remove second() from the stack. Add third() to the stack, run third() which logs 3 to the console, remove third() from the stack. The event loop checks the queue for any pending messages and finds the anonymous function from setTimeout() , adds the function to the stack which logs 2 to the console, then removes it from the stack. Using setTimeout , an asynchronous Web API, introduces the concept of the queue , which this tutorial will cover next. The queue , also referred to as message queue or task queue, is a waiting area for functions. Whenever the call stack is empty, the event loop will check the queue for any waiting messages, starting from the oldest message. Once it finds one, it will add it to the stack, which will execute the function in the message. In the setTimeout example, the anonymous function runs immediately after the rest of the top-level execution, since the timer was set to 0 seconds. It's important to remember that the timer does not mean that the code will execute in exactly 0 seconds or whatever the specified time is, but that it will add the anonymous function to the queue in that amount of time. This queue system exists because if the timer were to add the anonymous function directly to the stack when the timer finishes, it would interrupt whatever function is currently running, which could have unintended and unpredictable effects. Now you know how the event loop uses the stack and queue to handle the execution order of code. The next task is to figure out how to control the order of execution in your code. To do this, you will first learn about the original way to ensure asynchrnous code is handled correctly by the event loop: callback functions."
            },
            {
                "chunk_id": "64c766b6e7919c4b087bb5d2ec097194-chunk-3",
                "heading": "Stack",
                "text": "The stack , or call stack, holds the state of what function is currently running. If you're unfamiliar with the concept of a stack, you can imagine it as an array with \"Last in, first out\" (LIFO) properties, meaning you can only add or remove items from the end of the stack. JavaScript will run the current frame (or function call in a specific environment) in the stack, then remove it and move on to the next one. For the example only containing synchronous code, the browser handles the execution in the following order: Add first() to the stack, run first() which logs 1 to the console, remove first() from the stack. Add second() to the stack, run second() which logs 2 to the console, remove second() from the stack. Add third() to the stack, run third() which logs 3 to the console, remove third() from the stack. The second example with setTimout looks like this: Add first() to the stack, run first() which logs 1 to the console, remove first() from the stack. Add second() to the stack, run second() . Add setTimeout() to the stack, run the setTimeout() Web API which starts a timer and adds the anonymous function to the queue , remove setTimeout() from the stack. Remove second() from the stack. Add third() to the stack, run third() which logs 3 to the console, remove third() from the stack. The event loop checks the queue for any pending messages and finds the anonymous function from setTimeout() , adds the function to the stack which logs 2 to the console, then removes it from the stack. Using setTimeout , an asynchronous Web API, introduces the concept of the queue , which this tutorial will cover next."
            },
            {
                "chunk_id": "64c766b6e7919c4b087bb5d2ec097194-chunk-4",
                "heading": "Callback Functions",
                "text": "In the setTimeout example, the function with the timeout ran after everything in the main top-level execution context. But if you wanted to ensure one of the functions, like the third function, ran after the timeout, then you would have to use asynchronous coding methods. The timeout here can represent an asynchronous API call that contains data. You want to work with the data from the API call, but you have to make sure the data is returned first. The original solution to dealing with this problem is using callback functions . Callback functions do not have special syntax; they are just a function that has been passed as an argument to another function. The function that takes another function as an argument is called a higher-order function . According to this definition, any function can become a callback function if it is passed as an argument. Callbacks are not asynchronous by nature, but can be used for asynchronous purposes. Here is a syntactic code example of a higher-order function and a callback: // A function function fn ( ) { console . log ( 'Just a function' ) } // A function that takes another function as an argument function higherOrderFunction ( callback ) { // When you call a function that is passed as an argument, it is referred to as a callback callback ( ) } // Passing a function higherOrderFunction ( fn ) In this code, you define a function fn , define a function higherOrderFunction that takes a function callback as an argument, and pass fn as a callback to higherOrderFunction . Running this code will give the following: Just a function Let's go back to the first , second , and third functions with setTimeout . This is what you have so far: function first ( ) { console . log ( 1 ) } function second ( ) { setTimeout ( ( ) => { console . log ( 2 ) } , 0 ) } function third ( ) { console . log ( 3 ) } The task is to get the third function to always delay execution until after the asynchronous action in the second function has completed. This is where callbacks come in. Instead of executing first , second , and third at the top-level of execution, you will pass the third function as an argument to second . The second function will execute the callback after the asynchronous action has completed. Here are the three functions with a callback applied: // Define three functions function first ( ) { console . log ( 1 ) } function second ( callback ) { setTimeout ( ( ) => { console . log ( 2 ) // Execute the callback function callback ( ) } , 0 ) } function third ( ) { console . log ( 3 ) } Now, execute first and second , then pass third as an argument to second : first ( ) second ( third ) After running this code block, you will receive the following output: 1\n2\n3 First 1 will print, and after the timer completes (in this case, zero seconds, but you can change it to any amount) it will print 2 then 3 . By passing a function as a callback, you've successfully delayed execution of the function until the asynchronous Web API ( setTimeout ) completes. The key takeaway here is that callback functions are not asynchronous— setTimeout is the asynchronous Web API responsible for handling asynchronous tasks. The callback just allows you to be informed of when an asynchronous task has completed and handles the success or failure of the task. Now that you have learned how to use callbacks to handle asynchronous tasks, the next section explains the problems of nesting too many callbacks and creating a \"pyramid of doom.\""
            },
            {
                "chunk_id": "64c766b6e7919c4b087bb5d2ec097194-chunk-5",
                "heading": "Promises",
                "text": "A promise represents the completion of an asynchronous function. It is an object that might return a value in the future. It accomplishes the same basic goal as a callback function, but with many additional features and a more readable syntax. As a JavaScript developer, you will likely spend more time consuming promises than creating them, as it is usually asynchronous Web APIs that return a promise for the developer to consume. This tutorial will show you how to do both. You can initialize a promise with the new Promise syntax, and you must initialize it with a function. The function that gets passed to a promise has resolve and reject parameters. The resolve and reject functions handle the success and failure of an operation, respectively. Write the following line to declare a promise: // Initialize a promise const promise = new Promise ( ( resolve , reject ) => { } ) If you inspect the initialized promise in this state with your web browser's console, you will find it has a pending status and undefined value: __proto__: Promise\n[[PromiseStatus]]: \"pending\"\n[[PromiseValue]]: undefined So far, nothing has been set up for the promise, so it's going to sit there in a pending state forever. The first thing you can do to test out a promise is fulfill the promise by resolving it with a value: const promise = new Promise ( ( resolve , reject ) => { resolve ( 'We did it!' ) } ) Now, upon inspecting the promise, you'll find that it has a status of fulfilled , and a value set to the value you passed to resolve : __proto__: Promise\n[[PromiseStatus]]: \"fulfilled\"\n[[PromiseValue]]: \"We did it!\" As stated in the beginning of this section, a promise is an object that may return a value. After being successfully fulfilled, the value goes from undefined to being populated with data. A promise can have three possible states: pending, fulfilled, and rejected. Pending - Initial state before being resolved or rejected Fulfilled - Successful operation, promise has resolved Rejected - Failed operation, promise has rejected After being fulfilled or rejected, a promise is settled. Now that you have an idea of how promises are created, let's look at how a developer may consume these promises. The promise in the last section has fulfilled with a value, but you also want to be able to access the value. Promises have a method called then that will run after a promise reaches resolve in the code. then will return the promise's value as a parameter. This is how you would return and log the value of the example promise: promise . then ( ( response ) => { console . log ( response ) } ) The promise you created had a [[PromiseValue]] of We did it! . This value is what will be passed into the anonymous function as response : We did it! So far, the example you created did not involve an asynchronous Web API—it only explained how to create, resolve, and consume a native JavaScript promise. Using setTimeout , you can test out an asynchronous request. The following code simulates data returned from an asynchronous request as a promise: const promise = new Promise ( ( resolve , reject ) => { setTimeout ( ( ) => resolve ( 'Resolving an asynchronous request!' ) , 2000 ) } ) // Log the result promise . then ( ( response ) => { console . log ( response ) } ) Using the then syntax ensures that the response will be logged only when the setTimeout operation is completed after 2000 milliseconds. All this is done without nesting callbacks. Now after two seconds, it will resolve the promise value and it will get logged in then : Resolving an asynchronous request! Promises can also be chained to pass along data to more than one asynchronous operation. If a value is returned in then , another then can be added that will fulfill with the return value of the previous then : // Chain a promise promise . then ( ( firstResponse ) => { // Return a new value for the next then return firstResponse + ' And chaining!' } ) . then ( ( secondResponse ) => { console . log ( secondResponse ) } ) The fulfilled response in the second then will log the return value: Resolving an asynchronous request! And chaining! Since then can be chained, it allows the consumption of promises to appear more synchronous than callbacks, as they do not need to be nested. This will allow for more readable code that can be maintained and verified easier. So far, you have only handled a promise with a successful resolve , which puts the promise in a fulfilled state. But frequently with an asynchronous request you also have to handle an error—if the API is down, or a malformed or unauthorized request is sent. A promise should be able to handle both cases. In this section, you will create a function to test out both the success and error case of creating and consuming a promise. This getUsers function will pass a flag to a promise, and return the promise. function getUsers ( onSuccess ) { return new Promise ( ( resolve , reject ) => { setTimeout ( ( ) => { // Handle resolve and reject in the asynchronous API } , 1000 ) } ) } Set up the code so that if onSuccess is true , the timeout will fulfill with some data. If false , the function will reject with an error. function getUsers ( onSuccess ) { return new Promise ( ( resolve , reject ) => { setTimeout ( ( ) => { // Handle resolve and reject in the asynchronous API if ( onSuccess ) { resolve ( [ { id : 1 , name : 'Jerry' } , { id : 2 , name : 'Elaine' } , { id : 3 , name : 'George' } , ] ) } else { reject ( 'Failed to fetch data!' ) } } , 1000 ) } ) } For the successful result, you return JavaScript objects that represent sample user data. In order to handle the error, you will use the catch instance method. This will give you a failure callback with the error as a parameter. Run the getUser command with onSuccess set to false , using the then method for the success case and the catch method for the error: // Run the getUsers function with the false flag to trigger an error getUsers ( false ) . then ( ( response ) => { console . log ( response ) } ) . catch ( ( error ) => { console . error ( error ) } ) Since the error was triggered, the then will be skipped and the catch will handle the error: Failed to fetch data! If you switch the flag and resolve instead, the catch will be ignored, and the data will return instead. // Run the getUsers function with the true flag to resolve successfully getUsers ( true ) . then ( ( response ) => { console . log ( response ) } ) . catch ( ( error ) => { console . error ( error ) } ) This will yield the user data: (3) [{…}, {…}, {…}]\n0: {id: 1, name: \"Jerry\"}\n1: {id: 2, name: \"Elaine\"}\n3: {id: 3, name: \"George\"} For reference, here is a table with the handler methods on Promise objects: Promises can be confusing, both for new developers and experienced programmers that have never worked in an asynchronous environment before. However as mentioned, it is much more common to consume promises than create them. Usually, a browser's Web API or third party library will be providing the promise, and you only need to consume it. In the final promise section, this tutorial will cite a common use case of a Web API that returns promises: the Fetch API . One of the most useful and frequently used Web APIs that returns a promise is the Fetch API, which allows you to make an asynchronous resource request over a network. fetch is a two-part process, and therefore requires chaining then . This example demonstrates hitting the GitHub API to fetch a user's data, while also handling any potential error: // Fetch a user from the GitHub API fetch ( 'https://api.github.com/users/octocat' ) . then ( ( response ) => { return response . json ( ) } ) . then ( ( data ) => { console . log ( data ) } ) . catch ( ( error ) => { console . error ( error ) } ) The fetch request is sent to the https://api.github.com/users/octocat URL, which asynchronously waits for a response. The first then passes the response to an anonymous function that formats the response as JSON data , then passes the JSON to a second then that logs the data to the console. The catch statement logs any error to the console. Running this code will yield the following: login: \"octocat\",\nid: 583231,\navatar_url: \"https://avatars3.githubusercontent.com/u/583231?v=4\"\nblog: \"https://github.blog\"\ncompany: \"@github\"\nfollowers: 3203\n... This is the data requested from https://api.github.com/users/octocat , rendered in JSON format. This section of the tutorial showed that promises incorporate a lot of improvements for dealing with asynchronous code. But, while using then to handle asynchronous actions is easier to follow than the pyramid of callbacks, some developers still prefer a synchronous format of writing asynchronous code. To address this need, ECMAScript 2016 (ES7) introduced async functions and the await keyword to make working with promises easier."
            },
            {
                "chunk_id": "64c766b6e7919c4b087bb5d2ec097194-chunk-6",
                "heading": "Creating a Promise",
                "text": "You can initialize a promise with the new Promise syntax, and you must initialize it with a function. The function that gets passed to a promise has resolve and reject parameters. The resolve and reject functions handle the success and failure of an operation, respectively. Write the following line to declare a promise: // Initialize a promise const promise = new Promise ( ( resolve , reject ) => { } ) If you inspect the initialized promise in this state with your web browser's console, you will find it has a pending status and undefined value: __proto__: Promise\n[[PromiseStatus]]: \"pending\"\n[[PromiseValue]]: undefined So far, nothing has been set up for the promise, so it's going to sit there in a pending state forever. The first thing you can do to test out a promise is fulfill the promise by resolving it with a value: const promise = new Promise ( ( resolve , reject ) => { resolve ( 'We did it!' ) } ) Now, upon inspecting the promise, you'll find that it has a status of fulfilled , and a value set to the value you passed to resolve : __proto__: Promise\n[[PromiseStatus]]: \"fulfilled\"\n[[PromiseValue]]: \"We did it!\" As stated in the beginning of this section, a promise is an object that may return a value. After being successfully fulfilled, the value goes from undefined to being populated with data. A promise can have three possible states: pending, fulfilled, and rejected. Pending - Initial state before being resolved or rejected Fulfilled - Successful operation, promise has resolved Rejected - Failed operation, promise has rejected After being fulfilled or rejected, a promise is settled. Now that you have an idea of how promises are created, let's look at how a developer may consume these promises."
            },
            {
                "chunk_id": "64c766b6e7919c4b087bb5d2ec097194-chunk-7",
                "heading": "Consuming a Promise",
                "text": "The promise in the last section has fulfilled with a value, but you also want to be able to access the value. Promises have a method called then that will run after a promise reaches resolve in the code. then will return the promise's value as a parameter. This is how you would return and log the value of the example promise: promise . then ( ( response ) => { console . log ( response ) } ) The promise you created had a [[PromiseValue]] of We did it! . This value is what will be passed into the anonymous function as response : We did it! So far, the example you created did not involve an asynchronous Web API—it only explained how to create, resolve, and consume a native JavaScript promise. Using setTimeout , you can test out an asynchronous request. The following code simulates data returned from an asynchronous request as a promise: const promise = new Promise ( ( resolve , reject ) => { setTimeout ( ( ) => resolve ( 'Resolving an asynchronous request!' ) , 2000 ) } ) // Log the result promise . then ( ( response ) => { console . log ( response ) } ) Using the then syntax ensures that the response will be logged only when the setTimeout operation is completed after 2000 milliseconds. All this is done without nesting callbacks. Now after two seconds, it will resolve the promise value and it will get logged in then : Resolving an asynchronous request! Promises can also be chained to pass along data to more than one asynchronous operation. If a value is returned in then , another then can be added that will fulfill with the return value of the previous then : // Chain a promise promise . then ( ( firstResponse ) => { // Return a new value for the next then return firstResponse + ' And chaining!' } ) . then ( ( secondResponse ) => { console . log ( secondResponse ) } ) The fulfilled response in the second then will log the return value: Resolving an asynchronous request! And chaining! Since then can be chained, it allows the consumption of promises to appear more synchronous than callbacks, as they do not need to be nested. This will allow for more readable code that can be maintained and verified easier."
            },
            {
                "chunk_id": "64c766b6e7919c4b087bb5d2ec097194-chunk-8",
                "heading": "Error Handling",
                "text": "So far, you have only handled a promise with a successful resolve , which puts the promise in a fulfilled state. But frequently with an asynchronous request you also have to handle an error—if the API is down, or a malformed or unauthorized request is sent. A promise should be able to handle both cases. In this section, you will create a function to test out both the success and error case of creating and consuming a promise. This getUsers function will pass a flag to a promise, and return the promise. function getUsers ( onSuccess ) { return new Promise ( ( resolve , reject ) => { setTimeout ( ( ) => { // Handle resolve and reject in the asynchronous API } , 1000 ) } ) } Set up the code so that if onSuccess is true , the timeout will fulfill with some data. If false , the function will reject with an error. function getUsers ( onSuccess ) { return new Promise ( ( resolve , reject ) => { setTimeout ( ( ) => { // Handle resolve and reject in the asynchronous API if ( onSuccess ) { resolve ( [ { id : 1 , name : 'Jerry' } , { id : 2 , name : 'Elaine' } , { id : 3 , name : 'George' } , ] ) } else { reject ( 'Failed to fetch data!' ) } } , 1000 ) } ) } For the successful result, you return JavaScript objects that represent sample user data. In order to handle the error, you will use the catch instance method. This will give you a failure callback with the error as a parameter. Run the getUser command with onSuccess set to false , using the then method for the success case and the catch method for the error: // Run the getUsers function with the false flag to trigger an error getUsers ( false ) . then ( ( response ) => { console . log ( response ) } ) . catch ( ( error ) => { console . error ( error ) } ) Since the error was triggered, the then will be skipped and the catch will handle the error: Failed to fetch data! If you switch the flag and resolve instead, the catch will be ignored, and the data will return instead. // Run the getUsers function with the true flag to resolve successfully getUsers ( true ) . then ( ( response ) => { console . log ( response ) } ) . catch ( ( error ) => { console . error ( error ) } ) This will yield the user data: (3) [{…}, {…}, {…}]\n0: {id: 1, name: \"Jerry\"}\n1: {id: 2, name: \"Elaine\"}\n3: {id: 3, name: \"George\"} For reference, here is a table with the handler methods on Promise objects: Promises can be confusing, both for new developers and experienced programmers that have never worked in an asynchronous environment before. However as mentioned, it is much more common to consume promises than create them. Usually, a browser's Web API or third party library will be providing the promise, and you only need to consume it. In the final promise section, this tutorial will cite a common use case of a Web API that returns promises: the Fetch API ."
            },
            {
                "chunk_id": "64c766b6e7919c4b087bb5d2ec097194-chunk-9",
                "heading": "Using the Fetch API with Promises",
                "text": "One of the most useful and frequently used Web APIs that returns a promise is the Fetch API, which allows you to make an asynchronous resource request over a network. fetch is a two-part process, and therefore requires chaining then . This example demonstrates hitting the GitHub API to fetch a user's data, while also handling any potential error: // Fetch a user from the GitHub API fetch ( 'https://api.github.com/users/octocat' ) . then ( ( response ) => { return response . json ( ) } ) . then ( ( data ) => { console . log ( data ) } ) . catch ( ( error ) => { console . error ( error ) } ) The fetch request is sent to the https://api.github.com/users/octocat URL, which asynchronously waits for a response. The first then passes the response to an anonymous function that formats the response as JSON data , then passes the JSON to a second then that logs the data to the console. The catch statement logs any error to the console. Running this code will yield the following: login: \"octocat\",\nid: 583231,\navatar_url: \"https://avatars3.githubusercontent.com/u/583231?v=4\"\nblog: \"https://github.blog\"\ncompany: \"@github\"\nfollowers: 3203\n... This is the data requested from https://api.github.com/users/octocat , rendered in JSON format. This section of the tutorial showed that promises incorporate a lot of improvements for dealing with asynchronous code. But, while using then to handle asynchronous actions is easier to follow than the pyramid of callbacks, some developers still prefer a synchronous format of writing asynchronous code. To address this need, ECMAScript 2016 (ES7) introduced async functions and the await keyword to make working with promises easier."
            },
            {
                "chunk_id": "64c766b6e7919c4b087bb5d2ec097194-chunk-10",
                "heading": "Conclusion",
                "text": "Because Web APIs often provide data asynchronously, learning how to handle the result of asynchronous actions is an essential part of being a JavaScript developer. In this article, you learned how the host environment uses the event loop to handle the order of execution of code with the stack and queue . You also tried out examples of three ways to handle the success or failure of an asynchronous event, with callbacks, promises, and async / await syntax. Finally, you used the Fetch Web API to handle asynchronous actions. For more information about how the browser handles parallel events, read Concurrency model and the event loop on the Mozilla Developer Network. If you'd like to learn more about JavaScript, return to our How To Code in JavaScript series."
            }
        ]
    },
    {
        "id": "fb229560d94b94ea64d578f4f68a32d2",
        "url": "https://www.taniarascia.com/2022-into-2023/",
        "title": "2022 into 2023 | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "fb229560d94b94ea64d578f4f68a32d2-chunk-1",
                "heading": "I wrote 10 articles (11)",
                "text": "It wasn't an amazingly writing heavy year for me but! I wrote a few good ones. Five of them were written in December - I'm getting back into the swing of things! (It's actually 11, but one that I wrote for DigitalOcean has not been published yet.) Creating a Schema-Based Form System - I really like this article. One of my biggest philosophies when writing code is do not hardcode markup . In this article, I create a form system in which you simply pass data, and the system takes care of all the types and validation and everything else. I've used a system like this to great success in production at multiple companies. Building a Musical Instrument with the Web Audio API - In order to create KeyboardAccordion.com , I had to learn a bit about Svelte, the Web Audio API, and how frequencies work with it. I documented it all here. How To Set Up a GraphQL API Server in Node.js - A follow up to An Introduction to GraphQL , this article is more of a practical straightforward tutorial. Simplifying Drag and Drop - A demo I made for working with React + Drag and Drop, and making it a little more pleasant to work with. Using Path Matching in React Router - An article I made where (spoiler) at the end I realized I didn't need any of it. Testing API Calls in useEffect using React Testing Library and Jest - Testing is probably what I'm weakest at, so once I figure something out after struggling with it, I like to write about it. Redesign: Version 6.0 - Yet another redesign this year. I'm really happy with the current design, so I think I'm going to keep it like this for a while! Memories of Josh - Pictures and memories of my friend, Josh. Tending to my Digital Garden - A personal post I made about the current state of life, burnout, and work. An Ode to Animorphs - If you're into sci-fi at all, set aside your preconceived notions and give this article a read! I just want to get people into Animorphs lore in 2023."
            },
            {
                "chunk_id": "fb229560d94b94ea64d578f4f68a32d2-chunk-2",
                "heading": "Technical",
                "text": "Creating a Schema-Based Form System - I really like this article. One of my biggest philosophies when writing code is do not hardcode markup . In this article, I create a form system in which you simply pass data, and the system takes care of all the types and validation and everything else. I've used a system like this to great success in production at multiple companies. Building a Musical Instrument with the Web Audio API - In order to create KeyboardAccordion.com , I had to learn a bit about Svelte, the Web Audio API, and how frequencies work with it. I documented it all here. How To Set Up a GraphQL API Server in Node.js - A follow up to An Introduction to GraphQL , this article is more of a practical straightforward tutorial. Simplifying Drag and Drop - A demo I made for working with React + Drag and Drop, and making it a little more pleasant to work with. Using Path Matching in React Router - An article I made where (spoiler) at the end I realized I didn't need any of it. Testing API Calls in useEffect using React Testing Library and Jest - Testing is probably what I'm weakest at, so once I figure something out after struggling with it, I like to write about it."
            },
            {
                "chunk_id": "fb229560d94b94ea64d578f4f68a32d2-chunk-3",
                "heading": "Personal",
                "text": "Redesign: Version 6.0 - Yet another redesign this year. I'm really happy with the current design, so I think I'm going to keep it like this for a while! Memories of Josh - Pictures and memories of my friend, Josh. Tending to my Digital Garden - A personal post I made about the current state of life, burnout, and work. An Ode to Animorphs - If you're into sci-fi at all, set aside your preconceived notions and give this article a read! I just want to get people into Animorphs lore in 2023."
            },
            {
                "chunk_id": "fb229560d94b94ea64d578f4f68a32d2-chunk-4",
                "heading": "I made 1 project",
                "text": "My project this year was KeyboardAccordion.com , which I made to be able to practice the accordion at night and not bother anyone. The write-up for this project is the Musical Instrument/Web Audio API article. I also started a Baba Is You game implemention earlier in the year that I abandoned for a bit, I'd like to finish that up this year."
            },
            {
                "chunk_id": "fb229560d94b94ea64d578f4f68a32d2-chunk-5",
                "heading": "What I want to learn next",
                "text": "A few topics I'd like to learn more about in the coming year: Redis Pub/Sub Why everyone loves Tailwind Server-side rendering (NextJS?) Python environment setup CSS animations (This is on my list of things to learn from 2016...) Data structures (On my list from 2019...) Sometimes it's hard for me to realize how much I've learned over the last several years, but the list is actually getting quite long. It's not quite so obvious what I should learn next, suggestions are appreciated! Maybe Rome, Deno, WebAssembly, web components, newer CSS concepts, in-depth exploration of DevTools, or Rust?"
            }
        ]
    },
    {
        "id": "51e27bb017fe9f127b69a2c57a651f6d",
        "url": "https://www.taniarascia.com/josh/",
        "title": "Memories of Josh | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "51e27bb017fe9f127b69a2c57a651f6d-chunk-1",
                "heading": "Memories of Josh",
                "text": ""
            },
            {
                "chunk_id": "51e27bb017fe9f127b69a2c57a651f6d-chunk-2",
                "heading": "About me",
                "text": "Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts."
            },
            {
                "chunk_id": "51e27bb017fe9f127b69a2c57a651f6d-chunk-3",
                "heading": "Post Details",
                "text": "Published: August 02, 2022 Category: Personal"
            },
            {
                "chunk_id": "51e27bb017fe9f127b69a2c57a651f6d-chunk-4",
                "heading": "Tags",
                "text": "life Newsletter Subscribe to the Newsletter"
            },
            {
                "chunk_id": "51e27bb017fe9f127b69a2c57a651f6d-chunk-5",
                "heading": "Newsletter",
                "text": "Subscribe to the Newsletter"
            }
        ]
    },
    {
        "id": "0e30b6f6b1310ac26c38adb9c4d7929a",
        "url": "https://www.taniarascia.com/blog",
        "title": "Articles | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "0e30b6f6b1310ac26c38adb9c4d7929a-chunk-1",
                "heading": "Articles",
                "text": "Guides, references, and tutorials on programming, web development, and design. View All Tags"
            },
            {
                "chunk_id": "0e30b6f6b1310ac26c38adb9c4d7929a-chunk-2",
                "heading": "2020",
                "text": "Understanding Modules, Import and Export in JavaScript Oct 23 How to Set Up webpack 5 From Scratch Oct 15 The Event Loop, Callbacks, Promises, and Async/Await in JavaScript Sep 10 How to Sort, Filter, and Paginate in a REST API Sep 09 Understanding Arrow Functions in JavaScript Aug 01 Using Git Submodules for Private Content Jul 01 Understanding Template Literals in JavaScript Jun 30 Understanding Destructuring, Rest Parameters, and Spread Syntax May 14 Writing an Emulator from Scratch in JavaScript (Chip-8) Apr 13 Understanding Default Parameters in JavaScript Mar 31 How to Use Redux and React Mar 09 Understanding Generators in JavaScript Feb 29 How to Set up a Mac for Development Feb 17 Understanding Map and Set in JavaScript Feb 12 How to Use Docker to Create a CI/CD Pipeline Feb 07"
            },
            {
                "chunk_id": "0e30b6f6b1310ac26c38adb9c4d7929a-chunk-3",
                "heading": "2016",
                "text": "My Complete Front End Web Development Setup Nov 10 Styling UI Components from Scratch: Buttons & Forms Nov 08 Setting Up a Basic Cron Job on a Linux Server Oct 14 WordPress Tutorial: Custom Fields and Meta Boxes Aug 10 How to Build a Responsive Image Gallery with Flexbox Jul 26 How To Do Math in JavaScript with Operators Jul 20 JavaScript Comparisons, Math, and Logic Jun 25 Adding Syntax Highlighting to Code Snippets in a Blog or Website Jun 07 Parallax Scroll Effect Apr 09 JavaScript Comments, Variables, Data Types, and Hello, World! Mar 30 Automated Task Running in JavaScript with Gulp Feb 16 Obtain a TLS/SSL Certificate and Enable HTTPS Encryption Jan 29 WordPress Tutorial: Pagination, Comments, Functions, & Custom Posts Jan 14"
            }
        ]
    },
    {
        "id": "73054703098a0baf3797a34c62cc88b8",
        "url": "https://www.taniarascia.com/introduction-to-graphql/",
        "title": "An Introduction to GraphQL | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "73054703098a0baf3797a34c62cc88b8-chunk-1",
                "heading": "Introduction",
                "text": "As web and mobile applications become more mature and complex, software engineers invent clever new ways of improving the interaction between client and server within an application. One of the biggest paradigm shifts over the last few years in this regard has been GraphQL , an open-source query language and runtime for manipulating APIs. GraphQL was designed by Facebook in 2012 (and released publicly in 2015) to solve various weaknesses with traditional REST architecture by making a new system that is declarative, client-driven, and performant. In this article, you will learn what GraphQL is, familiarize yourself with important terminology and concepts of GraphQL, and discover how the GraphQL specification compares with the REST architectural style."
            },
            {
                "chunk_id": "73054703098a0baf3797a34c62cc88b8-chunk-2",
                "heading": "What is GraphQL?",
                "text": "GraphQL stands for Graph Q uery L anguage, but unlike other query languages such as SQL ( S tructured Q uery L anguage), it is not a language for communicating directly with a database, but rather a language that defines a contract through which a client communicates with a API server. The GraphQL specification is an open standard that describes the rules and characteristics of the language. It also provides instructions for executing a GraphQL query. Due to the fact that GraphQL is defined by an open-standard, there is no official implementation of GraphQL. A GraphQL implementation can be written with any programming language, integrate with any type of database, and support any client (such as mobile or web applications), as long as it follows the rules outlined in the spec. One of the most popular commercial GraphQL implementations is Apollo GraphQL , a which touts several GraphQL client and server implementations, but it is not necessary to use Apollo to use or understand GraphQL."
            },
            {
                "chunk_id": "73054703098a0baf3797a34c62cc88b8-chunk-3",
                "heading": "Architecture",
                "text": "GraphQL exists in the application layer between client and data. The GraphQL server describes the capabilities exposed in the API, and the client describes the requirements of the request. A GraphQL API is defined with a single endpoint, usually the /graphql endpoint, which can access the full capabilities of the GraphQL server. Since GraphQL is an application layer technology and is transport agnostic, it can be served over any protocol, but it is most commonly served over HTTP. A GraphQL server implementation can be written with any programming language, such as the express-graphql middleware which allows you to create a GraphQL API on a Node/Express HTTP server. GraphQL is also database agnostic, and the data for the application can be stored in MySQL, PostgreSQL, MongoDB, or any other database. The data can even be supplied by an aggregation of several traditional REST API endpoints. All that matters is that the data is defined in a GraphQL schema , which defines the API by describing the data available to be queried. Requests made to a GraphQL server are called documents and consist of operations such as queries (for read requests) and mutations (for write requests). Although there are advanced GraphQL clients, such as Apollo Client or Facebook's Relay which provide mechanisms for caching as well as additional tools, no special client is required to make a request to a GraphQL server. A simple XMLHttpRequest or fetch from a web browser is sufficient for making requests by sending a GraphQL document to a GraphQL server. Below is an example of a fetch request to a /graphql endpoint, which passes the GraphQL document as a string in the body of the POST request. async function fetchWizards ( ) { const response = await fetch ( '/graphql' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' , } , body : JSON . stringify ( { query : ` {\n    wizards {\n      id\n      name\n    },\n  } ` , } ) , } ) const wizards = await response . json ( ) return wizards } fetchWizards ( ) This will return a JSON response for the request. { \"data\" : { \"wizards\" : [ { \"id\" : \"1\" , \"name\" : \"Merlin\" } , { \"id\" : \"2\" , \"name\" : \"Gandalf\" } ] } }"
            },
            {
                "chunk_id": "73054703098a0baf3797a34c62cc88b8-chunk-4",
                "heading": "Client",
                "text": "Requests made to a GraphQL server are called documents and consist of operations such as queries (for read requests) and mutations (for write requests). Although there are advanced GraphQL clients, such as Apollo Client or Facebook's Relay which provide mechanisms for caching as well as additional tools, no special client is required to make a request to a GraphQL server. A simple XMLHttpRequest or fetch from a web browser is sufficient for making requests by sending a GraphQL document to a GraphQL server. Below is an example of a fetch request to a /graphql endpoint, which passes the GraphQL document as a string in the body of the POST request. async function fetchWizards ( ) { const response = await fetch ( '/graphql' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' , } , body : JSON . stringify ( { query : ` {\n    wizards {\n      id\n      name\n    },\n  } ` , } ) , } ) const wizards = await response . json ( ) return wizards } fetchWizards ( ) This will return a JSON response for the request. { \"data\" : { \"wizards\" : [ { \"id\" : \"1\" , \"name\" : \"Merlin\" } , { \"id\" : \"2\" , \"name\" : \"Gandalf\" } ] } }"
            },
            {
                "chunk_id": "73054703098a0baf3797a34c62cc88b8-chunk-5",
                "heading": "GraphQL vs. REST",
                "text": "GraphQL and REST are not interchangeable concepts, but they solve similar problems for applications. REST stands for Re presentational S tate T ransfer, and is a software architectural style for sharing data between different systems. A RESTful API is an API that adheres to the principles and constraints of REST, which include being stateless, cacheable, enforcing a separation of concerns between the client and server, and having a uniform interface, such as through URIs. GraphQL, as covered previously, is a specification for a query language and runtime for executing queries. There are advantages and disadvantages to both systems, and both have their use in modern API development. However, GraphQL was developed to combat some perceived weaknesses with the REST system, and to create a more efficient, client-driven API. Architecture - A REST API is typically defined by multiple endpoints on a server, but GraphQL exchanges data over a single endpoint. A GraphQL endpoint can return a complex graph of data that might require multiple REST queries, reducing the number of requests over the network for a single view. Data fetching - A REST API returns the set of data that was determined on the server. This might be far too much data, such as if the view only requires one property from a response, or it might not be enough, such as a list endpoint that doesn't return every property that a table requires in the view. GraphQL prevents this over and under fetching of data via declarative queries. Error Handling - Since it is not necessary for GraphQL to be served over HTTP, there is no specification about using HTTP response codes for errors. Typically all GraphQL endpoints will resolve with a 200 HTTP code response, and failed results will include an errors property alongside the data property in the response. RESTful APIs, on the other hand, utilize different 400 level HTTP codes for client errors and 200 level HTTP codes for successful responses. Versioning - GraphQL APIs strive to be backwards compatible and avoid breaking changes, contrasting with the common REST pattern of versioning endpoints, often with a /v1 or /v2 in the URL itself to determine the version. However, it is possible to implement your own versioning with GraphQL, or version via evolution with REST, it's just less conventional. Caching - Cacheability is an integral part of the REST guiding constraints . Since HTTP-based REST APIs consist of multiple endpoints using different HTTP methods, it can take advantage of existing HTTP conventions for caching and avoiding refetching resource. And since essentially every GraphQL request will be different but use the single endpoint, it cannot take advantage of any of the built-in HTTP caching mechanisms. GraphQL clients can take advantage of Global Object Identification to enable simple caching. This list does not cover all the similarities and differences between REST and GraphQL, but summarizes many of the most critical points. Additionally, GraphQL can be used as a gateway that aggregates multiple REST endpoints or services, in which case both technologies can be used in harmony side-by-side."
            },
            {
                "chunk_id": "73054703098a0baf3797a34c62cc88b8-chunk-6",
                "heading": "Conclusion",
                "text": "GraphQL is an open-source query language and runtime for APIs. GraphQL was invented by developers at Facebook to solve various issues encountered with traditional REST APIs, such as over/under fetching data and inefficient network requests, by making a client-driven, declarative query language for APIs. While GraphQL is not an interchangeable concept with REST, they both describe different ways to manage communication between a client and a server. In this article, you learned what GraphQL is, key differences and similarities between GraphQL and REST, and how a GraphQL server exposes data to a client."
            }
        ]
    },
    {
        "id": "bde3dd0ec17aaec5a13d7692b8067e3f",
        "url": "https://www.taniarascia.com/snake-game-in-javascript",
        "title": "Writing a Snake Game for the Terminal in JavaScript | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "bde3dd0ec17aaec5a13d7692b8067e3f-chunk-1",
                "heading": "Writing a Snake Game for the Terminal in JavaScript",
                "text": ""
            },
            {
                "chunk_id": "bde3dd0ec17aaec5a13d7692b8067e3f-chunk-2",
                "heading": "Object-Oriented",
                "text": "I made extensive use of the ES6 JavaScript class keyword, and divided the game into two classes: Game , which would track the state of the snake, dot, and score UserInterface , which would handle all i/o, which means the key input, the screen, and rendering anything to the screen Blessed uses \"boxes\" to represent elements, so I had a gameBox to represent the entire game play area, scoreBox to represent a single line where the score would be set and updated, and gameOverBox to display a game over modal. All the pixels that would be drawn to the screen beyond that - in this case, the dot and each segment of snake - go through the draw() method, which is a 1px x 1px box. Since all key input would be detected through the UserInterface class, I had to bind all the handler methods so they could be used through the Game class. UserInterface.js bindHandlers ( keyPressHandler , quitHandler , enterHandler ) { this . screen . on ( 'keypress' , keyPressHandler ) this . screen . key ( [ 'escape' , 'q' , 'C-c' ] , quitHandler ) this . screen . key ( [ 'enter' ] , enterHandler ) } Game.js this . ui . bindHandlers ( this . changeDirection . bind ( this ) , this . quit . bind ( this ) , this . start . bind ( this ) ) The Game tracked the snake, the dot, and the score. The snake is an array of x/y coordinates that correspond to pixels on the screen. The snake moves in a direction based on the key input (arrow keys and WASD supported!). To move, the last item in the array (the tail) is removed, and a new item (the head) is added to the beginning. If the snake eats a dot, the last item isn't removed, and the snake grows. A new dot is generated randomly after being eaten. Dots wont generate on an existing snake segment. The game ends if the snake collides with the edges of the terminal screen (the wall), or with its own tail, and the game over modal is displayed. Pressing enter will start a new game by calling the start method, which resets the game state and starts a timer if one doesn't exist. start ( ) { if ( ! this . timer ) { this . reset ( ) this . timer = setInterval ( this . tick . bind ( this ) , 50 ) } } Every 50 ms, tick is called, which is the game loop. The timer will restart if there's a game over. Otherwise, each tick will clear the screen, draw a dot, move the snake, draw the snake, and render everything to the UI. tick ( ) { if ( this . gameOver ( ) ) { this . showGameOverScreen ( ) clearInterval ( this . timer ) this . timer = null return } this . clear ( ) this . drawDot ( ) this . moveSnake ( ) this . drawSnake ( ) this . ui . render ( ) }"
            },
            {
                "chunk_id": "bde3dd0ec17aaec5a13d7692b8067e3f-chunk-3",
                "heading": "User Interface",
                "text": "Blessed uses \"boxes\" to represent elements, so I had a gameBox to represent the entire game play area, scoreBox to represent a single line where the score would be set and updated, and gameOverBox to display a game over modal. All the pixels that would be drawn to the screen beyond that - in this case, the dot and each segment of snake - go through the draw() method, which is a 1px x 1px box. Since all key input would be detected through the UserInterface class, I had to bind all the handler methods so they could be used through the Game class. UserInterface.js bindHandlers ( keyPressHandler , quitHandler , enterHandler ) { this . screen . on ( 'keypress' , keyPressHandler ) this . screen . key ( [ 'escape' , 'q' , 'C-c' ] , quitHandler ) this . screen . key ( [ 'enter' ] , enterHandler ) } Game.js this . ui . bindHandlers ( this . changeDirection . bind ( this ) , this . quit . bind ( this ) , this . start . bind ( this ) )"
            },
            {
                "chunk_id": "bde3dd0ec17aaec5a13d7692b8067e3f-chunk-4",
                "heading": "Game",
                "text": "The Game tracked the snake, the dot, and the score. The snake is an array of x/y coordinates that correspond to pixels on the screen. The snake moves in a direction based on the key input (arrow keys and WASD supported!). To move, the last item in the array (the tail) is removed, and a new item (the head) is added to the beginning. If the snake eats a dot, the last item isn't removed, and the snake grows. A new dot is generated randomly after being eaten. Dots wont generate on an existing snake segment. The game ends if the snake collides with the edges of the terminal screen (the wall), or with its own tail, and the game over modal is displayed. Pressing enter will start a new game by calling the start method, which resets the game state and starts a timer if one doesn't exist. start ( ) { if ( ! this . timer ) { this . reset ( ) this . timer = setInterval ( this . tick . bind ( this ) , 50 ) } } Every 50 ms, tick is called, which is the game loop. The timer will restart if there's a game over. Otherwise, each tick will clear the screen, draw a dot, move the snake, draw the snake, and render everything to the UI. tick ( ) { if ( this . gameOver ( ) ) { this . showGameOverScreen ( ) clearInterval ( this . timer ) this . timer = null return } this . clear ( ) this . drawDot ( ) this . moveSnake ( ) this . drawSnake ( ) this . ui . render ( ) }"
            },
            {
                "chunk_id": "bde3dd0ec17aaec5a13d7692b8067e3f-chunk-5",
                "heading": "Conclusion",
                "text": "Again, you can view the source on GitHub at 🐍 Snek.js . I learned a lot writing and refactoring this over the past few days. I encountered plenty of bugs in my first iteration, such as the snake being able to collide into all but the last tail segment, and a major issue where the blessed boxes weren't being garbage collected, and the game got slower and slower as it became less efficient and more intensive to run. vsergeev wrote a very clean and much more advanced and extensible Typescript implementation of Snake , with a mini-game engine and AI monster entity. Studying this helped me find and fix some of the bugs in my first iteration."
            },
            {
                "chunk_id": "bde3dd0ec17aaec5a13d7692b8067e3f-chunk-6",
                "heading": "About me",
                "text": "Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts."
            },
            {
                "chunk_id": "bde3dd0ec17aaec5a13d7692b8067e3f-chunk-7",
                "heading": "Post Details",
                "text": "Published: April 09, 2019 Category: Technical"
            },
            {
                "chunk_id": "bde3dd0ec17aaec5a13d7692b8067e3f-chunk-8",
                "heading": "Tags",
                "text": "javascript cli node games Newsletter Subscribe to the Newsletter"
            },
            {
                "chunk_id": "bde3dd0ec17aaec5a13d7692b8067e3f-chunk-9",
                "heading": "Newsletter",
                "text": "Subscribe to the Newsletter"
            },
            {
                "chunk_id": "bde3dd0ec17aaec5a13d7692b8067e3f-chunk-10",
                "heading": "Comments",
                "text": ""
            }
        ]
    },
    {
        "id": "8b1abe0d0aaca66476a18ba981705323",
        "url": "https://www.taniarascia.com/websockets-in-redux/",
        "title": "How to Use WebSockets in a Redux Application | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "8b1abe0d0aaca66476a18ba981705323-chunk-1",
                "heading": "Using WebSockets",
                "text": "The WebSocket API is a Web API that makes it possible to open a connection between a client and server. If you wanted to make something like a chat application without a WebSocket, you would have to utilize polling, or continuously making API requests at an interval. The client portion of the connection is set up with new WebSocket(url) , and it handles open , close , and message events. // Initialize WebSocket connection const socket = new WebSocket ( 'wss://my-websocket-url' ) // Listen for open connection socket . addEventListener ( 'open' , ( event ) => { console . log ( 'You say hello...' ) } ) // Listen for messages socket . addEventListener ( 'message' , ( event ) => { console . log ( 'Incoming message: ' , event . data ) } ) // Listen for close connection socket . addEventListener ( 'close' , ( event ) => { console . log ( '...and I say goodbye!' ) } ) // Send a message socket . send ( 'A message' ) // Close websocket connection socket . close ( )"
            },
            {
                "chunk_id": "8b1abe0d0aaca66476a18ba981705323-chunk-2",
                "heading": "Conclusion",
                "text": "This is a very minimalist setup for getting a WebSocket connection into a Redux application, but it covers the main gist of it. Use Middleware to intercept connect and disconnect events, and listen to all the events upon initialization and handle them accordingly. One thing to note with this particular approach is that every tab will open a new WebSocket connection. I've done some poking around but I haven't come to a definitive conclusion on whether or not 1 tab = 1 connection is the best approach, or whether using the SharedWorker API and BroadcastChannel API is a better approach. I plan to follow up this article with one about sharing a connection across multiple tabs using these APIs."
            }
        ]
    },
    {
        "id": "d11768e5edaa746aca0c181f7e92a8e1",
        "url": "https://www.taniarascia.com/setting-up-a-brand-new-mac-for-development/",
        "title": "How to Set up a Mac for Development | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "d11768e5edaa746aca0c181f7e92a8e1-chunk-1",
                "heading": "Application Settings",
                "text": "Install uBlock Origin Install React DevTools Install Redux DevTools Install Duplicate Tab Shortcut Settings -> Set theme to \"Dark\" Press CMD + SHIFT + P and click \"Install code command in PATH\". Now you can use code {file} to open any file in VSCode. View Dotfiles for keyboard shortcuts and settings Install New Moon Theme Install GitLens Install Highlight Matching Tag Install ESLint Install Prettier Install Jest Install Jest Runner Full Screen: CMD + SHIFT + ' (prevents messing with other commands) Left Half: CMD + OPTION + LEFT Right Half: CMD + OPTION + RIGHT For some reason, iTerm2 does not let you use ⌥ + ← and → to tab through words in the terminal by default. I found this article to fix it: Use ⌥← and ⌥→ to jump forwards / backwards Go to Profiles -> Keys: Change ⌥← via \"Send Escape Sequence\" with b Change ⌥→ via \"Send Escape Sequence\" with f"
            },
            {
                "chunk_id": "d11768e5edaa746aca0c181f7e92a8e1-chunk-2",
                "heading": "iTerm2",
                "text": "For some reason, iTerm2 does not let you use ⌥ + ← and → to tab through words in the terminal by default. I found this article to fix it: Use ⌥← and ⌥→ to jump forwards / backwards Go to Profiles -> Keys: Change ⌥← via \"Send Escape Sequence\" with b Change ⌥→ via \"Send Escape Sequence\" with f"
            }
        ]
    },
    {
        "id": "e81f62ed93a5ec91bd7fdd8945d04e49",
        "url": "https://www.taniarascia.com/musical-instrument-web-audio-api",
        "title": "Building a Musical Instrument with the Web Audio API and Svelte | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "e81f62ed93a5ec91bd7fdd8945d04e49-chunk-1",
                "heading": "Web Audio API",
                "text": "KeyboardAccordion.com only has one dependency, and that's Svelte. Everything else is done using plain JavaScript and the built-in browser Web Audio API . I'd never really used the Web Audio API before, so I figured out what I needed to to get this working. The first thing I did was create an AudioContext and attach a GainNode , which controls the volume. const audio = new ( window . AudioContext || window . webkitAudioContext ) ( ) const gainNode = audio . createGain ( ) gainNode . gain . value = 0.1 gainNode . connect ( audio . destination ) As I was figuring everything out, I was experimenting with making new AudioContext for every note because I was trying to fade out the sound, but then I kept realizing that after 50 notes, the app would stop working. Fifty is apparently the limit for the browser, so it's better to just make one AudioContext for the entire app. I'm using waves with the Audio API and not using any sort of audio sample, and I used the OscillatorNode to make each note. There are various types of waves you can use - square , triangle , sine , or sawtooth , which all have a different type of sound. I went with the sawtooth for this app because it worked out the best. Square makes an extremely loud, chiptune-esque sound like an NES which is kind of nice in its own way. Sine and triangle were a bit more subdued but if you don't fade the sound out properly, it makes a really unpleasant kind of cutting sound due to how your ear reacts when a wave gets cut off.  So for each note, I'd make an oscillator, set the wave type, set the frequency, and start it. Here's an example using 440 , which is a standard tuning for \"A\". const oscillator = audio . createOscillator ( ) oscillator . type = 'sawtooth' oscillator . connect ( gainNode ) oscillator . frequency . value = 440 oscillator . start ( ) If you do that, the note will just play until infinity, so you have to make sure you stop the oscillator when you want the note to end. oscillator . stop ( ) For me, this meant event listeners on the DOM that would listen for a keypress event to see if any button was pressed, and a keyup event to determine when any button was no longer being pressed. In Svelte, that's handled by putting event listeners on svelte:body . < svelte: body on: keypress = \" {handleKeyPressNote} \" on: keyup = \" {handleKeyUpNote} \" on: mouseup = \" {handleClearAllNotes} \" /> So that's really everything there is to the Web Audio API itself when it comes to setting up the app - creating an AudioContext , adding a Gain , and starting/stopping an Oscillator for each note. You could paste this into the console and it'll play a note. You'll have to either refresh or type oscillator.stop() to make it stop. const audio = new ( window . AudioContext || window . webkitAudioContext ) ( ) const gainNode = audio . createGain ( ) gainNode . gain . value = 0.1 gainNode . connect ( audio . destination ) const oscillator = audio . createOscillator ( ) oscillator . type = 'sawtooth' oscillator . connect ( gainNode ) oscillator . frequency . value = 440 oscillator . start ( )"
            },
            {
                "chunk_id": "e81f62ed93a5ec91bd7fdd8945d04e49-chunk-2",
                "heading": "Data Structure",
                "text": "I had to figure out how I wanted to lay out the data structure for this application. First of all, if I'm going to be using the Web Audio API with frequencies directly, I had to collect all of them. Here's a nice map of notes to frequencies with all 12 notes and 8-9 octaves for each note, so I can use A[4] to get the 440 frequency. tone export const tone = { C : [ 16.35 , 32.7 , 65.41 , 130.81 , 261.63 , 523.25 , 1046.5 , 2093.0 , 4186.01 ] , Db : [ 17.32 , 34.65 , 69.3 , 138.59 , 277.18 , 554.37 , 1108.73 , 2217.46 , 4434.92 ] , D : [ 18.35 , 36.71 , 73.42 , 146.83 , 293.66 , 587.33 , 1174.66 , 2349.32 , 4698.64 ] , Eb : [ 19.45 , 38.89 , 77.78 , 155.56 , 311.13 , 622.25 , 1244.51 , 2489.02 , 4978.03 ] , E : [ 20.6 , 41.2 , 82.41 , 164.81 , 329.63 , 659.26 , 1318.51 , 2637.02 ] , F : [ 21.83 , 43.65 , 87.31 , 174.61 , 349.23 , 698.46 , 1396.91 , 2793.83 ] , Gb : [ 23.12 , 46.25 , 92.5 , 185.0 , 369.99 , 739.99 , 1479.98 , 2959.96 ] , G : [ 24.5 , 49.0 , 98.0 , 196.0 , 392.0 , 783.99 , 1567.98 , 3135.96 ] , Ab : [ 25.96 , 51.91 , 103.83 , 207.65 , 415.3 , 830.61 , 1661.22 , 3322.44 ] , A : [ 27.5 , 55.0 , 110.0 , 220.0 , 440.0 , 880.0 , 1760.0 , 3520.0 ] , Bb : [ 29.14 , 58.27 , 116.54 , 233.08 , 466.16 , 932.33 , 1864.66 , 3729.31 ] , B : [ 30.87 , 61.74 , 123.47 , 246.94 , 493.88 , 987.77 , 1975.53 , 3951.07 ] , } Figuring out exactly how to arrange all the buttons into a data stucture took a couple of tries for me. The data that had to be captured was: The row on the accordion The column on the accordion The direction of the bellows (push or pull) The name and frequency of the note at that row, column, and direction This means that there are different combinations for all three sets of these things. I decided to make an id that corresponds to each possible combination, such as 1-1-pull being row 1 , column 1 , direction pull . This way, I could create an array that holds the data for any note that is currently being played. If you press the button to reverse the bellows, it would take all the currently playing notes and reverse them, thus changing 1-1-pull and 1-2-pull to 1-1-push and 1-2-push . So ultimately I had an object that contained the data for all three treble rows like so: layout const layout = { one : [ ] , two : [ ] , three : [ ] , } My particular accordion is tuned to FB♭Eb, meaning the first row is tuned to F, the second row is tuned to B♭, and the third row is tuned to E♭. The example for the first row looks like this: layout const layout = { one : [ // Pull { id : '1-1-pull' , name : 'D♭' , frequency : tone . Db [ 4 ] } , { id : '1-2-pull' , name : 'G' , frequency : tone . G [ 3 ] } , { id : '1-3-pull' , name : 'B♭' , frequency : tone . Bb [ 3 ] } , { id : '1-4-pull' , name : 'D' , frequency : tone . D [ 4 ] } , { id : '1-5-pull' , name : 'E' , frequency : tone . E [ 4 ] } , { id : '1-6-pull' , name : 'G' , frequency : tone . G [ 4 ] } , { id : '1-7-pull' , name : 'B♭' , frequency : tone . Bb [ 4 ] } , { id : '1-8-pull' , name : 'D' , frequency : tone . D [ 5 ] } , { id : '1-9-pull' , name : 'E' , frequency : tone . E [ 5 ] } , { id : '1-10-pull' , name : 'G' , frequency : tone . G [ 5 ] } , // Push { id : '1-1-push' , name : 'B' , frequency : tone . B [ 3 ] } , { id : '1-2-push' , name : 'F' , frequency : tone . F [ 3 ] } , { id : '1-3-push' , name : 'A' , frequency : tone . A [ 3 ] } , { id : '1-4-push' , name : 'C' , frequency : tone . C [ 4 ] } , { id : '1-5-push' , name : 'F' , frequency : tone . F [ 4 ] } , { id : '1-6-push' , name : 'A' , frequency : tone . A [ 4 ] } , { id : '1-7-push' , name : 'C' , frequency : tone . C [ 5 ] } , { id : '1-8-push' , name : 'F' , frequency : tone . F [ 5 ] } , { id : '1-9-push' , name : 'A' , frequency : tone . A [ 5 ] } , { id : '1-10-push' , name : 'C' , frequency : tone . C [ 6 ] } , ] , two : [ // ...etc ] , } There are notes 1 through 10 in row one, and each one has a name and frequency associated with it. Repeating this for two and three, I now have all 68 notes on the treble side. Now I had to map each key on the keyboard to a row and column of the accordion. Direction doesn't matter here, since z will correspond to both 01-01-push and 01-01-pull . keyMap export const keyMap = { z : { row : 1 , column : 1 } , x : { row : 1 , column : 2 } , c : { row : 1 , column : 3 } , v : { row : 1 , column : 4 } , b : { row : 1 , column : 5 } , n : { row : 1 , column : 6 } , m : { row : 1 , column : 7 } , ',' : { row : 1 , column : 8 } , '.' : { row : 1 , column : 9 } , '/' : { row : 1 , column : 10 } , a : { row : 2 , column : 1 } , s : { row : 2 , column : 2 } , d : { row : 2 , column : 3 } , f : { row : 2 , column : 4 } , g : { row : 2 , column : 5 } , // ...etc } Now I have all the keys from z to / , a to ' , and w to [ mapped out. Very auspicious that the computer keyboard and accordion keyboard are so similar. As you might recall, I have an event listener on the entire page listening for the key press event. Any key press event that happens will go through this function. First, it has to check both lowercase and uppercase keys in case shift or caps lock are pressed, otherwise the keys won't work at all. Then, if you're pressing the button to toggle the bellows (which I made q ), it has to handle that separately. Otherwise, it will check the keyMap, and if one exists, it will find the corresponding id by checking the current direction and getting the row and column from the keymap. handleKeyPressNote let activeButtonIdMap = { } function handleKeyPressNote ( e ) { const key = ` ${ e . key } ` . toLowerCase ( ) || e . key // handle caps lock if ( key === toggleBellows ) { handleToggleBellows ( 'push' ) return } const buttonMapData = keyMap [ key ] if ( buttonMapData ) { const { row , column } = buttonMapData const id = ` ${ row } - ${ column } - ${ direction } ` if ( ! activeButtonIdMap [ id ] ) { const { oscillator } = playTone ( id ) activeButtonIdMap [ id ] = { oscillator , ... buttonIdMap [ id ] } } } } The way I'm tracking each currently playing note is putting them in the activeButtonIdMap object. In Svelte, in order to update a variable you just reassign it, so instead of what you might do in React with useState : React const [ activeButtonIdMap , setActiveButtonIdMap ] = useState ( { } ) const App = ( ) => { function handleKeyPressNote ( ) { setActiveButtonIdMap ( newButtonIdMap ) } } You have to declare it as a let and reassign it: Svelte let activeButtonIdMap = { } function handleKeyPressNote ( ) { activeButtonIdMap = newButtonIdMap } This was mostly easier, except when all I wanted to do was delete a key from the object. As far as I could tell, Svelte only rerenders when a variable is reassigned, so just mutating some value within wasn't enough and I had to clone it, mutate it, the reassign it. This is what I did in the handleKeyUpNote function. handleKeyUpNote function handleKeyUpNote ( e ) { const key = ` ${ e . key } ` . toLowerCase ( ) || e . key if ( key === toggleBellows ) { handleToggleBellows ( 'pull' ) return } const buttonMapData = keyMap [ key ] if ( buttonMapData ) { const { row , column } = buttonMapData const id = ` ${ row } - ${ column } - ${ direction } ` if ( activeButtonIdMap [ id ] ) { const { oscillator } = activeButtonIdMap [ id ] oscillator . stop ( ) // Must be reassigned in Svelte const newActiveButtonIdMap = { ... activeButtonIdMap } delete newActiveButtonIdMap [ id ] activeButtonIdMap = newActiveButtonIdMap } } } Maybe someone knows a better way to delete an item from an object in Svelte, but this is the best I could come up with. I also made a few functions that will play through the scales, starting with F , B♭ and E♭ being the main diatonic keys of the accordion, but there are more options. To play the scales, I simply looped through all the ids that correspond to the notes in the scale and used a JavaScript \"sleep\" command of 600ms between each note."
            },
            {
                "chunk_id": "e81f62ed93a5ec91bd7fdd8945d04e49-chunk-3",
                "heading": "Conclusion",
                "text": "I hope you liked my write-up for the Keyboard Accordion app! Of course, the full code is available on GitHub . There are a few little bugs here and there, such as if you use keyboard shortcuts while also pressing other keys, it will get stuck on a note forever. I'm sure if you try to find more bugs you'll be able to. This app was fun to make, I learned how to use both Svelte and the Web Audio API, and it's helping me and hopefully some other afficionados to understand the squeezebox a little better. Maybe it'll inspire you to build your own little online instrument, or make an app for one of your hobbies. The best part about coding is that you can make anything you want!"
            }
        ]
    },
    {
        "id": "b70a1a6f10a34bfcb225b02c0d2902f9",
        "url": "https://www.taniarascia.com/",
        "title": "Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "b70a1a6f10a34bfcb225b02c0d2902f9-chunk-1",
                "heading": "Hey, I'm Tania",
                "text": "I'm a software developer who makes open-source projects and writes about code and life. On this site, you can check out all the technical articles I've written, read some of my personal notes , or learn more about me ."
            },
            {
                "chunk_id": "b70a1a6f10a34bfcb225b02c0d2902f9-chunk-2",
                "heading": "Highlights",
                "text": "November 17, 2021 An Introduction to GraphQL June 23, 2021 How to Structure and Organize a React Application October 15, 2020 How to Set Up webpack 5 From Scratch September 10, 2020 The Event Loop, Callbacks, Promises, and Async/Await in JavaScript March 09, 2020 How to Use Redux and React February 17, 2020 How to Set up a Mac for Development December 02, 2019 A Complete Guide to CSS Concepts and Fundamentals May 16, 2019 How to Use Vue, the JavaScript Framework February 11, 2019 Everything I Know as a Software Developer Without a Degree (2019) August 20, 2018 How to Use React, the JavaScript Framework October 12, 2017 Design for Developers: Specific Steps to Improve Your Website Design January 09, 2017 How to Use the Command Line in Linux and macOS"
            },
            {
                "chunk_id": "b70a1a6f10a34bfcb225b02c0d2902f9-chunk-3",
                "heading": "ProjectsAll Projects",
                "text": "2022 Keyboard Accordion Play the accordion with your keyboard! Article Demo 2020 TakeNote A free, open source notes app for the web. Article Demo 2019 Chip8 A retro game emulator for three platforms. Article Demo 2021 Sokoban A web-based Sokoban implementation. Article Demo 2015 New Moon The optimized dark theme for web development. Demo 2019 Snek A terminal-based Snake implementation. Article Demo"
            }
        ]
    },
    {
        "id": "1ee7387261efac19dc5533e3e0019eec",
        "url": "https://www.taniarascia.com/getting-started-with-react/",
        "title": "How to Use React, the JavaScript Framework | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "1ee7387261efac19dc5533e3e0019eec-chunk-1",
                "heading": "What is React?",
                "text": "React is a JavaScript library - one of the most popular ones, with over 100,000 stars on GitHub . React is not a framework (unlike Angular, which is more opinionated). React is an open-source project created by Facebook. React is used to build user interfaces (UI) on the front end. React is the view layer of an MVC application (Model View Controller) One of the most important aspects of React is the fact that you can create components , which are like custom, reusable HTML elements, to quickly and efficiently build user interfaces. React also streamlines how data is stored and handled, using state and props . We'll go over all of this and more throughout the article, so let's get started."
            },
            {
                "chunk_id": "1ee7387261efac19dc5533e3e0019eec-chunk-2",
                "heading": "Setup and Installation",
                "text": "There are a few ways to set up React, and I'll show you two so you get a good idea of how it works. This first method is not a popular way to set up React and is not how we'll be doing the rest of our tutorial, but it will be familiar and easy to understand if you've ever used a library like jQuery, and it's the least scary way to get started if you're not familiar with Webpack, Babel, and Node.js. Let's start by making a basic index.html file. We're going to load in three CDNs in the head - React, React DOM, and Babel. We're also going to make a div with an id called root , and finally we'll create a script tag where your custom code will live. index.html <! DOCTYPE html > < html > < head > < meta charset = \" utf-8 \" /> < title > Hello React! </ title > < script src = \" https://unpkg.com/react@^16/umd/react.production.min.js \" > </ script > < script src = \" https://unpkg.com/react-dom@16.13.0/umd/react-dom.production.min.js \" > </ script > < script src = \" https://unpkg.com/babel-standalone@6.26.0/babel.js \" > </ script > </ head > < body > < div id = \" root \" > </ div > < script type = \" text/babel \" > // React code will go here </ script > </ body > </ html > I'm loading in the latest stable versions of the libraries as of the time of this writing. React - the React top level API React DOM - adds DOM-specific methods Babel - a JavaScript compiler that lets us use ES6+ in old browsers The entry point for our app will be the root div element, which is named by convention. You'll also notice the text/babel script type, which is mandatory for using Babel. Now, let's write our first code block of React. We're going to use ES6 classes to create a React component called App . index.html class App extends React . Component { //... } Now we'll add the render() method, the only required method in a class component, which is used to render DOM nodes. index.html class App extends React . Component { render ( ) { return ( //... ) ; } } Inside the return , we're going to put what looks like a simple HTML element. Note that we're not returning a string here, so don't use quotes around the element. This is called JSX , and we'll learn more about it soon. index.html class App extends React . Component { render ( ) { return < h1 > Hello world! </ h1 > } } Finally, we're going to use the React DOM render() method to render the App class we created into the root div in our HTML. index.html ReactDOM . render ( < App /> , document . getElementById ( 'root' ) ) Here is the full code for our index.html . index.html <! DOCTYPE html > < html > < head > < meta charset = \" utf-8 \" /> < title > Hello React! </ title > < script src = \" https://unpkg.com/react@16/umd/react.development.js \" > </ script > < script src = \" https://unpkg.com/react-dom@16/umd/react-dom.development.js \" > </ script > < script src = \" https://unpkg.com/babel-standalone@6.26.0/babel.js \" > </ script > </ head > < body > < div id = \" root \" > </ div > < script type = \" text/babel \" > class App extends React . Component { render ( ) { return < h1 > Hello world ! < / h1 > } } ReactDOM . render ( < App / > , document . getElementById ( 'root' ) ) </ script > </ body > </ html > Now if you view your index.html in the browser, you'll see the h1 tag we created rendered to the DOM.  Cool! Now that you've done this, you can see that React isn't so insanely scary to get started with. It's just some JavaScript helper libraries that we can load into our HTML. We've done this for demonstration purposes, but from here out we're going to use another method: Create React App. The method I just used of loading JavaScript libraries into a static HTML page and rendering the React and Babel on the fly is not very efficient, and is hard to maintain. Fortunately, Facebook has created Create React App , an environment that comes pre-configured with everything you need to build a React app. It will create a live development server, use Webpack to automatically compile React, JSX, and ES6, auto-prefix CSS files, and use ESLint to test and warn about mistakes in the code. To set up create-react-app , run the following code in your terminal, one directory up from where you want the project to live. npx create-react-app react-tutorial Once that finishes installing, move to the newly created directory and start the project. cd react-tutorial && npm start Once you run this command, a new window will popup at localhost:3000 with your new React app.  If you look into the project structure, you'll see a /public and /src directory, along with the regular node_modules , .gitignore , README.md , and package.json . In /public , our important file is index.html , which is very similar to the static index.html file we made earlier - just a root div. This time, no libraries or scripts are being loaded in. The /src directory will contain all our React code. To see how the environment automatically compiles and updates your React code, find the line that looks like this in /src/App.js : To get started, edit `src/App.js` and save to reload. And replace it with any other text. Once you save the file, you'll notice localhost:3000 compiles and refreshes with the new data. Go ahead and delete all the files out of the /src directory, and we'll create our own boilerplate file without any bloat. We'll just keep index.css and index.js . For index.css , I just copy-and-pasted the contents of Primitive CSS into the file. If you want, you can use Bootstrap or whatever CSS framework you want, or nothing at all. I just find it easier to work with. Now in index.js , we're importing React, ReactDOM, and the CSS file. src/index.js import React from 'react' import ReactDOM from 'react-dom' import './index.css' Let's create our App component again. Before, we just had an <h1> , but now I'm adding in a div element with a class as well. You'll notice that we use className instead of class . This is our first hint that the code being written here is JavaScript, and not actually HTML. src/index.js class App extends React . Component { render ( ) { return ( < div className = \" App \" > < h1 > Hello, React! </ h1 > </ div > ) } } Finally, we'll render the App to the root as before. src/index.js ReactDOM . render ( < App /> , document . getElementById ( 'root' ) ) Here's our full index.js . This time, we're loading the Component as a property of React, so we no longer need to extend React.Component . src/index.js import React , { Component } from 'react' import ReactDOM from 'react-dom' import './index.css' class App extends Component { render ( ) { return ( < div className = \" App \" > < h1 > Hello, React! </ h1 > </ div > ) } } ReactDOM . render ( < App /> , document . getElementById ( 'root' ) ) If you go back to localhost:3000 , you'll see \"Hello, React!\" just like before. We have the beginnings of a React app now. There is an extension called React Developer Tools that will make your life much easier when working with React. Download React DevTools for Chrome , or whatever browser you prefer to work on. After you install it, when you open DevTools, you'll see a tab for React. Click on it, and you'll be able to inspect components as they're written. You can still go to the Elements tab to see the actual DOM output. It may not seem like that much of a deal now, but as the app gets more complicated, it will become increasingly necessary to use.  Now we have all the tools and setup we need to actually begin working with React."
            },
            {
                "chunk_id": "1ee7387261efac19dc5533e3e0019eec-chunk-3",
                "heading": "Create React App",
                "text": "The method I just used of loading JavaScript libraries into a static HTML page and rendering the React and Babel on the fly is not very efficient, and is hard to maintain. Fortunately, Facebook has created Create React App , an environment that comes pre-configured with everything you need to build a React app. It will create a live development server, use Webpack to automatically compile React, JSX, and ES6, auto-prefix CSS files, and use ESLint to test and warn about mistakes in the code. To set up create-react-app , run the following code in your terminal, one directory up from where you want the project to live. npx create-react-app react-tutorial Once that finishes installing, move to the newly created directory and start the project. cd react-tutorial && npm start Once you run this command, a new window will popup at localhost:3000 with your new React app.  If you look into the project structure, you'll see a /public and /src directory, along with the regular node_modules , .gitignore , README.md , and package.json . In /public , our important file is index.html , which is very similar to the static index.html file we made earlier - just a root div. This time, no libraries or scripts are being loaded in. The /src directory will contain all our React code. To see how the environment automatically compiles and updates your React code, find the line that looks like this in /src/App.js : To get started, edit `src/App.js` and save to reload. And replace it with any other text. Once you save the file, you'll notice localhost:3000 compiles and refreshes with the new data. Go ahead and delete all the files out of the /src directory, and we'll create our own boilerplate file without any bloat. We'll just keep index.css and index.js . For index.css , I just copy-and-pasted the contents of Primitive CSS into the file. If you want, you can use Bootstrap or whatever CSS framework you want, or nothing at all. I just find it easier to work with. Now in index.js , we're importing React, ReactDOM, and the CSS file. src/index.js import React from 'react' import ReactDOM from 'react-dom' import './index.css' Let's create our App component again. Before, we just had an <h1> , but now I'm adding in a div element with a class as well. You'll notice that we use className instead of class . This is our first hint that the code being written here is JavaScript, and not actually HTML. src/index.js class App extends React . Component { render ( ) { return ( < div className = \" App \" > < h1 > Hello, React! </ h1 > </ div > ) } } Finally, we'll render the App to the root as before. src/index.js ReactDOM . render ( < App /> , document . getElementById ( 'root' ) ) Here's our full index.js . This time, we're loading the Component as a property of React, so we no longer need to extend React.Component . src/index.js import React , { Component } from 'react' import ReactDOM from 'react-dom' import './index.css' class App extends Component { render ( ) { return ( < div className = \" App \" > < h1 > Hello, React! </ h1 > </ div > ) } } ReactDOM . render ( < App /> , document . getElementById ( 'root' ) ) If you go back to localhost:3000 , you'll see \"Hello, React!\" just like before. We have the beginnings of a React app now."
            },
            {
                "chunk_id": "1ee7387261efac19dc5533e3e0019eec-chunk-4",
                "heading": "Pulling in API Data",
                "text": "One very common usage of React is pulling in data from an API. If you're not familiar with what an API is or how to connect to one, I would recommend reading How to Connect to an API with JavaScript , which will walk you through what APIs are and how to use them with vanilla JavaScript. As a little test, we can create a new Api.js file, and create a new App in there. A public API we can test with is the Wikipedia API , and I have a URL endpoint right here for a random* search. You can go to that link to see the API - and make sure you have JSONView installed on your browser. We're going to use JavaScript's built-in Fetch to gather the data from that URL endpoint and display it. You can switch between the app we created and this test file by just changing the URL in index.js - import App from './Api'; . I'm not going to explain this code line-by-line, as we've already learned about creating a component, rendering, and mapping through a state array. The new aspect to this code is componentDidMount() , a React lifecycle method. Lifecycle is the order in which methods are called in React. Mounting refers to an item being inserted into the DOM. When we pull in API data, we want to use componentDidMount , because we want to make sure the component has rendered to the DOM before we bring in the data. In the below snippet, you'll see how we bring in data from the Wikipedia API, and display it on the page Api.js import React , { Component } from 'react' class App extends Component { state = { data : [ ] , } // Code is invoked after the component is mounted/inserted into the DOM tree. componentDidMount ( ) { const url = 'https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*' fetch ( url ) . then ( ( result ) => result . json ( ) ) . then ( ( result ) => { this . setState ( { data : result , } ) } ) } render ( ) { const { data } = this . state const result = data . map ( ( entry , index ) => { return < li key = { index } > { entry } </ li > } ) return < ul > { result } </ ul > } } export default App Once you save and run this file in the local server, you'll see the Wikipedia API data displayed in the DOM.  There are other lifecycle methods, but going over them will be beyond the scope of this article. You can read more about React components here . *Wikipedia search choice may not be random. It might be an article that I spearheaded back in 2005."
            },
            {
                "chunk_id": "1ee7387261efac19dc5533e3e0019eec-chunk-5",
                "heading": "Building and Deploying a React App",
                "text": "Everything we've done so far has been in a development environment. We've been compiling, hot-reloading, and updating on the fly. For production, we're going to want to have static files loading in - none of the source code. We can do this by making a build and deploying it. Now, if you just want to compile all the React code and place it in the root of a directory somewhere, all you need to do is run the following line: npm run build This will create a build folder which will contain your app. Put the contents of that folder anywhere, and you're done! We can also take it a step further, and have npm deploy for us. We're going to build to GitHub pages, so you'll already have to be familiar with Git and getting your code up on GitHub. Make sure you've exited out of your local React environment, so the code isn't currently running. First, we're going to add a homepage field to package.json , that has the URL we want our app to live on. package.json \"homepage\" : \"https://taniarascia.github.io/react-tutorial\" , We'll also add these two lines to the scripts property. \"scripts\" : { // ... \"predeploy\" : \"npm run build\" , \"deploy\" : \"gh-pages -d build\" } In your project, you'll add gh-pages to the devDependencies. npm install --save-dev gh-pages We'll create the build , which will have all the compiled, static files. npm run build Finally, we'll deploy to gh-pages . npm run deploy And we're done! The app is now available live at https://taniarascia.github.io/react-tutorial ."
            },
            {
                "chunk_id": "1ee7387261efac19dc5533e3e0019eec-chunk-6",
                "heading": "Conclusion",
                "text": "This article should have given you a good introduction to React, simple and class components, state, props, working with form data, pulling data in from an API, and deploying an app. There is much more to learn and do with React, but I hope you feel confident delving in and playing around with React yourself now. View Source on GitHub View Project Please let me know if anything was unclear, or if there's anything else you'd like to see in this or a subsequent article."
            }
        ]
    },
    {
        "id": "dd3ad369ed3d2a98a7955cdba3e4eb39",
        "url": "https://www.taniarascia.com/redux-react-guide/",
        "title": "How to Use Redux and React | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "dd3ad369ed3d2a98a7955cdba3e4eb39-chunk-1",
                "heading": "Connecting Redux to React Components",
                "text": "Since the demo app I've created uses React Router to have a few routes - a dashboard, a listing of all posts, and an individual posts page, I'll bring React Router in now. I'll just bring in the dashboard and all posts listing for this demo. App.js import React from 'react' import { BrowserRouter as Router , Switch , Route , Redirect } from 'react-router-dom' import DashboardPage from './pages/DashboardPage' import PostsPage from './pages/PostsPage' const App = ( ) => { return ( < Router > < Switch > < Route exact path = \" / \" component = { DashboardPage } /> < Route exact path = \" /posts \" component = { PostsPage } /> < Redirect to = \" / \" /> </ Switch > </ Router > ) } export default App We can create the dashboard page, which is just a regular React component. pages/DashboardPage.js import React from 'react' import { Link } from 'react-router-dom' const DashboardPage = ( ) => ( < section > < h1 > Dashboard </ h1 > < p > This is the dashboard. </ p > < Link to = \" /posts \" className = \" button \" > View Posts </ Link > </ section > ) export default DashboardPage For each post, let's make a Post component that will display the title and an excerpt of the text of the article. Make a Post.js in the components subdirectory. components/Post.js import React from 'react' export const Post = ( { post } ) => ( < article className = \" post-excerpt \" > < h2 > { post . title } </ h2 > < p > { post . body . substring ( 0 , 100 ) } </ p > </ article > ) Now the interesting part comes in for the posts page - bringing Redux into React. To do this we'll use connect from react-redux . First, we'll just make a regular component for the page. pages/PostsPage.js import React from 'react' const PostsPage = ( ) => { return ( < section > < h1 > Posts </ h1 > </ section > ) } export default PostsPage Then we'll bring in connect . The connect function is a higher-order function that connects the Redux store to a React component. We'll pass a parameter called mapStateToProps to connect . This aptly named function will take any state from the Redux store and pass it to the props of the React component. We'll bring in loading , posts , and hasErrors from the Redux postsReducer . pages/PostsPage.js import React from 'react' import { connect } from 'react-redux' // Redux state is now in the props of the component const PostsPage = ( { loading , posts , hasErrors } ) => { return ( < section > < h1 > Posts </ h1 > </ section > ) } // Map Redux state to React component props const mapStateToProps = ( state ) => ( { loading : state . posts . loading , posts : state . posts . posts , hasErrors : state . posts . hasErrors , } ) // Connect Redux to React export default connect ( mapStateToProps ) ( PostsPage ) Finally, we'll bring in the asynchronous fetchPosts from the actions, which is the action that combines the whole lifecycle of fetching all posts into one. Using useEffect from React, we'll dispatch fetchPosts when the component mounts. dispatch will automatically be available on a connected component. pages/PostsPage.js import React , { useEffect } from 'react' import { connect } from 'react-redux' // Bring in the asynchronous fetchPosts action import { fetchPosts } from '../actions/postsActions' const PostsPage = ( { dispatch , loading , posts , hasErrors } ) => { useEffect ( ( ) => { dispatch ( fetchPosts ( ) ) } , [ dispatch ] ) return ( < section > < h1 > Posts </ h1 > </ section > ) } const mapStateToProps = ( state ) => ( { loading : state . posts . loading , posts : state . posts . posts , hasErrors : state . posts . hasErrors , } ) export default connect ( mapStateToProps ) ( PostsPage ) All that's left to do at this point is display all three possible states of the page - whether it's loading, has an error, or successfully retrieved the posts from the API. pages/PostsPage.js import React , { useEffect } from 'react' import { connect } from 'react-redux' import { fetchPosts } from '../actions/postsActions' import { Post } from '../components/Post' const PostsPage = ( { dispatch , loading , posts , hasErrors } ) => { useEffect ( ( ) => { dispatch ( fetchPosts ( ) ) } , [ dispatch ] ) // Show loading, error, or success state const renderPosts = ( ) => { if ( loading ) return < p > Loading posts... </ p > if ( hasErrors ) return < p > Unable to display posts. </ p > return posts . map ( ( post ) => < Post key = { post . id } post = { post } /> ) } return ( < section > < h1 > Posts </ h1 > { renderPosts ( ) } </ section > ) } const mapStateToProps = ( state ) => ( { loading : state . posts . loading , posts : state . posts . posts , hasErrors : state . posts . hasErrors , } ) export default connect ( mapStateToProps ) ( PostsPage ) And that's all - we now have a connected component, and are bringing in data from an API to our Redux store. Using Redux DevTools, we can see each action as it happens, and the changes (diff) after each state change."
            },
            {
                "chunk_id": "dd3ad369ed3d2a98a7955cdba3e4eb39-chunk-2",
                "heading": "Conclusion",
                "text": "We did it! If you followed along with me through this whole tutorial, you should have a really good feel for Redux now, both the old-fashioned way and using Redux Toolkit to simplify things. To summarize, Redux allows us to easily manage global state in a React application. We can access and update the state from anywhere, and easily debug the entire state of an application with Redux Devtools. You can place most of the state of your application in Redux, but certain areas of an app, such as forms as they are being updated, still make sense to keep in the React component state itself until the form is officially submitted. I hope you enjoyed this article! It was a lot of work to put together two complete demo applications and run through the whole thing here, and the article ran pretty long, but hopefully this is your one-stop shop for learning all beginner and intermediate Redux concepts. Please let me know what you think and share the article if it helped you out, and donations are always welcome!"
            }
        ]
    },
    {
        "id": "cc20743f3308d483f4dfe04a7944851c",
        "url": "https://www.taniarascia.com/sokoban-game",
        "title": "Writing a Sokoban Puzzle Game in JavaScript | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "cc20743f3308d483f4dfe04a7944851c-chunk-1",
                "heading": "Writing a Sokoban Puzzle Game in JavaScript",
                "text": ""
            },
            {
                "chunk_id": "cc20743f3308d483f4dfe04a7944851c-chunk-2",
                "heading": "Map and entities",
                "text": "The first thing I did was build out the map, which is a two-dimensional array where each row corresponds to a y coordinate and each column corresponds to an x coordinate. const map = [ [ 'y0 x0' , 'y0 x1' , 'y0 x2' , 'y0 x3' ] , [ 'y1 x0' , 'y1 x1' , 'y1 x2' , 'y1 x3' ] , // ...etc ] So accessing map[0][0] would be y0 x0 and map[1][3] would be y1 x3 . From there, it's easy to make a map based on an existing Sokoban level where each coordinate is an entity in the game - terrain, player, etc. Entities const EMPTY = 'empty' const WALL = 'wall' const BLOCK = 'block' const SUCCESS_BLOCK = 'success_block' const VOID = 'void' const PLAYER = 'player' Map const map = [ [ EMPTY , EMPTY , WALL , WALL , WALL , WALL , WALL , EMPTY ] , [ WALL , WALL , WALL , EMPTY , EMPTY , EMPTY , WALL , EMPTY ] , [ WALL , VOID , PLAYER , BLOCK , EMPTY , EMPTY , WALL , EMPTY ] , // ...etc With that data, I can map each entity to a color and render it to the screen on an HTML5 canvas. So now I have a map that looks right, but it doesn't do anything yet."
            },
            {
                "chunk_id": "cc20743f3308d483f4dfe04a7944851c-chunk-3",
                "heading": "Game logic",
                "text": "There aren't too many actions to worry about. The player can move orthogonally - up, down, left, and right - and there are a few things to consider: The PLAYER and BLOCK cannot move through a WALL The PLAYER and BLOCK can move through an EMPTY space or a VOID space (storage location) The player can push a BLOCK A BLOCK becomes a SUCCESS_BLOCK when it's on top of a VOID . And that's literally it. I also coded one more thing in that's not part of the original game, but it made sense to me: A BLOCK can push all other BLOCK pieces When the player pushes a block that's next to other blocks, all the blocks will move until it collides with a wall. In order to do this I just need to know the entities adjacent to the player, and the entities adjacent to a block if a player is pushing a block. If a player is pushing multiple blocks, I'll have to recursively count how many there are."
            },
            {
                "chunk_id": "cc20743f3308d483f4dfe04a7944851c-chunk-4",
                "heading": "Moving",
                "text": "Therefore, the first thing we need to do any time a change happens is find the player's current coordinates, and what type of entity is above, below, to the left, and to the right of them. function findPlayerCoords ( ) { const y = map . findIndex ( row => row . includes ( PLAYER ) ) const x = map [ y ] . indexOf ( PLAYER ) return { x , y , above : map [ y - 1 ] [ x ] , below : map [ y + 1 ] [ x ] , sideLeft : map [ y ] [ x - 1 ] , sideRight : map [ y ] [ x + 1 ] , } } Now that you have the player and adjacent coordinates, every action will be a move action. If the player is trying to move through a traversible cell (empty or void), just move the player. If the player is trying to push a block, move the player and block. If the adjacent unit is a wall, do nothing. function move ( playerCoords , direction ) { if ( isTraversible ( adjacentCell [ direction ] ) ) { movePlayer ( playerCoords , direction ) } if ( isBlock ( adjacentCell [ direction ] ) ) { movePlayerAndBlocks ( playerCoords , direction ) } } Using the initial game state, you can figure out what should be there. As long as I pass the direction to the function, I can set the new coordinates - adding or removing a y will be up and down, adding or removing an x will be left or right. function movePlayer ( playerCoords , direction ) { // Replace previous spot with initial board state (void or empty) map [ playerCoords . y ] [ playerCoords . x ] = isVoid ( levelOneMap [ playerCoords . y ] [ playerCoords . x ] ) ? VOID : EMPTY // Move player map [ getY ( playerCoords . y , direction , 1 ) ] [ getX ( playerCoords . x , direction , 1 ) ] = PLAYER } If the player is moving a block, I wrote a little recursive function to check how many blocks are in a row, and once it has that count, it will check what the adjacent entity is, move the block if possible, and move the player if the block moved. function countBlocks ( blockCount , y , x , direction , board ) { if ( isBlock ( board [ y ] [ x ] ) ) { blockCount ++ return countBlocks ( blockCount , getY ( y , direction ) , getX ( x , direction ) , direction , board ) } else { return blockCount } } const blocksInARow = countBlocks ( 1 , newBlockY , newBlockX , direction , map ) Then, if the block can be moved, it will just either move it or move it and transform it into a success block, if it's over a storage location, followed by moving the player. map [ newBoxY ] [ newBoxX ] = isVoid ( levelOneMap [ newBoxY ] [ newBoxX ] ) ? SUCCESS_BLOCK : BLOCK movePlayer ( playerCoords , direction )"
            },
            {
                "chunk_id": "cc20743f3308d483f4dfe04a7944851c-chunk-5",
                "heading": "Rendering",
                "text": "It's easy to keep track of the entire game in a 2D array and render the update game to the screen with each movement. The game tick is incredibly simple - any time a keydown event happens for up, down, left, right (or w, a, s, d for intense gamers) the move() function will be called, which uses the player index and adjacent cell types to determine what the new, updated state of the game should be. After the change, the render() function is called, which just paints the entire board with the updated state. const sokoban = new Sokoban ( ) sokoban . render ( ) // re-render document . addEventListener ( 'keydown' , event => { const playerCoords = sokoban . findPlayerCoords ( ) switch ( event . key ) { case keys . up : case keys . w : sokoban . move ( playerCoords , directions . up ) break case keys . down : case keys . s : sokoban . move ( playerCoords , directions . down ) break case keys . left : case keys . a : sokoban . move ( playerCoords , directions . left ) break case keys . right : case keys . d : sokoban . move ( playerCoords , directions . right ) break default : } sokoban . render ( ) } ) The render function just maps through each coordinate and creates a rectangle or circle with the right color. function render ( ) { map . forEach ( ( row , y ) => { row . forEach ( ( cell , x ) => { paintCell ( context , cell , x , y ) } ) } ) } Basically all rendering in the HTML canvas made a path for the outline (stroke), and a path for the inside (fill). Since one pixel per coordinate would be a pretty tiny game, I multiplied each value by a multipler , which was 75 pixels in this case. function paintCell ( context , cell , x , y ) { // Create the fill context . beginPath ( ) context . rect ( x * multiplier + 5 , y * multiplier + 5 , multiplier - 10 , multiplier - 10 ) context . fillStyle = colors [ cell ] . fill\n  context . fill ( ) // Create the outline context . beginPath ( ) context . rect ( x * multiplier + 5 , y * multiplier + 5 , multiplier - 10 , multiplier - 10 ) context . lineWidth = 10 context . strokeStyle = colors [ cell ] . stroke\n  context . stroke ( ) } The render function also checks for a win condition (all storage locations are now success blocks) and shows \"A winner is you!\" if you win."
            },
            {
                "chunk_id": "cc20743f3308d483f4dfe04a7944851c-chunk-6",
                "heading": "Conclusion",
                "text": "This was a fun little game to make. I organized the files like this: Constants for entity data, map data, mapping colors to entities, and key data. Utility functions for checking what type of entity exists at a particular coordinate, and determining what the new coordinates should be for the player. Sokoban class for maintaining game state, logic, and rendering. Script for initializing the instance of the app and handling key events. I found it easier to code than to solve. 😆 Hope you enjoyed reading about this and feel inspired to make your own little games and projects."
            },
            {
                "chunk_id": "cc20743f3308d483f4dfe04a7944851c-chunk-7",
                "heading": "About me",
                "text": "Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts."
            },
            {
                "chunk_id": "cc20743f3308d483f4dfe04a7944851c-chunk-8",
                "heading": "Post Details",
                "text": "Published: July 26, 2021 Category: Technical"
            },
            {
                "chunk_id": "cc20743f3308d483f4dfe04a7944851c-chunk-9",
                "heading": "Tags",
                "text": "javascript games Newsletter Subscribe to the Newsletter"
            },
            {
                "chunk_id": "cc20743f3308d483f4dfe04a7944851c-chunk-10",
                "heading": "Newsletter",
                "text": "Subscribe to the Newsletter"
            },
            {
                "chunk_id": "cc20743f3308d483f4dfe04a7944851c-chunk-11",
                "heading": "Comments",
                "text": ""
            }
        ]
    },
    {
        "id": "867e5d97c4c3f57e3b19c19548a1c97f",
        "url": "https://www.taniarascia.com/keyboard-shortcut-hook-react/",
        "title": "Creating a Keyboard Shortcut Hook in React (Deep Dive) | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "867e5d97c4c3f57e3b19c19548a1c97f-chunk-1",
                "heading": "Creating a Keyboard Shortcut Hook in React (Deep Dive)",
                "text": ""
            },
            {
                "chunk_id": "867e5d97c4c3f57e3b19c19548a1c97f-chunk-2",
                "heading": "Setting Up",
                "text": "I don't usually like using a contrived example like count, setCount and just increasing state, but in this case we just care about making sure the shortcut is working and accessing state properly, so I decided to make it simple. Here's a simple React app with a button that increments and displays the count, and an input. App.js import { useState } from 'react' export default function App ( ) { const [ count , setCount ] = useState ( 0 ) return ( < div > < button type = \"button\" onClick = { ( ) => setCount ( ( prev ) => prev + 1 ) } > { ` Count: ${ count } ` } < / button > < button type = \"button\" onClick = { ( ) => setCount ( 0 ) } > Clear < / button > < input type = \"text\" placeholder = \"Type a shortcut key\" / > < / div > ) } The front end buttons aren't overly necessary, they just help with debugging. The input will come in handy later."
            },
            {
                "chunk_id": "867e5d97c4c3f57e3b19c19548a1c97f-chunk-3",
                "heading": "useShortcutHook",
                "text": "We're going to want to be able to implement the useShortcut hook like this: App.js import { useState } from 'react' import { useShortcut } from './useShortcut' export default function App ( ) { const [ count , setCount ] = useState ( 0 ) useShortcut ( 'a' , ( ) => { setCount ( ( prev ) => prev + 1 ) } ) return < div > { /* ... */ } < / div > } So let's make the simplest version of the hook. You'll make a useShortcut function that takes two parameters: shortcut - the string representing a key, key combination, or key sequence (currently just a key) callback - the function that should be called when the correct key is pressed It consists of a handleKeyDown function that checks if the correct key is being pressed by comparing shortcut to event.key , and runs the passed in function if so. A useEffect adds the event listener on the keydown event, and removes it if dismounted. There's no dependency array in the useEffect , so it will always fire. useShortcut.js import { useEffect } from 'react' export const useShortcut = ( shortcut , callback ) => { const handleKeyDown = ( event ) => { // Single key shortcuts (e.g. pressing a) if ( shortcut === event . key ) { return callback ( event ) } } useEffect ( ( ) => { window . addEventListener ( 'keydown' , handleKeyDown ) return ( ) => { window . removeEventListener ( 'keydown' , handleKeyDown ) } } ) } Now if you press A , the count will increment. This will work every time, because the useEffect has no dependency array, and fires on every render. This is pretty inefficient, though. If I go to the Performance Monitor in Chrome DevTools ( Command + Shfit + P in DevTools, and search for \"Performance Monitor\") I can see 20 or more event listeners being added with every time the shortcut is run. In an attempt to reduce how often this is firing, I can use useCallback on the handleKeyDown function and pass it into the useEffect array. useShortcut.js import { useCallback , useEffect } from 'react' export const useShortcut = ( shortcut , callback ) => { const handleKeyDown = useCallback ( ( event ) => { // Single key shortcuts (e.g. pressing a) if ( shortcut === event . key ) { return callback ( event ) } } , [ ] ) useEffect ( ( ) => { window . addEventListener ( 'keydown' , handleKeyDown ) return ( ) => { window . removeEventListener ( 'keydown' , handleKeyDown ) } } , [ handleKeyDown ] ) } I've wrapped handleKeyDown in useCallback in an attempt to memoize the function, and passed that memoized function into the dependency array of the useEffect . I can see in the Performance Monitor that this only adds one event listener per keydown event now instead of 30. This seems good at first - the shortcut is still working, and the Performance Monitor is looking better. However, this works because the setCount function is using a callback as the value ( setCount(prev => prev + 1) ), instead of updating the value directly ( setCount(count + 1) ) ensuring the previous count value is always up to date. In the real world, we can't always guarantee that every bit of state we're working with is a setState callback. If I make a shortcut that accesses the direct state value of count and attempts to modify it, like so: useShortcut ( 'w' , ( ) => { setCount ( count + count ) } ) The W shortcut will not be guaranteed to be accessing the latest count state. You can see what happens in the below example if you press A a few times to increase the count, then press W to add count + count If you increase the count to something like 3 , you'd expect running the W shortcut to return 6 . However, what you'll end up with is 0 . That's because the initial state of count gets passed into the function, and there's nothing in the useCallback dependency array, so it never updates with the new value. One way to solve this is to ensure that the function passed in is always wrapped in a useCallback . const handleW = useCallback ( ( ) => setCount ( count + count ) , [ count ] ) useShortcut ( 'w' , handleW ) Then add callback to the dependency array of handleKeyDown in useShotcut . However, I'm not a fan of that approach because it requires that the user to always remember to memoize their function and pass in any state that might update. It should be easier to less prone to potential bugs to use a hook. I discovered this interesting pattern to create a ref to hold the callback, and use useLayoutEffect to to update the ref. I've used useLayoutEffect in the past for scrolling purposes, (for example, to make sure a reload of a page always starts at the top) but this is the first time I've seen it use in this way with refs. useShortcut.js import { useRef , useLayoutEffect , useCallback , useEffect } from 'react' export const useShortcut = ( shortcut , callback ) => { const callbackRef = useRef ( callback ) useLayoutEffect ( ( ) => { callbackRef . current = callback } ) const handleKeyDown = useCallback ( ( event ) => { if ( shortcut === event . key ) { return callbackRef . current ( event ) } } , [ ] ) useEffect ( ( ) => { window . addEventListener ( 'keydown' , handleKeyDown ) return ( ) => { window . removeEventListener ( 'keydown' , handleKeyDown ) } } , [ handleKeyDown ] ) } Using that code, I can see that it uses the correct and most up to date count state without forcing the consumer of the useShortcut hook to pass the callback in with useEffect . I can also see in the Performance Monitor that it's not adding tons of event listeners the way the original code was. I'd be interested to hear more opinions on this pattern, because it does seem to add a lot of boilerplate, but it does seem to make the hook more optimized and easier to use. Now that everything is working properly for a single keypress, we can move on to adding a combination shortcuts."
            },
            {
                "chunk_id": "867e5d97c4c3f57e3b19c19548a1c97f-chunk-4",
                "heading": "Performance Optimization",
                "text": "This will work every time, because the useEffect has no dependency array, and fires on every render. This is pretty inefficient, though. If I go to the Performance Monitor in Chrome DevTools ( Command + Shfit + P in DevTools, and search for \"Performance Monitor\") I can see 20 or more event listeners being added with every time the shortcut is run. In an attempt to reduce how often this is firing, I can use useCallback on the handleKeyDown function and pass it into the useEffect array. useShortcut.js import { useCallback , useEffect } from 'react' export const useShortcut = ( shortcut , callback ) => { const handleKeyDown = useCallback ( ( event ) => { // Single key shortcuts (e.g. pressing a) if ( shortcut === event . key ) { return callback ( event ) } } , [ ] ) useEffect ( ( ) => { window . addEventListener ( 'keydown' , handleKeyDown ) return ( ) => { window . removeEventListener ( 'keydown' , handleKeyDown ) } } , [ handleKeyDown ] ) } I've wrapped handleKeyDown in useCallback in an attempt to memoize the function, and passed that memoized function into the dependency array of the useEffect . I can see in the Performance Monitor that this only adds one event listener per keydown event now instead of 30."
            },
            {
                "chunk_id": "867e5d97c4c3f57e3b19c19548a1c97f-chunk-5",
                "heading": "Holding Onto Stale State",
                "text": "This seems good at first - the shortcut is still working, and the Performance Monitor is looking better. However, this works because the setCount function is using a callback as the value ( setCount(prev => prev + 1) ), instead of updating the value directly ( setCount(count + 1) ) ensuring the previous count value is always up to date. In the real world, we can't always guarantee that every bit of state we're working with is a setState callback. If I make a shortcut that accesses the direct state value of count and attempts to modify it, like so: useShortcut ( 'w' , ( ) => { setCount ( count + count ) } ) The W shortcut will not be guaranteed to be accessing the latest count state. You can see what happens in the below example if you press A a few times to increase the count, then press W to add count + count If you increase the count to something like 3 , you'd expect running the W shortcut to return 6 . However, what you'll end up with is 0 . That's because the initial state of count gets passed into the function, and there's nothing in the useCallback dependency array, so it never updates with the new value."
            },
            {
                "chunk_id": "867e5d97c4c3f57e3b19c19548a1c97f-chunk-6",
                "heading": "Accessing Current State",
                "text": "One way to solve this is to ensure that the function passed in is always wrapped in a useCallback . const handleW = useCallback ( ( ) => setCount ( count + count ) , [ count ] ) useShortcut ( 'w' , handleW ) Then add callback to the dependency array of handleKeyDown in useShotcut . However, I'm not a fan of that approach because it requires that the user to always remember to memoize their function and pass in any state that might update. It should be easier to less prone to potential bugs to use a hook. I discovered this interesting pattern to create a ref to hold the callback, and use useLayoutEffect to to update the ref. I've used useLayoutEffect in the past for scrolling purposes, (for example, to make sure a reload of a page always starts at the top) but this is the first time I've seen it use in this way with refs. useShortcut.js import { useRef , useLayoutEffect , useCallback , useEffect } from 'react' export const useShortcut = ( shortcut , callback ) => { const callbackRef = useRef ( callback ) useLayoutEffect ( ( ) => { callbackRef . current = callback } ) const handleKeyDown = useCallback ( ( event ) => { if ( shortcut === event . key ) { return callbackRef . current ( event ) } } , [ ] ) useEffect ( ( ) => { window . addEventListener ( 'keydown' , handleKeyDown ) return ( ) => { window . removeEventListener ( 'keydown' , handleKeyDown ) } } , [ handleKeyDown ] ) } Using that code, I can see that it uses the correct and most up to date count state without forcing the consumer of the useShortcut hook to pass the callback in with useEffect . I can also see in the Performance Monitor that it's not adding tons of event listeners the way the original code was. I'd be interested to hear more opinions on this pattern, because it does seem to add a lot of boilerplate, but it does seem to make the hook more optimized and easier to use. Now that everything is working properly for a single keypress, we can move on to adding a combination shortcuts."
            },
            {
                "chunk_id": "867e5d97c4c3f57e3b19c19548a1c97f-chunk-7",
                "heading": "Combination Keyboard Shortcuts with Modifiers",
                "text": "So far, using if (shortcut === event.key) , we can make sure the key being pressed matches the shortcut and run it accordingly. But keyboard shortcuts are usually combinations, using the modifiers at the bottom left and right of the keyboard. There are four, and they each have an event property associated with them being pressed: ^ Control - event.ctrlKey ⌥ Option or Alt - event.altKey ⌘ Command or Windows - event.metaKey ⇧ Shift - event.shiftKey If you're pressing Shift, event.shiftKey will return true . We want to enable the use of one or multiple modifiers with a key, like so: useShortcut ( 'Control+C' , ( ) => { setCount ( count + count ) } ) useShortcut ( 'Command+Shift+X' , ( ) => { setCount ( count + count ) } ) I decided to solve this by making an Object there the string of the modifier is mapped to the modifier event. If your shortcut has a + , and any of those modifiers are pressed along with the key, run the shortcut. useShortcut.js import { useRef , useLayoutEffect , useCallback , useEffect } from 'react' export const useShortcut = ( shortcut , callback ) => { const callbackRef = useRef ( callback ) useLayoutEffect ( ( ) => { callbackRef . current = callback } ) const handleKeyDown = useCallback ( ( event ) => { const modifierMap = { Control : event . ctrlKey , Alt : event . altKey , Command : event . metaKey , Shift : event . shiftKey , } if ( shortcut . includes ( '+' ) ) { const keyArray = shortcut . split ( '+' ) // If the first key is a modifier, handle combinations if ( Object . keys ( modifierMap ) . includes ( keyArray [ 0 ] ) ) { const finalKey = keyArray . pop ( ) // Run handler if the modifier(s) + key have both been pressed if ( keyArray . every ( ( k ) => modifierMap [ k ] ) && finalKey === event . key ) { return callbackRef . current ( event ) } } } if ( shortcut === event . key ) { return callbackRef . current ( event ) } } , [ ] ) // ... } Now pressing one or more modifiers along with the key will run the shortcut."
            },
            {
                "chunk_id": "867e5d97c4c3f57e3b19c19548a1c97f-chunk-8",
                "heading": "Shortcuts and Text Inputs",
                "text": "Something that will come up while creating shortcuts in the real world is deciding when and where you want them to be available. If you have a shortcut that saves the current page you're working on, maybe by pressing S , you don't want that shortcut to run while the user is typing into a text box. I've added an options property to the useShortcut hook, with a default setting of disableTextInputs: true . If the shortcut you're creating is explicitly for use while typing, you can disable it. I've disabled it for HTMLTextAreaElement , HTMLInputElement where type = text , and contenteditable elements. useShortcut.js export const useShortcut = ( shortcut , callback , options = { disableTextInputs : true } ) => { const callbackRef = useRef ( callback ) useLayoutEffect ( ( ) => { callbackRef . current = callback } ) const handleKeyDown = useCallback ( ( event ) => { const isTextInput = event . target instanceof HTMLTextAreaElement || ( event . target instanceof HTMLInputElement && ( ! event . target . type || event . target . type === 'text' ) ) || event . target . isContentEditable // Don't enable shortcuts in inputs unless explicitly declared if ( options . disableTextInputs && isTextInput ) { return event . stopPropagation ( ) } // ... } , [ ] ) // ... } There are other ways to handle this, like checking if tagName is \"INPUT\" , but I prefer ensuring it's a text-type input, because you might have a shortcut that works with other types of inputs, so I think this is a good solution."
            },
            {
                "chunk_id": "867e5d97c4c3f57e3b19c19548a1c97f-chunk-9",
                "heading": "Key Sequences",
                "text": "The last thing I want to handle is a sequence of characters, such as A + B + C all pressed in succession. For my example, I used the Konami Code, which is \"up up down down left right left right b a\" pressed in succession. const handleKonamiCode = ( ) => { /* ... */ } useShortcut ( ` ArrowUp+ArrowUp+\nArrowDown+ArrowDown+\nArrowLeft+ArrowRight+\nArrowLeft+ArrowRight+\nb+a ` , handleKonamiCode ) In order to set this up, I'm going to create some state to hold onto any matching combination of keys, called keyCombo . After splitting the shortcut string by + and putting it into an array, you can just keep adding each matching key to the keyCombo array. If it's the last one in the sequence, run the callback. If it doesn't match the sequence, clear the queue. useShortcut.js import { useCallback , useRef , useLayoutEffect , useState , useEffect , } from 'react' export const useShortcut = ( shortcut , callback , options = { disableTextInputs : true } ) => { const callbackRef = useRef ( callback ) const [ keyCombo , setKeyCombo ] = useState ( [ ] ) // ... const handleKeyDown = useCallback ( ( event ) => { // ... // Handle combined modifier key shortcuts (e.g. pressing Control + D) if ( shortcut . includes ( '+' ) ) { const keyArray = shortcut . split ( '+' ) // If the first key is a modifier, handle combinations if ( Object . keys ( modifierMap ) . includes ( keyArray [ 0 ] ) ) { const finalKey = keyArray . pop ( ) // Run handler if the modifier(s) + key have both been pressed if ( keyArray . every ( ( k ) => modifierMap [ k ] ) && finalKey === event . key ) { return callbackRef . current ( event ) } } else { // If the shortcut doesn't begin with a modifier, it's a sequence if ( keyArray [ keyCombo . length ] === event . key ) { // Handle final key in the sequence if ( keyArray [ keyArray . length - 1 ] === event . key && keyCombo . length === keyArray . length - 1 ) { // Run handler if the sequence is complete, then reset it callbackRef . current ( event ) return setKeyCombo ( [ ] ) } // Add to the sequence return setKeyCombo ( ( prevCombo ) => [ ... prevCombo , event . key ] ) } if ( keyCombo . length > 0 ) { // Reset key combo if it doesn't match the sequence return setKeyCombo ( [ ] ) } } } // ... } , [ keyCombo . length ] ) // ... } , [ handleKeyDown ] ) } I also added the keyCombo length to the dependency array of handleKeyPress since the function depends on it. Pressing a combination of keys will run the shortcut now."
            },
            {
                "chunk_id": "867e5d97c4c3f57e3b19c19548a1c97f-chunk-10",
                "heading": "Conclusion",
                "text": "Here is our completed useShortcut hook: (I also added a line to ignore if event.repeat is true, meaning a key is just being held down) useShortcut.js import { useCallback , useRef , useLayoutEffect , useState , useEffect } from 'react' export const useShortcut = ( shortcut , callback , options = { disableTextInputs : true } ) => { const callbackRef = useRef ( callback ) const [ keyCombo , setKeyCombo ] = useState ( [ ] ) useLayoutEffect ( ( ) => { callbackRef . current = callback } ) const handleKeyDown = useCallback ( ( event ) => { const isTextInput = event . target instanceof HTMLTextAreaElement || ( event . target instanceof HTMLInputElement && ( ! event . target . type || event . target . type === 'text' ) ) || event . target . isContentEditable const modifierMap = { Control : event . ctrlKey , Alt : event . altKey , Command : event . metaKey , Shift : event . shiftKey , } // Cancel shortcut if key is being held down if ( event . repeat ) { return null } // Don't enable shortcuts in inputs unless explicitly declared if ( options . disableTextInputs && isTextInput ) { return event . stopPropagation ( ) } // Handle combined modifier key shortcuts (e.g. pressing Control + D) if ( shortcut . includes ( '+' ) ) { const keyArray = shortcut . split ( '+' ) // If the first key is a modifier, handle combinations if ( Object . keys ( modifierMap ) . includes ( keyArray [ 0 ] ) ) { const finalKey = keyArray . pop ( ) // Run handler if the modifier(s) + key have both been pressed if ( keyArray . every ( ( k ) => modifierMap [ k ] ) && finalKey === event . key ) { return callbackRef . current ( event ) } } else { // If the shortcut doesn't begin with a modifier, it's a sequence if ( keyArray [ keyCombo . length ] === event . key ) { // Handle final key in the sequence if ( keyArray [ keyArray . length - 1 ] === event . key && keyCombo . length === keyArray . length - 1 ) { // Run handler if the sequence is complete, then reset it callbackRef . current ( event ) return setKeyCombo ( [ ] ) } // Add to the sequence return setKeyCombo ( ( prevCombo ) => [ ... prevCombo , event . key ] ) } if ( keyCombo . length > 0 ) { // Reset key combo if it doesn't match the sequence return setKeyCombo ( [ ] ) } } } // Single key shortcuts (e.g. pressing D) if ( shortcut === event . key ) { return callbackRef . current ( event ) } } , [ keyCombo . length ] ) useEffect ( ( ) => { window . addEventListener ( 'keydown' , handleKeyDown ) return ( ) => { window . removeEventListener ( 'keydown' , handleKeyDown ) } } , [ handleKeyDown ] ) } Once again, you can play around with the demo or the sandbox . There is still more that can be done here - for example, handling an Alt key can be tricky becuause pressing Alt + C will actually produce \"ç\" (not \"C\") as both the output and event.key value. Some overlapping shortcuts on the same page might have issues. Overall, this should give you a good idea of how to work with a custom hook, avoid bugs (like holding onto stale state), improve caching (with useCallback ) and set up various types of keyboard events. Thanks for reading! I'd be happy to hear any additional thoughts about shortcuts and hooks you might have."
            },
            {
                "chunk_id": "867e5d97c4c3f57e3b19c19548a1c97f-chunk-11",
                "heading": "About me",
                "text": "Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts."
            },
            {
                "chunk_id": "867e5d97c4c3f57e3b19c19548a1c97f-chunk-12",
                "heading": "Post Details",
                "text": "Published: October 19, 2024 Category: Technical"
            },
            {
                "chunk_id": "867e5d97c4c3f57e3b19c19548a1c97f-chunk-13",
                "heading": "Tags",
                "text": "javascript react hooks caching tutorial Newsletter Subscribe to the Newsletter"
            },
            {
                "chunk_id": "867e5d97c4c3f57e3b19c19548a1c97f-chunk-14",
                "heading": "Newsletter",
                "text": "Subscribe to the Newsletter"
            },
            {
                "chunk_id": "867e5d97c4c3f57e3b19c19548a1c97f-chunk-15",
                "heading": "Comments",
                "text": ""
            }
        ]
    },
    {
        "id": "37f365327ce2245ab571cd543e7083a9",
        "url": "https://www.taniarascia.com/horizontal-scroll-fixed-headers-table/",
        "title": "Tables with Fixed Headers and Horizontal Scroll | Tania Rascia's Personal Website",
        "author": "",
        "publication_date": "2024-10-23",
        "tags": [],
        "source": "www.taniarascia.com",
        "language": "en",
        "chunks": [
            {
                "chunk_id": "37f365327ce2245ab571cd543e7083a9-chunk-1",
                "heading": "Tables with Fixed Headers and Horizontal Scroll",
                "text": ""
            },
            {
                "chunk_id": "37f365327ce2245ab571cd543e7083a9-chunk-2",
                "heading": "Horizontal Scroll",
                "text": "When working with a table that has a lot of columns, you can ensure everything remains visible by adding horizontal scroll. You can do this by wrapping the table in a div that has overflow-x set to auto . style.css .table-outer { overflow-x : auto ; } index.html < div class = \" table-outer \" > < table > < thead > /* table columns go here */ </ thead > < tbody > /* table data goes here... */ </ tbody > </ table > </ div > This works great initially, but there can be some problems. If you have a lot of rows, as you scroll down, you can't see which table headers are associated with each cell If your table rows are selectable and you have bulk actions in the header, you won't see them as you scroll down If there is more content on the page below the table, you won't see the headers as you scroll down"
            },
            {
                "chunk_id": "37f365327ce2245ab571cd543e7083a9-chunk-3",
                "heading": "Sticky Headers",
                "text": "You might think that adding position: sticky to the thead of the table would ensure that as you scroll down, the headers will remain fixed to the top of the screen until you scroll past the table. style.css .table-outer { overflow-x : auto ; } thead { position : sticky ; z-index : 2 ; top : 0 ; } But as you can see in this example , the table headers are not fixed to the top of the screen as you scroll down. Since you're now using an overflow container, position: sticky will only apply to the overflow container, and if you're not scrolling within it, it will just be ignored."
            },
            {
                "chunk_id": "37f365327ce2245ab571cd543e7083a9-chunk-4",
                "heading": "Solution",
                "text": "The solution was to add a height to the table wrapper. In this example, I chose to make the height 100% of the viewport window, minus 100px to enable the page title and footer to always be visible. This results in a full-screen datagrid type view. style.css .table-outer { overflow-x : auto ; height : calc ( 100vh - 100px ) ; /* full height minus header and footer */ } header { height : 60px ; } footer { height : 40px ; } As you can see here, the page title and footer are always visible, and the table is both horizontally and vertically scrollable. This table has fixed headers and also the first row (ID) is fixed to the left of the screen as you scroll horizontally."
            },
            {
                "chunk_id": "37f365327ce2245ab571cd543e7083a9-chunk-5",
                "heading": "Conclusion",
                "text": "And that's all! Hopefully this helps anyone that is struggling to figure out a good solution for their scrollable table."
            },
            {
                "chunk_id": "37f365327ce2245ab571cd543e7083a9-chunk-6",
                "heading": "About me",
                "text": "Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts."
            },
            {
                "chunk_id": "37f365327ce2245ab571cd543e7083a9-chunk-7",
                "heading": "Post Details",
                "text": "Published: October 09, 2024 Category: Technical"
            },
            {
                "chunk_id": "37f365327ce2245ab571cd543e7083a9-chunk-8",
                "heading": "Tags",
                "text": "html css design javascript tables Newsletter Subscribe to the Newsletter"
            },
            {
                "chunk_id": "37f365327ce2245ab571cd543e7083a9-chunk-9",
                "heading": "Newsletter",
                "text": "Subscribe to the Newsletter"
            },
            {
                "chunk_id": "37f365327ce2245ab571cd543e7083a9-chunk-10",
                "heading": "Comments",
                "text": ""
            }
        ]
    }
]