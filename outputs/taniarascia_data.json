[
    {
        "url": "https://www.taniarascia.com",
        "title": "Tania Rascia's Personal Website",
        "headings": [
            "Hey, I'm Tania",
            "ArticlesAll Articles",
            "Creating a Keyboard Shortcut Hook in React (Deep Dive)",
            "Tables with Fixed Headers and Horizontal Scroll",
            "How to Use WebSockets in a Redux Application",
            "Understanding the GraphQL Type System",
            "Testing API Calls With React Testing Library and Jest",
            "NotesAll Notes",
            "2023 into 2024",
            "2022 into 2023",
            "The Lore of Animorphs (an Ode)",
            "Tending to My Digital Garden",
            "Memories of Josh",
            "Highlights",
            "ProjectsAll Projects"
        ],
        "last_updated": "2024-10-23T01:36:10.588263",
        "content": [
            "Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me Hey, I'm Tania I'm a software developer who makes open-source projects and writes about code and life. On this site, you can check out all the technical articles I've written, read some of my personal notes , or learn more about me . Articles All Articles Creating a Keyboard Shortcut Hook in React (Deep Dive) October 2024 New! Tables with Fixed Headers and Horizontal Scroll October 2024 New! How to Use WebSockets in a Redux Application February 2023 Understanding the GraphQL Type System January 2023 Testing API Calls With React Testing Library and Jest December 2022 Notes All Notes 2023 into 2024 January 2024 2022 into 2023 January 2023 The Lore of Animorphs (an Ode) December 2022 Tending to My Digital Garden December 2022 Memories of Josh August 2022 Highlights November 17, 2021 An Introduction to GraphQL June 23, 2021 How to Structure and Organize a React Application October 15, 2020 How to Set Up webpack 5 From Scratch September 10, 2020 The Event Loop, Callbacks, Promises, and Async/Await in JavaScript March 09, 2020 How to Use Redux and React February 17, 2020 How to Set up a Mac for Development December 02, 2019 A Complete Guide to CSS Concepts and Fundamentals May 16, 2019 How to Use Vue, the JavaScript Framework February 11, 2019 Everything I Know as a Software Developer Without a Degree (2019) August 20, 2018 How to Use React, the JavaScript Framework October 12, 2017 Design for Developers: Specific Steps to Improve Your Website Design January 09, 2017 How to Use the Command Line in Linux and macOS Projects All Projects 2022 Keyboard Accordion Play the accordion with your keyboard! Article Demo 2020 TakeNote A free, open source notes app for the web. Article Demo 2019 Chip8 A retro game emulator for three platforms. Article Demo 2021 Sokoban A web-based Sokoban implementation. Article Demo 2015 New Moon The optimized dark theme for web development. Demo 2019 Snek A terminal-based Snake implementation. Article Demo Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/asynchronous-javascript-event-loop-callbacks-promises-async-await/",
        "title": "The Event Loop, Callbacks, Promises, and Async/Await in JavaScript | Tania Rascia's Personal Website",
        "headings": [
            "The Event Loop, Callbacks, Promises, and Async/Await in JavaScript",
            "Introduction",
            "Contents",
            "The Event Loop",
            "Stack",
            "Queue",
            "Callback Functions",
            "Nested Callbacks and the Pyramid of Doom",
            "Promises",
            "Creating a Promise",
            "Consuming a Promise",
            "Error Handling",
            "Using the Fetch API with Promises",
            "Async Functions withasync/await",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:10.659086",
        "content": [
            "The Event Loop, Callbacks, Promises, and Async/Await in JavaScript | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me The Event Loop, Callbacks, Promises, and Async/Await in JavaScript This article was originally written for DigitalOcean . Introduction In the early days of the internet, websites often consisted of static data in an HTML page . But now that web applications have become more interactive and dynamic, it has become increasingly necessary to do intensive operations like make external network requests to retrieve API data. To handle these operations in JavaScript, a developer must use asynchronous programming techniques. Since JavaScript is a single-threaded programming language with a synchronous execution model that proccesses one operation after another, it can only process one statement at a time. However, an action like requesting data from an API can take an indeterminate amount of time, depending on the size of data being requested, the speed of the network connection, and other factors. If API calls were performed in a synchronous manner, the browser would not be able to handle any user input, like scrolling or clicking a button, until that operation completes. This is known as blocking . In order to prevent blocking behavior, the browser environment has many Web APIs that JavaScript can access that are asynchronous , meaning they can run in parallel with other operations instead of sequentially. This is useful because it allows the user to continue using the browser normally while the asynchronous operations are being processed. As a JavaScript developer, you need to know how to work with asynchronous Web APIs and handle the response or error of those operations. In this article, you will learn about the event loop, the original way of dealing with asynchronous behavior through callbacks, the updated ECMAScript 2015 addition of promises, and the modern practice of using async / await . Note : This article is focused on client-side JavaScript in the browser environment. The same concepts are generally true in the Node.js environment, however Node.js uses its own C++ APIs as opposed to the browser's Web APIs . For more information on asynchronous programming in Node.js, check out How To Write Asynchronous Code in Node.js . Contents The Event Loop Callback Functions Nested Callbacks and the Pyramid of Doom Promises Async Functions with async / await The Event Loop This section will explain how JavaScript handles asynchronous code with the event loop. It will first run through a demonstration of the event loop at work, and will then explain the two elements of the event loop: the stack and the queue. JavaScript code that does not use any asynchronous Web APIs will execute in a synchronous manner\u2014one at a time, sequentially. This is demonstrated by this example code that calls three functions that each print a number to the console : // Define three example functions function first ( ) { console . log ( 1 ) } function second ( ) { console . log ( 2 ) } function third ( ) { console . log ( 3 ) } In this code, you define three functions that print numbers with console.log() . Next, write calls to the functions: // Execute the functions first ( ) second ( ) third ( ) The output will be based on the order the functions were called: first() , second() , then third() . 1",
            "2 Whether you set the timeout to zero seconds or five minutes will make no difference\u2014the console.log called by asynchronous code will execute after the synchronous top-level functions. This happens because the JavaScript host environment, in this case the browser, uses a concept called the event loop to handle concurrency, or parallel events. Since JavaScript can only execute one statement at a time, it needs the event loop to be informed of when to execute which specific statement. The event loop handles this with the concepts of a stack and a queue . Stack The stack , or call stack, holds the state of what function is currently running. If you're unfamiliar with the concept of a stack, you can imagine it as an array with \"Last in, first out\" (LIFO) properties, meaning you can only add or remove items from the end of the stack. JavaScript will run the current frame (or function call in a specific environment) in the stack, then remove it and move on to the next one. For the example only containing synchronous code, the browser handles the execution in the following order: Add first() to the stack, run first() which logs 1 to the console, remove first() from the stack. Add second() to the stack, run second() which logs 2 to the console, remove second() from the stack. Add third() to the stack, run third() which logs 3 to the console, remove third() from the stack. The second example with setTimout looks like this: Add first() to the stack, run first() which logs 1 to the console, remove first() from the stack. Add second() to the stack, run second() . Add setTimeout() to the stack, run the setTimeout() Web API which starts a timer and adds the anonymous function to the queue , remove setTimeout() from the stack. Remove second() from the stack. Add third() to the stack, run third() which logs 3 to the console, remove third() from the stack. The event loop checks the queue for any pending messages and finds the anonymous function from setTimeout() , adds the function to the stack which logs 2 to the console, then removes it from the stack. Using setTimeout , an asynchronous Web API, introduces the concept of the queue , which this tutorial will cover next. Queue The queue , also referred to as message queue or task queue, is a waiting area for functions. Whenever the call stack is empty, the event loop will check the queue for any waiting messages, starting from the oldest message. Once it finds one, it will add it to the stack, which will execute the function in the message. In the setTimeout example, the anonymous function runs immediately after the rest of the top-level execution, since the timer was set to 0 seconds. It's important to remember that the timer does not mean that the code will execute in exactly 0 seconds or whatever the specified time is, but that it will add the anonymous function to the queue in that amount of time. This queue system exists because if the timer were to add the anonymous function directly to the stack when the timer finishes, it would interrupt whatever function is currently running, which could have unintended and unpredictable effects. Note : There is also another queue called the job queue or microtask queue that handles promises. Microtasks like promises are handled at a higher priority than macrotasks like setTimeout . Now you know how the event loop uses the stack and queue to handle the execution order of code. The next task is to figure out how to control the order of execution in your code. To do this, you will first learn about the original way to ensure asynchrnous code is handled correctly by the event loop: callback functions. Callback Functions In the setTimeout example, the function with the timeout ran after everything in the main top-level execution context. But if you wanted to ensure one of the functions, like the third function, ran after the timeout, then you would have to use asynchronous coding methods. The timeout here can represent an asynchronous API call that contains data. You want to work with the data from the API call, but you have to make sure the data is returned first. The original solution to dealing with this problem is using callback functions . Callback functions do not have special syntax; they are just a function that has been passed as an argument to another function. The function that takes another function as an argument is called a higher-order function . According to this definition, any function can become a callback function if it is passed as an argument. Callbacks are not asynchronous by nature, but can be used for asynchronous purposes. Here is a syntactic code example of a higher-order function and a callback: // A function function fn ( ) { console . log ( 'Just a function' ) } // A function that takes another function as an argument function higherOrderFunction ( callback ) { // When you call a function that is passed as an argument, it is referred to as a callback callback ( ) } // Passing a function higherOrderFunction ( fn ) In this code, you define a function fn , define a function higherOrderFunction that takes a function callback as an argument, and pass fn as a callback to higherOrderFunction . Running this code will give the following: Just a function Let's go back to the first , second , and third functions with setTimeout . This is what you have so far: function first ( ) { console . log ( 1 ) } function second ( ) { setTimeout ( ( ) => { console . log ( 2 ) } , 0 ) } function third ( ) { console . log ( 3 ) } The task is to get the third function to always delay execution until after the asynchronous action in the second function has completed. This is where callbacks come in. Instead of executing first , second , and third at the top-level of execution, you will pass the third function as an argument to second . The second function will execute the callback after the asynchronous action has completed. Here are the three functions with a callback applied: // Define three functions function first ( ) { console . log ( 1 ) } function second ( callback ) { setTimeout ( ( ) => { console . log ( 2 ) // Execute the callback function callback ( ) } , 0 ) } function third ( ) { console . log ( 3 ) } Now, execute first and second , then pass third as an argument to second : first ( ) second ( third ) After running this code block, you will receive the following output: 1",
            "3 First 1 will print, and after the timer completes (in this case, zero seconds, but you can change it to any amount) it will print 2 then 3 . By passing a function as a callback, you've successfully delayed execution of the function until the asynchronous Web API ( setTimeout ) completes. The key takeaway here is that callback functions are not asynchronous\u2014 setTimeout is the asynchronous Web API responsible for handling asynchronous tasks. The callback just allows you to be informed of when an asynchronous task has completed and handles the success or failure of the task. Now that you have learned how to use callbacks to handle asynchronous tasks, the next section explains the problems of nesting too many callbacks and creating a \"pyramid of doom.\" Nested Callbacks and the Pyramid of Doom Callback functions are an effective way to ensure delayed execution of a function until another one completes and returns with data. However, due to the nested nature of callbacks, code can end up getting messy if you have a lot of consecutive asynchronous requests that rely on each other. This was a big frustration for JavaScript developers early on, and as a result code containing nested callbacks is often called the \"pyramid of doom\" or \"callback hell.\" Here is a demonstration of nested callbacks: function pyramidOfDoom ( ) { setTimeout ( ( ) => { console . log ( 1 ) setTimeout ( ( ) => { console . log ( 2 ) setTimeout ( ( ) => { console . log ( 3 ) } , 500 ) } , 2000 ) } , 1000 ) } In this code, each new setTimeout is nested inside a higher order function, creating a pyramid shape of deeper and deeper callbacks. Running this code would give the following: 1",
            "at <anonymous>:9:13 This way of handling asynchronous code is difficult to follow. As a result, the concept of promises was introduced in ES6. This is the focus of the next section. Promises A promise represents the completion of an asynchronous function. It is an object that might return a value in the future. It accomplishes the same basic goal as a callback function, but with many additional features and a more readable syntax. As a JavaScript developer, you will likely spend more time consuming promises than creating them, as it is usually asynchronous Web APIs that return a promise for the developer to consume. This tutorial will show you how to do both. Creating a Promise You can initialize a promise with the new Promise syntax, and you must initialize it with a function. The function that gets passed to a promise has resolve and reject parameters. The resolve and reject functions handle the success and failure of an operation, respectively. Write the following line to declare a promise: // Initialize a promise const promise = new Promise ( ( resolve , reject ) => { } ) If you inspect the initialized promise in this state with your web browser's console, you will find it has a pending status and undefined value: __proto__: Promise",
            "[[PromiseValue]]: \"We did it!\" As stated in the beginning of this section, a promise is an object that may return a value. After being successfully fulfilled, the value goes from undefined to being populated with data. A promise can have three possible states: pending, fulfilled, and rejected. Pending - Initial state before being resolved or rejected Fulfilled - Successful operation, promise has resolved Rejected - Failed operation, promise has rejected After being fulfilled or rejected, a promise is settled. Now that you have an idea of how promises are created, let's look at how a developer may consume these promises. Consuming a Promise The promise in the last section has fulfilled with a value, but you also want to be able to access the value. Promises have a method called then that will run after a promise reaches resolve in the code. then will return the promise's value as a parameter. This is how you would return and log the value of the example promise: promise . then ( ( response ) => { console . log ( response ) } ) The promise you created had a [[PromiseValue]] of We did it! . This value is what will be passed into the anonymous function as response : We did it! So far, the example you created did not involve an asynchronous Web API\u2014it only explained how to create, resolve, and consume a native JavaScript promise. Using setTimeout , you can test out an asynchronous request. The following code simulates data returned from an asynchronous request as a promise: const promise = new Promise ( ( resolve , reject ) => { setTimeout ( ( ) => resolve ( 'Resolving an asynchronous request!' ) , 2000 ) } ) // Log the result promise . then ( ( response ) => { console . log ( response ) } ) Using the then syntax ensures that the response will be logged only when the setTimeout operation is completed after 2000 milliseconds. All this is done without nesting callbacks. Now after two seconds, it will resolve the promise value and it will get logged in then : Resolving an asynchronous request! Promises can also be chained to pass along data to more than one asynchronous operation. If a value is returned in then , another then can be added that will fulfill with the return value of the previous then : // Chain a promise promise . then ( ( firstResponse ) => { // Return a new value for the next then return firstResponse + ' And chaining!' } ) . then ( ( secondResponse ) => { console . log ( secondResponse ) } ) The fulfilled response in the second then will log the return value: Resolving an asynchronous request! And chaining! Since then can be chained, it allows the consumption of promises to appear more synchronous than callbacks, as they do not need to be nested. This will allow for more readable code that can be maintained and verified easier. Error Handling So far, you have only handled a promise with a successful resolve , which puts the promise in a fulfilled state. But frequently with an asynchronous request you also have to handle an error\u2014if the API is down, or a malformed or unauthorized request is sent. A promise should be able to handle both cases. In this section, you will create a function to test out both the success and error case of creating and consuming a promise. This getUsers function will pass a flag to a promise, and return the promise. function getUsers ( onSuccess ) { return new Promise ( ( resolve , reject ) => { setTimeout ( ( ) => { // Handle resolve and reject in the asynchronous API } , 1000 ) } ) } Set up the code so that if onSuccess is true , the timeout will fulfill with some data. If false , the function will reject with an error. function getUsers ( onSuccess ) { return new Promise ( ( resolve , reject ) => { setTimeout ( ( ) => { // Handle resolve and reject in the asynchronous API if ( onSuccess ) { resolve ( [ { id : 1 , name : 'Jerry' } , { id : 2 , name : 'Elaine' } , { id : 3 , name : 'George' } , ] ) } else { reject ( 'Failed to fetch data!' ) } } , 1000 ) } ) } For the successful result, you return JavaScript objects that represent sample user data. In order to handle the error, you will use the catch instance method. This will give you a failure callback with the error as a parameter. Run the getUser command with onSuccess set to false , using the then method for the success case and the catch method for the error: // Run the getUsers function with the false flag to trigger an error getUsers ( false ) . then ( ( response ) => { console . log ( response ) } ) . catch ( ( error ) => { console . error ( error ) } ) Since the error was triggered, the then will be skipped and the catch will handle the error: Failed to fetch data! If you switch the flag and resolve instead, the catch will be ignored, and the data will return instead. // Run the getUsers function with the true flag to resolve successfully getUsers ( true ) . then ( ( response ) => { console . log ( response ) } ) . catch ( ( error ) => { console . error ( error ) } ) This will yield the user data: (3) [{\u2026}, {\u2026}, {\u2026}]",
            "3: {id: 3, name: \"George\"} For reference, here is a table with the handler methods on Promise objects: Method Description then() Handles a resolve . Returns a promise, and calls onFulfilled function asynchronously catch() Handles a reject . Returns a promise, and calls onRejected function asynchronously finally() Called when a promise is settled. Returns a promise, and calls onFinally function asynchronously Promises can be confusing, both for new developers and experienced programmers that have never worked in an asynchronous environment before. However as mentioned, it is much more common to consume promises than create them. Usually, a browser's Web API or third party library will be providing the promise, and you only need to consume it. In the final promise section, this tutorial will cite a common use case of a Web API that returns promises: the Fetch API . Using the Fetch API with Promises One of the most useful and frequently used Web APIs that returns a promise is the Fetch API, which allows you to make an asynchronous resource request over a network. fetch is a two-part process, and therefore requires chaining then . This example demonstrates hitting the GitHub API to fetch a user's data, while also handling any potential error: // Fetch a user from the GitHub API fetch ( 'https://api.github.com/users/octocat' ) . then ( ( response ) => { return response . json ( ) } ) . then ( ( data ) => { console . log ( data ) } ) . catch ( ( error ) => { console . error ( error ) } ) The fetch request is sent to the https://api.github.com/users/octocat URL, which asynchronously waits for a response. The first then passes the response to an anonymous function that formats the response as JSON data , then passes the JSON to a second then that logs the data to the console. The catch statement logs any error to the console. Running this code will yield the following: login: \"octocat\",",
            "... This is the data requested from https://api.github.com/users/octocat , rendered in JSON format. This section of the tutorial showed that promises incorporate a lot of improvements for dealing with asynchronous code. But, while using then to handle asynchronous actions is easier to follow than the pyramid of callbacks, some developers still prefer a synchronous format of writing asynchronous code. To address this need, ECMAScript 2016 (ES7) introduced async functions and the await keyword to make working with promises easier. Async Functions with async / await An async function allows you to handle asynchronous code in a manner that appears synchronous. async functions still use promises under the hood, but have a more traditional JavaScript syntax. In this section, you will try out examples of this syntax. You can create an async function by adding the async keyword before a function: // Create an async function async function getUser ( ) { return { } } Although this function is not handling anything asynchronous yet, it behaves differently than a traditional function. If you execute the function, you'll find that it returns a promise with a [[PromiseStatus]] and [[PromiseValue]] instead of a return value. Try this out by logging a call to the getUser function: console . log ( getUser ( ) ) This will give the following: __proto__: Promise",
            "... Note : In many environments, async is necessary to use await \u2014however, some new versions of browsers and Node allow using top-level await , which allows you to bypass creating an async function to wrap the await in. Finally, since you are handling the fulfilled promise within the asynchronous function, you can also handle the error within the function. Instead of using the catch method with then , you will use the try / catch pattern to handle the exception. Add the following highlighted code: // Handling success and errors with async/await async function getUser ( ) { try { // Handle success in try const response = await fetch ( 'https://api.github.com/users/octocat' ) const data = await response . json ( ) console . log ( data ) } catch ( error ) { // Handle error in catch console . error ( error ) } } The program will now skip to the catch block if it receives an error and log that error to the console. Modern asynchronous JavaScript code is most often handled with async / await syntax, but it is important to have a working knowledge of how promises work, especially as promises are capable of additional features that cannot be handled with async / await , like combining promises with Promise.all() . Note : async / await can be reproduced by using generators combined with promises to add more flexibility to your code. To learn more, check out our Understanding Generators in JavaScript tutorial. Conclusion Because Web APIs often provide data asynchronously, learning how to handle the result of asynchronous actions is an essential part of being a JavaScript developer. In this article, you learned how the host environment uses the event loop to handle the order of execution of code with the stack and queue . You also tried out examples of three ways to handle the success or failure of an asynchronous event, with callbacks, promises, and async / await syntax. Finally, you used the Fetch Web API to handle asynchronous actions. For more information about how the browser handles parallel events, read Concurrency model and the event loop on the Mozilla Developer Network. If you'd like to learn more about JavaScript, return to our How To Code in JavaScript series. About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: September 10, 2020 Category: Technical Tags javascript fundamentals asynchronous event-loop Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/getting-started-with-react/",
        "title": "How to Use React, the JavaScript Framework | Tania Rascia's Personal Website",
        "headings": [
            "How to Use React, the JavaScript Framework",
            "What is React?",
            "Setup and Installation",
            "Static HTML File",
            "Create React App",
            "React Developer Tools",
            "JSX: JavaScript + XML",
            "Components",
            "Class Components",
            "Simple Components",
            "Props",
            "State",
            "Submitting Form Data",
            "Pulling in API Data",
            "Building and Deploying a React App",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:11.149172",
        "content": [
            "How to Use React, the JavaScript Framework | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me How to Use React, the JavaScript Framework I've been hearing about React since I first started learning JavaScript, but I'll admit I took one look at it and it scared me. I saw what looked like a bunch of HTML mixed with JavaScript and thought, isn't this what we've been trying to avoid? What's the big deal with React? Instead, I focused on just learning vanilla JavaScript and working with jQuery in a professional setting. After a few frustrated, failed attempts to get started with React, I finally started to get it, and I began to see why I might want to use React instead of vanilla JS or jQuery. I tried to condense everything I've learned into a nice introduction to share with you, so here it is. Prerequisites There are a few things you should know in advance before you start playing around with React. If you've never used JavaScript or the DOM at all before, for example, I would get more familiar with those before trying to tackle React. Here are what I consider to be React prerequisites. Basic familiarity with HTML & CSS . Basic knowledge of JavaScript and programming. Basic understanding of the DOM . Familiarity with ES6 syntax and features . Node.js and npm installed globally. Goals Learn about essential React concepts and related terms, such as Babel, Webpack, JSX, components, props, state, and lifecycle. Build a very simple React app that demonstrates the above concepts. Here's the source and a live demo of the end result. View Source on GitHub View Demo What is React? React is a JavaScript library - one of the most popular ones, with over 100,000 stars on GitHub . React is not a framework (unlike Angular, which is more opinionated). React is an open-source project created by Facebook. React is used to build user interfaces (UI) on the front end. React is the view layer of an MVC application (Model View Controller) One of the most important aspects of React is the fact that you can create components , which are like custom, reusable HTML elements, to quickly and efficiently build user interfaces. React also streamlines how data is stored and handled, using state and props . We'll go over all of this and more throughout the article, so let's get started. Setup and Installation There are a few ways to set up React, and I'll show you two so you get a good idea of how it works. Static HTML File This first method is not a popular way to set up React and is not how we'll be doing the rest of our tutorial, but it will be familiar and easy to understand if you've ever used a library like jQuery, and it's the least scary way to get started if you're not familiar with Webpack, Babel, and Node.js. Let's start by making a basic index.html file. We're going to load in three CDNs in the head - React, React DOM, and Babel. We're also going to make a div with an id called root , and finally we'll create a script tag where your custom code will live. index.html <! DOCTYPE html > < html > < head > < meta charset = \" utf-8 \" /> < title > Hello React! </ title > < script src = \" https://unpkg.com/react@^16/umd/react.production.min.js \" > </ script > < script src = \" https://unpkg.com/react-dom@16.13.0/umd/react-dom.production.min.js \" > </ script > < script src = \" https://unpkg.com/babel-standalone@6.26.0/babel.js \" > </ script > </ head > < body > < div id = \" root \" > </ div > < script type = \" text/babel \" > // React code will go here </ script > </ body > </ html > I'm loading in the latest stable versions of the libraries as of the time of this writing. React - the React top level API React DOM - adds DOM-specific methods Babel - a JavaScript compiler that lets us use ES6+ in old browsers The entry point for our app will be the root div element, which is named by convention. You'll also notice the text/babel script type, which is mandatory for using Babel. Now, let's write our first code block of React. We're going to use ES6 classes to create a React component called App . index.html class App extends React . Component { //... } Now we'll add the render() method, the only required method in a class component, which is used to render DOM nodes. index.html class App extends React . Component { render ( ) { return ( //... ) ; } } Inside the return , we're going to put what looks like a simple HTML element. Note that we're not returning a string here, so don't use quotes around the element. This is called JSX , and we'll learn more about it soon. index.html class App extends React . Component { render ( ) { return < h1 > Hello world! </ h1 > } } Finally, we're going to use the React DOM render() method to render the App class we created into the root div in our HTML. index.html ReactDOM . render ( < App /> , document . getElementById ( 'root' ) ) Here is the full code for our index.html . index.html <! DOCTYPE html > < html > < head > < meta charset = \" utf-8 \" /> < title > Hello React! </ title > < script src = \" https://unpkg.com/react@16/umd/react.development.js \" > </ script > < script src = \" https://unpkg.com/react-dom@16/umd/react-dom.development.js \" > </ script > < script src = \" https://unpkg.com/babel-standalone@6.26.0/babel.js \" > </ script > </ head > < body > < div id = \" root \" > </ div > < script type = \" text/babel \" > class App extends React . Component { render ( ) { return < h1 > Hello world ! < / h1 > } } ReactDOM . render ( < App / > , document . getElementById ( 'root' ) ) </ script > </ body > </ html > Now if you view your index.html in the browser, you'll see the h1 tag we created rendered to the DOM. Cool! Now that you've done this, you can see that React isn't so insanely scary to get started with. It's just some JavaScript helper libraries that we can load into our HTML. We've done this for demonstration purposes, but from here out we're going to use another method: Create React App. Create React App The method I just used of loading JavaScript libraries into a static HTML page and rendering the React and Babel on the fly is not very efficient, and is hard to maintain. Fortunately, Facebook has created Create React App , an environment that comes pre-configured with everything you need to build a React app. It will create a live development server, use Webpack to automatically compile React, JSX, and ES6, auto-prefix CSS files, and use ESLint to test and warn about mistakes in the code. To set up create-react-app , run the following code in your terminal, one directory up from where you want the project to live. npx create-react-app react-tutorial Once that finishes installing, move to the newly created directory and start the project. cd react-tutorial && npm start Once you run this command, a new window will popup at localhost:3000 with your new React app. Create React App is very good for getting started for beginners as well as large-scale enterprise applications, but it's not perfect for every workflow. You can also create your own Webpack setup for React. If you look into the project structure, you'll see a /public and /src directory, along with the regular node_modules , .gitignore , README.md , and package.json . In /public , our important file is index.html , which is very similar to the static index.html file we made earlier - just a root div. This time, no libraries or scripts are being loaded in. The /src directory will contain all our React code. To see how the environment automatically compiles and updates your React code, find the line that looks like this in /src/App.js : To get started, edit `src/App.js` and save to reload. And replace it with any other text. Once you save the file, you'll notice localhost:3000 compiles and refreshes with the new data. Go ahead and delete all the files out of the /src directory, and we'll create our own boilerplate file without any bloat. We'll just keep index.css and index.js . For index.css , I just copy-and-pasted the contents of Primitive CSS into the file. If you want, you can use Bootstrap or whatever CSS framework you want, or nothing at all. I just find it easier to work with. Now in index.js , we're importing React, ReactDOM, and the CSS file. src/index.js import React from 'react' import ReactDOM from 'react-dom' import './index.css' Let's create our App component again. Before, we just had an <h1> , but now I'm adding in a div element with a class as well. You'll notice that we use className instead of class . This is our first hint that the code being written here is JavaScript, and not actually HTML. src/index.js class App extends React . Component { render ( ) { return ( < div className = \" App \" > < h1 > Hello, React! </ h1 > </ div > ) } } Finally, we'll render the App to the root as before. src/index.js ReactDOM . render ( < App /> , document . getElementById ( 'root' ) ) Here's our full index.js . This time, we're loading the Component as a property of React, so we no longer need to extend React.Component . src/index.js import React , { Component } from 'react' import ReactDOM from 'react-dom' import './index.css' class App extends Component { render ( ) { return ( < div className = \" App \" > < h1 > Hello, React! </ h1 > </ div > ) } } ReactDOM . render ( < App /> , document . getElementById ( 'root' ) ) If you go back to localhost:3000 , you'll see \"Hello, React!\" just like before. We have the beginnings of a React app now. React Developer Tools There is an extension called React Developer Tools that will make your life much easier when working with React. Download React DevTools for Chrome , or whatever browser you prefer to work on. After you install it, when you open DevTools, you'll see a tab for React. Click on it, and you'll be able to inspect components as they're written. You can still go to the Elements tab to see the actual DOM output. It may not seem like that much of a deal now, but as the app gets more complicated, it will become increasingly necessary to use. Now we have all the tools and setup we need to actually begin working with React. JSX: JavaScript + XML As you've seen, we've been using what looks like HTML in our React code, but it's not quite HTML. This is JSX , which stands for JavaScript XML. With JSX, we can write what looks like HTML, and also we can create and use our own XML-like tags. Here's what JSX looks like assigned to a variable. JSX const heading = < h1 className = \" site-heading \" > Hello, React </ h1 > Using JSX is not mandatory for writing React. Under the hood, it's running createElement , which takes the tag, object containing the properties, and children of the component and renders the same information. The below code will have the same output as the JSX above. No JSX const heading = React . createElement ( 'h1' , { className : 'site-heading' } , 'Hello, React!' ) JSX is actually closer to JavaScript, not HTML, so there are a few key differences to note when writing it. className is used instead of class for adding CSS classes, as class is a reserved keyword in JavaScript. Properties and methods in JSX are camelCase - onclick will become onClick . Self-closing tags must end in a slash - e.g. <img /> JavaScript expressions can also be embedded inside JSX using curly braces, including variables, functions, and properties. const name = 'Tania' const heading = < h1 > Hello, { name } </ h1 > JSX is easier to write and understand than creating and appending many elements in vanilla JavaScript, and is one of the reasons people love React so much. Components So far, we've created one component - the App component. Almost everything in React consists of components, which can be class components or simple components . Most React apps have many small components, and everything loads into the main App component. Components also often get their own file, so let's change up our project to do so. Remove the App class from index.js , so it looks like this. src/index.js import React from 'react' import ReactDOM from 'react-dom' import App from './App' import './index.css' ReactDOM . render ( < App /> , document . getElementById ( 'root' ) ) We'll create a new file called App.js and put the component in there. src/App.js import React , { Component } from 'react' class App extends Component { render ( ) { return ( < div className = \" App \" > < h1 > Hello, React! </ h1 > </ div > ) } } export default App We export the component as App and load it in index.js . It's not mandatory to separate components into files, but an application will start to get unwieldy and out-of-hand if you don't. Class Components Let's create another component. We're going to create a table. Make Table.js , and fill it with the following data. src/Table.js import React , { Component } from 'react' class Table extends Component { render ( ) { return ( < table > < thead > < tr > < th > Name </ th > < th > Job </ th > </ tr > </ thead > < tbody > < tr > < td > Charlie </ td > < td > Janitor </ td > </ tr > < tr > < td > Mac </ td > < td > Bouncer </ td > </ tr > < tr > < td > Dee </ td > < td > Aspiring actress </ td > </ tr > < tr > < td > Dennis </ td > < td > Bartender </ td > </ tr > </ tbody > </ table > ) } } export default Table This component we created is a custom class component. We capitalize custom components to differentiate them from regular HTML elements. Back in App.js , we can load in the Table, first by importing it in: src/App.js import Table from './Table' Then by loading it into the render() of App , where before we had \"Hello, React!\". I also changed the class of the outer container. src/App.js import React , { Component } from 'react' import Table from './Table' class App extends Component { render ( ) { return ( < div className = \" container \" > < Table /> </ div > ) } } export default App If you check back on your live environment, you'll see the Table loaded in. Now we've seen what a custom class component is. We could reuse this component over and over. However, since the data is hard-coded into it, it wouldn't be too useful at the moment. Simple Components The other type of component in React is the simple component , which is a function. This component doesn't use the class keyword. Let's take our Table and make two simple components for it - a table header, and a table body. We're going to use ES6 arrow functions to create these simple components. First, the table header. src/Table.js const TableHeader = ( ) => { return ( < thead > < tr > < th > Name </ th > < th > Job </ th > </ tr > </ thead > ) } Then the body. src/Table.js const TableBody = ( ) => { return ( < tbody > < tr > < td > Charlie </ td > < td > Janitor </ td > </ tr > < tr > < td > Mac </ td > < td > Bouncer </ td > </ tr > < tr > < td > Dee </ td > < td > Aspiring actress </ td > </ tr > < tr > < td > Dennis </ td > < td > Bartender </ td > </ tr > </ tbody > ) } Now our Table file will look like this. Note that the TableHeader and TableBody components are all in the same file, and being used by the Table class component. src/Table.js const TableHeader = ( ) => { ... } const TableBody = ( ) => { ... } class Table extends Component { render ( ) { return ( < table > < TableHeader /> < TableBody /> </ table > ) } } Everything should appear as it did before. As you can see, components can be nested in other components, and simple and class components can be mixed. A class component must include render() , and the return can only return one parent element. As a wrap up, let's compare a simple component with a class component. Simple Component const SimpleComponent = ( ) => { return < div > Example </ div > } Class Component class ClassComponent extends Component { render ( ) { return < div > Example </ div > } } Note that if the return is contained to one line, it does not need parentheses. Props Right now, we have a cool Table component, but the data is being hard-coded. One of the big deals about React is how it handles data, and it does so with properties, referred to as props , and with state. Now, we'll focus on handling data with props. First, let's remove all the data from our TableBody component. src/Table.js const TableBody = ( ) => { return < tbody /> } Then let's move all that data to an array of objects, as if we were bringing in a JSON-based API. We'll have to create this array inside our render() . src/App.js class App extends Component { render ( ) { const characters = [ { name : 'Charlie' , job : 'Janitor' , } , { name : 'Mac' , job : 'Bouncer' , } , { name : 'Dee' , job : 'Aspring actress' , } , { name : 'Dennis' , job : 'Bartender' , } , ] return ( < div className = \" container \" > < Table /> </ div > ) } } Now, we're going to pass the data through to the child component ( Table ) with properties, kind of how you might pass data through using data- attributes. We can call the property whatever we want, as long as it's not a reserved keyword, so I'll go with characterData . The data I'm passing through is the characters variable, and I'll put curly braces around it as it's a JavaScript expression. src/App.js return ( < div className = \" container \" > < Table characterData = { characters } /> </ div > ) Now that data is being passed through to Table , we have to work on accessing it from the other side. src/Table.js class Table extends Component { render ( ) { const { characterData } = this . props return ( < table > < TableHeader /> < TableBody characterData = { characterData } /> </ table > ) } } If you open up React DevTools and inspect the Table component, you'll see the array of data in the property. The data that's stored here is known as the virtual DOM , which is a fast and efficient way of syncing data with the actual DOM. This data is not in the actual DOM yet, though. In Table , we can access all props through this.props . We're only passing one props through, characterData, so we'll use this.props.characterData to retrieve that data. I'm going to use the ES6 property shorthand to create a variable that contains this.props.characterData . const { characterData } = this . props Since our Table component actually consists of two smaller simple components, I'm going to pass it through to the TableBody , once again through props. src/Table.js class Table extends Component { render ( ) { const { characterData } = this . props return ( < table > < TableHeader /> < TableBody characterData = { characterData } /> </ table > ) } } Right now, TableBody takes no parameters and returns a single tag. src/Table.js const TableBody = ( ) => { return < tbody /> } We're going to pass the props through as a parameter, and map through the array to return a table row for each object in the array. This map will be contained in the rows variable, which we'll return as an expression. src/Table.js const TableBody = ( props ) => { const rows = props . characterData . map ( ( row , index ) => { return ( < tr key = { index } > < td > { row . name } </ td > < td > { row . job } </ td > </ tr > ) } ) return < tbody > { rows } </ tbody > } If you view the front end of the app, all the data is loading in now. You'll notice I've added a key index to each table row. You should always use keys when making lists in React, as they help identify each list item. We'll also see how this is necessary in a moment when we want to manipulate list items. Props are an effective way to pass existing data to a React component, however the component cannot change the props - they're read-only. In the next section, we'll learn how to use state to have further control over handling data in React. State Right now, we're storing our character data in an array in a variable, and passing it through as props. This is good to start, but imagine if we want to be able to delete an item from the array. With props, we have a one way data flow, but with state we can update private data from a component. You can think of state as any data that should be saved and modified without necessarily being added to a database - for example, adding and removing items from a shopping cart before confirming your purchase. To start, we're going to create a state object. src/App.js class App extends Component { state = { } } The object will contain properties for everything you want to store in the state. For us, it's characters . src/App.js class App extends Component { state = { characters : [ ] , } } Move the entire array of objects we created earlier into state.characters . src/App.js class App extends Component { state = { characters : [ { name : 'Charlie' , // the rest of the data } , ] , } } Our data is officially contained in the state. Since we want to be able to remove a character from the table, we're going to create a removeCharacter method on the parent App class. To retrieve the state, we'll get this.state.characters using the same ES6 method as before. To update the state, we'll use this.setState() , a built-in method for manipulating state. We'll filter the array based on an index that we pass through, and return the new array. You must use this.setState() to modify an array. Simply applying a new value to this.state.property will not work. src/App.js removeCharacter = ( index ) => { const { characters } = this . state this . setState ( { characters : characters . filter ( ( character , i ) => { return i !== index } ) , } ) } filter does not mutate but rather creates a new array, and is a preferred method for modifying arrays in JavaScript. This particular method is testing an index vs. all the indices in the array, and returning all but the one that is passed through. Now we have to pass that function through to the component, and render a button next to each character that can invoke the function. We'll pass the removeCharacter function through as a prop to Table . src/App.js render ( ) { const { characters } = this . state return ( < div className = \" container \" > < Table characterData = { characters } removeCharacter = { this . removeCharacter } /> </ div > ) } Since we're passing it down to TableBody from Table , we're going to have to pass it through again as a prop, just like we did with the character data. In addition, since it turns out that the only components having their own states in our project are App and Form , it would be best practice to transform Table into a simple component from the class component it currently is. src/Table.js const Table = ( props ) => { const { characterData , removeCharacter } = props return ( < table > < TableHeader /> < TableBody characterData = { characterData } removeCharacter = { removeCharacter } /> </ table > ) } Here's where that index we defined in the removeCharacter() method comes in. In the TableBody component, we'll pass the key/index through as a parameter, so the filter function knows which item to remove. We'll create a button with an onClick and pass it through. src/Table.js < tr key = { index } > < td > { row . name } </ td > < td > { row . job } </ td > < td > < button onClick = { ( ) => props . removeCharacter ( index ) } > Delete </ button > </ td > </ tr > The onClick function must pass through a function that returns the removeCharacter() method, otherwise it will try to run automatically. Awesome. Now we have delete buttons, and we can modify our state by deleting a character. I deleted Mac. Now you should understand how state gets initialized and how it can be modified. Submitting Form Data Now we have data stored in state, and we can remove any item from the state. However, what if we wanted to be able to add new data to state? In a real world application, you'd more likely start with empty state and add to it, such as with a to-do list or a shopping cart. Before anything else, let's remove all the hard-coded data from state.characters , as we'll be updating that through the form now. src/App.js class App extends Component { state = { characters : [ ] , } } Now let's go ahead and create a Form component in a new file called Form.js . We're going to set the initial state of the Form to be an object with some empty properties, and assign that initial state to this.state . src/Form.js import React , { Component } from 'react' class Form extends Component { initialState = { name : '' , job : '' , } state = this . initialState } Previously, it was necessary to include a constructor() on React class components, but it's not required anymore. Our goal for this form will be to update the state of Form every time a field is changed in the form, and when we submit, all that data will pass to the App state, which will then update the Table . First, we'll make the function that will run every time a change is made to an input. The event will be passed through, and we'll set the state of Form to have the name (key) and value of the inputs. src/Form.js handleChange = ( event ) => { const { name , value } = event . target this . setState ( { [ name ] : value , } ) } Let's get this working before we move on to submitting the form. In the render, let's get our two properties from state, and assign them as the values that correspond to the proper form keys. We'll run the handleChange() method as the onChange of the input, and finally we'll export the Form component. src/Form.js render ( ) { const { name , job } = this . state ; return ( < form > < label htmlFor = \" name \" > Name </ label > < input type = \" text \" name = \" name \" id = \" name \" value = { name } onChange = { this . handleChange } /> < label htmlFor = \" job \" > Job </ label > < input type = \" text \" name = \" job \" id = \" job \" value = { job } onChange = { this . handleChange } /> </ form > ) ; } export default Form ; In App.js , we can render the form below the table. src/App.js import Form from './Form' src/App.js return ( < div className = \" container \" > < Table characterData = { characters } removeCharacter = { this . removeCharacter } /> < Form /> </ div > ) Now if we go to the front end of our app, we'll see a form that doesn't have a submit yet. Update some fields and you'll see the local state of Form being updated. Cool. Last step is to allow us to actually submit that data and update the parent state. We'll create a function called handleSubmit() on App that will update the state by taking the existing this.state.characters and adding the new character parameter, using the ES6 spread operator . src/App.js handleSubmit = ( character ) => { this . setState ( { characters : [ ... this . state . characters , character ] } ) } Let's make sure we pass that through as a parameter on Form . < Form handleSubmit = { this . handleSubmit } /> Now in Form , we'll create a method called submitForm() that will call that function, and pass the Form state through as the character parameter we defined earlier. It will also reset the state to the initial state, to clear the form after submit. src/Form.js submitForm = ( ) => { this . props . handleSubmit ( this . state ) this . setState ( this . initialState ) } Finally, we'll add a submit button to submit the form. We're using an onClick instead of an onSubmit since we're not using the standard submit functionality. The click will call the submitForm we just made. < input type = \" button \" value = \" Submit \" onClick = { this . submitForm } /> And that's it! The app is complete. We can create, add, and remove users from our table. Since the Table and TableBody were already pulling from the state, it will display properly. If you got lost anywhere along the way, you can view the complete source on GitHub . Pulling in API Data One very common usage of React is pulling in data from an API. If you're not familiar with what an API is or how to connect to one, I would recommend reading How to Connect to an API with JavaScript , which will walk you through what APIs are and how to use them with vanilla JavaScript. As a little test, we can create a new Api.js file, and create a new App in there. A public API we can test with is the Wikipedia API , and I have a URL endpoint right here for a random* search. You can go to that link to see the API - and make sure you have JSONView installed on your browser. We're going to use JavaScript's built-in Fetch to gather the data from that URL endpoint and display it. You can switch between the app we created and this test file by just changing the URL in index.js - import App from './Api'; . I'm not going to explain this code line-by-line, as we've already learned about creating a component, rendering, and mapping through a state array. The new aspect to this code is componentDidMount() , a React lifecycle method. Lifecycle is the order in which methods are called in React. Mounting refers to an item being inserted into the DOM. When we pull in API data, we want to use componentDidMount , because we want to make sure the component has rendered to the DOM before we bring in the data. In the below snippet, you'll see how we bring in data from the Wikipedia API, and display it on the page Api.js import React , { Component } from 'react' class App extends Component { state = { data : [ ] , } // Code is invoked after the component is mounted/inserted into the DOM tree. componentDidMount ( ) { const url = 'https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*' fetch ( url ) . then ( ( result ) => result . json ( ) ) . then ( ( result ) => { this . setState ( { data : result , } ) } ) } render ( ) { const { data } = this . state const result = data . map ( ( entry , index ) => { return < li key = { index } > { entry } </ li > } ) return < ul > { result } </ ul > } } export default App Once you save and run this file in the local server, you'll see the Wikipedia API data displayed in the DOM. There are other lifecycle methods, but going over them will be beyond the scope of this article. You can read more about React components here . *Wikipedia search choice may not be random. It might be an article that I spearheaded back in 2005. Building and Deploying a React App Everything we've done so far has been in a development environment. We've been compiling, hot-reloading, and updating on the fly. For production, we're going to want to have static files loading in - none of the source code. We can do this by making a build and deploying it. Now, if you just want to compile all the React code and place it in the root of a directory somewhere, all you need to do is run the following line: npm run build This will create a build folder which will contain your app. Put the contents of that folder anywhere, and you're done! We can also take it a step further, and have npm deploy for us. We're going to build to GitHub pages, so you'll already have to be familiar with Git and getting your code up on GitHub. Make sure you've exited out of your local React environment, so the code isn't currently running. First, we're going to add a homepage field to package.json , that has the URL we want our app to live on. package.json \"homepage\" : \"https://taniarascia.github.io/react-tutorial\" , We'll also add these two lines to the scripts property. \"scripts\" : { // ... \"predeploy\" : \"npm run build\" , \"deploy\" : \"gh-pages -d build\" } In your project, you'll add gh-pages to the devDependencies. npm install --save-dev gh-pages We'll create the build , which will have all the compiled, static files. npm run build Finally, we'll deploy to gh-pages . npm run deploy And we're done! The app is now available live at https://taniarascia.github.io/react-tutorial . Conclusion This article should have given you a good introduction to React, simple and class components, state, props, working with form data, pulling data in from an API, and deploying an app. There is much more to learn and do with React, but I hope you feel confident delving in and playing around with React yourself now. View Source on GitHub View Project Please let me know if anything was unclear, or if there's anything else you'd like to see in this or a subsequent article. About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: August 20, 2018 Category: Technical Tags api javascript react tutorial frameworks Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/how-to-use-the-command-line-for-apple-macos-and-linux/",
        "title": "How to Use the Command Line in Linux and macOS | Tania Rascia's Personal Website",
        "headings": [
            "How to Use the Command Line in Linux and macOS",
            "What is the command line?",
            "Understanding the syntax",
            "Commands",
            "Moving between directories",
            "Creating files and directories",
            "Deleting files and directories",
            "Copying files and directories",
            "Moving files and directories",
            "Running multiple commands",
            "Changing permissions",
            "Run as administrator",
            "Connecting to another computer or server",
            "A few useful commands",
            "Using a basic text editor",
            "Recap",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:11.711543",
        "content": [
            "How to Use the Command Line in Linux and macOS | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me How to Use the Command Line in Linux and macOS You might be like me - I used computers for twenty years without ever touching a command prompt. I didn't know anything about it, and it seemed scary and overwhelming. I thought it was something only really advanced users knew anything about. When I inevitably encountered a situation where I had to gain some basic command line knowledge, I discovered how useful and easy it is. Learning to use the command line will open up endless possibilities for you - it is undoubtedly essential in web development and programming, but even regular users doing everyday tasks will benefit. Follow along in this tutorial and you'll see how simple it is to use, and how powerful it can be. If you've never used the command line, this article will be extremely helpful to you. If you have a basic or intermediate knowledge of the command line, you may learn some new tips and tricks. Apple macOS and most Linux servers use almost all the exact same commands, so this tutorial applies to both. Even if you use a Windows PC, this will be useful to learn as your websites are likely hosted on a Linux server. Prerequisites There are no prerequisites to this article - as long as you have basic computer literacy you'll be able to follow along Goals Learn what the command line interface is and how it relates to your computer Learn some basic terminology related to the command line Learn the most common, useful commands What we'll learn Show current directory and contents of directory Moving between directories Creating files and directories Write text to a file View contents of a file Deleting files and directories Copying and pasting files and directories Moving/cutting files and directories Running multiple commands Changing permissions Run as administrator Connecting to another computer or server A few more useful commands Using a basic text editor What is the command line? I promise this is the most important thing to understand, and it completely blew my mind when I finally understood it. Windows, macOS - whatever operating system you're using - is simply a visual representation of your computer. This is known as a Graphical User Interface (GUI) . Take away the file explorer, the desktop, the icons, and all the other graphics, and you're left with the command line. Instead of dragging and dropping, pointing and clicking, you're typing. That's the only difference. I really want to reiterate this. Your entire computer can be accessed through the command line. You can do everything through the command line. It's the same computer you already know and love. On a Mac, if I open Finder, this is my home folder. It's called taniarascia . I can access the same exact files through a web browser. If I open Google Chrome and I type in /Users/taniarascia , I'll be in the same place. The same is true of the command line interface. I'm going to open Terminal.app by opening Spotlight search (command + spacebar) and type in Terminal . My terminal background is dark. Yours might be white or blue or different depending on what you're using. This is simply a personal preference, which we can learn to change later. Just as I was \"in\" the taniarascia folder in Google Chrome and Finder, I'm currently \"in\" the same folder via the command prompt/terminal. I'm going to prove this by typing pwd into the terminal, then pressing enter. pwd stands for Print Working Directory , and will show me exactly \"where I am\" at any point. Here's what I type. pwd And here's what is written (printed) to the screen. NolBook:~ taniarascia$ pwd",
            "</html> Recap Here's a recap of all the commands I went over today. Command Meaning Description pwd Print Working Directory find out where you are ls List Directory Contents see what files and directories are in your current location clear Clear clear the terminal screen cd Change Directory move between directories mkdir Make Directory create a new directory touch Touch create a new file cat Concatenate view the contents of a file echo \"x\" > Echo quickly print text to a file rm Remove remove directory entries rmdir Remove Directory remove directories cp Copy copy files cp -R Copy Recursively copy a directory and all its contents mv Move move (cut and paste) files and directories && And run multiple commands whoami Who Am I display current user id dig Dig DNS lookup man Manual open manual (help) pages nano Nano's ANOther editor free text editing program Conclusion Now that you know how to use the command line, you can do a few things like... Run Sass from the command line Set up a workflow with Gulp Or Grunt Download all your programs with a single command Set up a Linux server (AWS) Set up a cron job and plenty more. There are no more limits! Have fun. About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: January 09, 2017 Category: Technical Tags cli linux macOS tutorial Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/snake-game-in-javascript",
        "title": "Writing a Snake Game for the Terminal in JavaScript | Tania Rascia's Personal Website",
        "headings": [
            "Writing a Snake Game for the Terminal in JavaScript",
            "Object-Oriented",
            "User Interface",
            "Game",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:12.006391",
        "content": [
            "Writing a Snake Game for the Terminal in JavaScript | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me Writing a Snake Game for the Terminal in JavaScript Usually when you think of a JavaScript game, you probably imagine something played in the browser, either rendered to the DOM or in an HTML5 canvas element. For a recent Node.js project, I wanted to render pixels to a terminal interface instead of a browser. For this, I was going to need to find and learn how to use a terminal UI library like curses . The most popular one in the JavaScript environment is blessed . I thought writing the classic Snake game would be a fun and easy project to get used to blessed, so I wrote \ud83d\udc0d Snek.js . Here's a brief preview gif of the game: You can check out the source , or download it and play it yourself: git clone https://github.com/taniarascia/snek cd snek npm i && npm run play I made the game as I remember it from the old Nokia bricks: There's a randomly generated dot There's a snake that can go up, down, left, or right If the snake eats the dot, it grows and the score goes up by one If the snake runs into the wall or itself, the game resets Object-Oriented I made extensive use of the ES6 JavaScript class keyword, and divided the game into two classes: Game , which would track the state of the snake, dot, and score UserInterface , which would handle all i/o, which means the key input, the screen, and rendering anything to the screen User Interface Blessed uses \"boxes\" to represent elements, so I had a gameBox to represent the entire game play area, scoreBox to represent a single line where the score would be set and updated, and gameOverBox to display a game over modal. All the pixels that would be drawn to the screen beyond that - in this case, the dot and each segment of snake - go through the draw() method, which is a 1px x 1px box. Since all key input would be detected through the UserInterface class, I had to bind all the handler methods so they could be used through the Game class. UserInterface.js bindHandlers ( keyPressHandler , quitHandler , enterHandler ) { this . screen . on ( 'keypress' , keyPressHandler ) this . screen . key ( [ 'escape' , 'q' , 'C-c' ] , quitHandler ) this . screen . key ( [ 'enter' ] , enterHandler ) } Game.js this . ui . bindHandlers ( this . changeDirection . bind ( this ) , this . quit . bind ( this ) , this . start . bind ( this ) ) Game The Game tracked the snake, the dot, and the score. The snake is an array of x/y coordinates that correspond to pixels on the screen. The snake moves in a direction based on the key input (arrow keys and WASD supported!). To move, the last item in the array (the tail) is removed, and a new item (the head) is added to the beginning. If the snake eats a dot, the last item isn't removed, and the snake grows. A new dot is generated randomly after being eaten. Dots wont generate on an existing snake segment. The game ends if the snake collides with the edges of the terminal screen (the wall), or with its own tail, and the game over modal is displayed. Pressing enter will start a new game by calling the start method, which resets the game state and starts a timer if one doesn't exist. start ( ) { if ( ! this . timer ) { this . reset ( ) this . timer = setInterval ( this . tick . bind ( this ) , 50 ) } } Every 50 ms, tick is called, which is the game loop. The timer will restart if there's a game over. Otherwise, each tick will clear the screen, draw a dot, move the snake, draw the snake, and render everything to the UI. tick ( ) { if ( this . gameOver ( ) ) { this . showGameOverScreen ( ) clearInterval ( this . timer ) this . timer = null return } this . clear ( ) this . drawDot ( ) this . moveSnake ( ) this . drawSnake ( ) this . ui . render ( ) } Conclusion Again, you can view the source on GitHub at \ud83d\udc0d Snek.js . I learned a lot writing and refactoring this over the past few days. I encountered plenty of bugs in my first iteration, such as the snake being able to collide into all but the last tail segment, and a major issue where the blessed boxes weren't being garbage collected, and the game got slower and slower as it became less efficient and more intensive to run. vsergeev wrote a very clean and much more advanced and extensible Typescript implementation of Snake , with a mini-game engine and AI monster entity. Studying this helped me find and fix some of the bugs in my first iteration. About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: April 09, 2019 Category: Technical Tags javascript cli node games Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/2023-into-2024/",
        "title": "2023 into 2024 | Tania Rascia's Personal Website",
        "headings": [
            "2023 into 2024",
            "Career",
            "Coding & Writing",
            "Life",
            "Gaming",
            "Lifting",
            "Internet",
            "In conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:12.087414",
        "content": [
            "2023 into 2024 | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me 2023 into 2024 It's 2024, y'all. We're 20 days into the year, so I'm running out of time to write that end of year post I always do . I haven't quite known what to write, but here goes. Career One big thing I realized is that 2024 marks ten years (!) that I've been a developer, which is my second career. In 2014, I interned during the day for a bartender I knew who had a WordPress shop, and worked at night at NAMCO's Pac-Man restaurant (yes, somehow that was a thing. Billy Mitchell even showed up). By the first half of 2015, I found my first job as a junior web developer for Lettuce Entertain You, a Chicago restaurant group, and I've been in the field ever since! I love my career and I'm happy I've had the opportunity to work in this field and keep doing it for a full decade. Coding & Writing I wrote two posts, one about where to set up websockets in a React/Redux application, and my final post for DigitalOcean, which was about the GraphQL type system . Both bangers. I learned some stuff that I didn't get around to writing, but most of my coding has been on work projects during work hours. I've written about burnout in the past, and I think it really takes a few years to get over it. Writing thirty-five articles for DigitalOcean in particular burned me out, because I had to write in a very dry style that took the joy of writing out of it for me. I think I'm getting to the point where I'd be excited to start writing again, and mostly I'm more interested non-software related topics. I really enjoyed writing the Ode to Animorphs post, for example. I'd also be interested in writing about weight lifting, Lego, gaming, cooking, art, music, DDR, and other hobbies and interests of mine. Life 2023 has been a big year. The most important thing that happened to me was falling in love. It's hard to find the right words to describe how much joy and happiness being with Austin has brought into my life. I feel light and free. I feel content and understood and cherished. I'm no longer alone; my partner is with me, and all the difficult parts of life are just easier. Everything is better with Austin. Also, I moved away from Chicago for the first time in my life. I've lived in and explored and had many adventures in Chicago's neighborhoods throughout the years...late night pizza at Dimo's, dancing at The Owl or Beauty Bar or Berlin, playing volleyball on the beach, getting tacos in Little Village...Chicago will always be my hometown, but my home is a person, not a place, and it's been very exciting to get to know my new city! There have been personal emergencies and trauma this year which have been extremely difficult, but fortunately it has been stabilizing and I'm hoping for a peaceful 2024. Gaming I've played a lot of video games this year, more than I have in a long time, which has been great. We're currently playing the new Prince of Persia game, which takes all the gameplay elements I love about Castlevania: Symphony of the Night - one of my all time favorite games - and updates it to be way more interesting, fun, and smooth. I also picked up Hollow Knight and got 97% of the way through it...I just need to beat the final boss! The game of the year for me, and maybe even for you, was Baldur's Gate 3. I played first as a dwarf druid and then as a half-orc barbarian. With almost two complete playthroughs, we put at least 200 hours into the game, and I'm still looking forward to another run. I also discovered that I like roguelikes a lot, and I played a lot of Deadcells, Slay the Spire, and Vampire Survivors. I'm excited to catch up on at least a decade of classics that I've never played. Lifting I'm getting back into weight lifting, and have been going every Monday, Wednesday, and Friday in the mornings since the beginning of the year. Consistency has always been the most difficult part for me, but it's been three weeks of going every day as planned and I'm excited to see what progress I can make. Here are my current numbers, I hope they're a little bigger in my next end of year review! Squats : 95lbs - 5x5 Deadlifts : 115lbs - 5x5 Bent Over Row : 85lbs - 5x5 Overhead Press : 40lbs - 5x5 Bench Press : 65lbs - 5x5 Internet One thing that has made it hard to inspire myself to write here is that the internet is just...different now. It used to be called \"Surfing the 'Net\" and you never knew what you were going to find: a fansite, a personal art gallery, or a place where someone documented everything they knew about some obscure topic. I've intended this site to be a bit like the fun old websites of yore. Now I scroll through reddit a bit and check the news, whether hacker or standard, but aside from a few small Slack or Discord spots, I don't spend too much time on the web. It's harder and harder to find genuine, interesting people and sites instead of ads and bots, and I think the ease at which we can create AI generated content isn't going to make that much better. Nonetheless, the internet has been part of my life ever since my brother took me to the library when I was eight, and even though it's changed a lot since then, there are still cool things to stumble upon, and I want my website to be one of them. In conclusion 2023 has been the best year of my life, even though some things have been unbearably difficult. My new life and partnership has made me happier than I can express. I hope you all have a great 2024 and I'll see you around. About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: January 20, 2024 Category: Personal Tags life new-year Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/how-to-use-webpack/",
        "title": "How to Set Up webpack 5 From Scratch | Tania Rascia's Personal Website",
        "headings": [
            "How to Set Up webpack 5 From Scratch",
            "What is webpack?",
            "Installation",
            "Basic configuration",
            "Entry",
            "Output",
            "Plugins",
            "HTML template file",
            "Clean",
            "Modules and Loaders",
            "Babel (JavaScript)",
            "Images",
            "Fonts and inline",
            "Styles",
            "Development",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:12.199226",
        "content": [
            "How to Set Up webpack 5 From Scratch | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me How to Set Up webpack 5 From Scratch webpack used to be a frustrating and overwhelming beast to me. I felt safe using something like create-react-app to set up a project, but I avoided webpack if at all possible since it seemed complex and confusing. If you don't feel comfortable setting up webpack from scratch for use with Babel, TypeScript, Sass, React, or Vue, or don't know why you might want to use webpack, then this is the perfect article for you. Like all things, once you delve in and learn it you realize it's not that scary and there's just a few main concepts to learn to get set up. In addition to this article, I've created an extremely solid webpack 5 Boilerplate to get you started with any project. I also recommend checking it out if you're familiar with webpack 4 but want to see a webpack 5 setup. Prerequisites Basic familiarity with HTML & CSS Basic knowledge of JavaScript and programming Familiarity with ES6 syntax and features Ability to set up a Node.js environment Knowledge of the command line Goals Learn what webpack is and why you might want to use it Set up a development server with webpack Set up a production build flow using webpack Content What is webpack Installation Basic configuration Entry Output Plugins HTML template Clean Modules and Loaders Babel (JavaScript) Images Fonts and inline Styles Development If you're upgrading from webpack 4 to webpack 5, here are a few notes: the webpack-dev-server command is now webpack-serve file-loader , raw-loader and url-loader are not necessary, you can use built in asset modules Node polyfills are no longer available, so if you get an error for stream , for example, you would add the stream-browserify package as a dependency and add { stream: 'stream-browserify' } to the alias property in your webpack config. What is webpack? For the most part, websites are no longer just written in plain HTML with a bit of optional JavaScript - they're often entirely built by JavaScript. So we have to bundle, minify, and transpile the code into something all browsers understand, which is where webpack comes in. webpack is a module bundler. It packs all your code neatly for the browser. It allows you to write the latest JavaScript with Babel or use TypeScript, and compile it into something cross-browser compatible and neatly minified. It also allows you to import static assets into your JavaScript. For development, webpack also supplies a development server that can update modules and styles on the fly when you save. vue create and create-react-app rely on webpack under the hood, but you can easily set up your own webpack config for them. There is much more that webpack can do, but this article will help you get familiar with the concepts and get something set up. Installation First, create a directory for your project to live and start a Node project. I'm calling it webpack-tutorial . mkdir webpack-tutorial cd webpack-tutorial npm init -y # creates a default package.json To begin, install webpack and webpack-cli . These are the core technologies for getting set up. npm i -D webpack webpack-cli webpack - Module and asset bundler webpack-cli - Command line interface for webpack We'll make an src folder to contain all the source files. I'll start by creating a simple index.js file. src/index.js console . log ( 'Interesting!' ) Alright, so now you have a Node project with the base packages installed and an index file to start. We'll begin creating the config files now. Basic configuration Let's start setting up a Webpack build. Create a webpack.config.js in the root of your project. Entry The first part of setting up a webpack config is defining the entry point , what file or files webpack will look at to compile. In this example, we'll set the entry point to the src/index.js . webpack.config.js const path = require ( 'path' ) module . exports = { entry : { main : path . resolve ( __dirname , './src/index.js' ) , } , } Output The output is where the bundled file will resolve. We'll have it output in the dist folder, which is where production code gets built. The [name] in the output will be main , as specified in the entry object. webpack.config.js module . exports = { /* ... */ output : { path : path . resolve ( __dirname , './dist' ) , filename : '[name].bundle.js' , } , } Now we have the minimum config necessary to build a bundle. In package.json , we can make a build script that runs the webpack command. package.json \"scripts\" : { \"build\" : \"webpack\" } Now you can run it. npm run build asset main.bundle.js 19 bytes [emitted] [minimized] (name: main)",
            "webpack 5.1.0 compiled successfully in 152 mss You'll see that a dist folder has been created with main.bundle.js . Nothing has happened to the file yet, but we now have webpack building successfully. Plugins webpack has a plugin interface that makes it flexible. Internal webpack code and third party extensions use plugins. There are a few main ones almost every webpack project will use. HTML template file So we have a random bundle file, but it's not very useful to us yet. If we're building a web app, we need an HTML page that will load that JavaScript bundle as a script. Since we want the HTML file to automatically bring in the script, we'll create an HTML template with html-webpack-plugin . html-webpack-plugin - Generates an HTML file from a template Install the plugin. npm i -D html-webpack-plugin Create a template.html file in the src folder. We can include variables other custom information in the template. We'll add a custom title , and otherwise it will look like a regular HTML file with a root div. src/template.html <! DOCTYPE html > < html lang = \" en \" > < head > < title > <%= htmlWebpackPlugin.options.title %> </ title > </ head > < body > < div id = \" root \" > </ div > </ body > </ html > Create a plugins property of your config and you'll add the plugin, filename to output ( index.html ), and link to the template file it will be based on. webpack.config.js const path = require ( 'path' ) const HtmlWebpackPlugin = require ( 'html-webpack-plugin' ) module . exports = { /* ... */ plugins : [ new HtmlWebpackPlugin ( { title : 'webpack Boilerplate' , template : path . resolve ( __dirname , './src/template.html' ) , // template file filename : 'index.html' , // output file } ) , ] , } Now run a build again. You'll see the dist folder now contains an index.html with the bundle loaded in. Success! If you load that file into a browser, you'll see Interesting! in the console. Let's update it to inject some content into the DOM. Change the index.js entry point to this, and run the build command again. src/index.js // Create heading node const heading = document . createElement ( 'h1' ) heading . textContent = 'Interesting!' // Append heading node to the DOM const app = document . querySelector ( '#root' ) app . append ( heading ) Now to test it out you can go to the dist folder and start up a server. (Install http-server globally if necessary.) http-server You'll see our JavaScript injected into the DOM, saying \"Interesting!\". You'll also notice the bundle file is minified. Clean You'll also want to set up clean-webpack-plugin , which clears out anything in the dist folder after each build. This is important to ensure no old data gets left behind. clean-webpack-plugin - Remove/clean build folders webpack.config.js const path = require ( 'path' ) const HtmlWebpackPlugin = require ( 'html-webpack-plugin' ) const { CleanWebpackPlugin } = require ( 'clean-webpack-plugin' ) module . exports = { /* ... */ plugins : [ /* ... */ new CleanWebpackPlugin ( ) , ] , } Modules and Loaders webpack uses loaders to preprocess files loaded via modules . This can be JavaScript files, static assets like images and CSS styles, and compilers like TypeScript and Babel. webpack 5 has a few built-in loaders for assets as well. In your project you have an HTML file that loads and brings in some JavaScript, but it still doesn't actually do anything. What are the main things we want this webpack config to do? Compile the latest and greatest JavaScript to a version the browser understands Import styles and compile SCSS into CSS Import images and fonts (Optional) Set up React or Vue First thing we'll do is set up Babel to compile JavaScript. Babel (JavaScript) Babel is a tool that allows us to use tomorrow's JavaScript, today. We're going to set up a rule that checks for any .js file in the project (outside of node_modules ) and uses the babel-loader to transpile. There are a few additional dependencies for Babel as well. babel-loader - Transpile files with Babel and webpack. @babel/core - Transpile ES2015+ to backwards compatible JavaScript @babel/preset-env - Smart defaults for Babel @babel/plugin-proposal-class-properties - An example of a custom Babel config (use properties directly on a class) npm i -D babel-loader @babel/core @babel/preset-env @babel/preset-env @babel/plugin-proposal-class-properties webpack.config.js module . exports = { /* ... */ module : { rules : [ // JavaScript { test : / \\.js$ / , exclude : / node_modules / , use : [ 'babel-loader' ] , } , ] , } , } If you're setting up a TypeScript project, you would use the typescript-loader instead of babel-loader for all your JavaScript transpiling needs. You would check for .ts files and use ts-loader . Now Babel is set up, but our Babel plugin is not. You can demonstrate it not working by adding an example pre-Babel code to index.js . src/index.js // Create a class property without a constructor class Game { name = 'Violin Charades' } const myGame = new Game ( ) // Create paragraph node const p = document . createElement ( 'p' ) p . textContent = ` I like ${ myGame . name } . ` // Create heading node const heading = document . createElement ( 'h1' ) heading . textContent = 'Interesting!' // Append SVG and heading nodes to the DOM const app = document . querySelector ( '#root' ) app . append ( heading , p ) ERROR in ./src/index.js",
            "SyntaxError: /Users/you/webpack-tutorial/src/index.js: Support for the experimental syntax 'classProperties' isn't currently enabled (3:8):",
            "4 | } To fix this, simply create a .babelrc file in the root of your project. This will add a lot of defaults with preset-env and the plugin we wanted with plugin-proposal-class-properties . .babelrc { \"presets\" : [ \"@babel/preset-env\" ] , \"plugins\" : [ \"@babel/plugin-proposal-class-properties\" ] } Now another npm run build and everything will be all set. Images You'll want to be able to import images directly into your JavaScript files, but that's not something that JavaScript can do by default. To demonstrate, create src/images and add an image to it, then try to import it into your index.js file. src/index.js import example from './images/example.png' /* ... */ When you run a build, you'll once again see an error: ERROR in ./src/images/example.png 1:0",
            "You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders webpack has some built in asset modules you can use for static assets. For image types, we'll use asset/resource . Note that this is a type and not a loader . webpack.config.js module . exports = { /* ... */ module : { rules : [ // Images { test : / \\.(?:ico|gif|png|jpg|jpeg)$ / i , type : 'asset/resource' , } , ] , } , } You'll see the file got output to the dist folder after building. Fonts and inline webpack also has an asset module to inline some data, like svgs and fonts, using the asset/inline type. src/index.js import example from './images/example.svg' /* ... */ webpack.config.js module . exports = { /* ... */ module : { rules : [ // Fonts and SVGs { test : / \\.(woff(2)?|eot|ttf|otf|svg|)$ / , type : 'asset/inline' , } , ] , } , } Styles Using a style loader is necessary to be able to do something like import 'file.css' in your scripts. A lot of people these days are using CSS-in-JS , styled-components , and other tools to bring styles into their JavaScript apps. Sometimes, just being able to load in a CSS file is sufficient. This website just has a single CSS file. Maybe you want to use PostCSS , which allows you to use all the latest CSS features in any browser. Or maybe you want to use Sass , the CSS preprocessor. I want to use all three - write in Sass, process in PostCSS, and compile to CSS. That involves bringing in a few loaders and dependencies. sass-loader - Load SCSS and compile to CSS node-sass - Node Sass postcss-loader - Process CSS with PostCSS postcss-preset-env - Sensible defaults for PostCSS css-loader - Resolve CSS imports style-loader - Inject CSS into the DOM npm i -D sass-loader postcss-loader css-loader style-loader postcss-preset-env node-sass Just like with Babel, PostCSS will require a config file, so make that and add it to the root. postcss.config.js module . exports = { plugins : { 'postcss-preset-env' : { browsers : 'last 2 versions' , } , } , } In order to test out that Sass and PostCSS are working, I'll make a src/styles/main.scss with Sass variables and a PostCSS example ( lch ). src/styles/main.scss $font-size : 1rem ; $font-color : lch ( 53 105 40 ) ; html { font-size : $font-size ; color : $font-color ; } Now import the file in index.js and add the four loaders. They compile from last to first, so the last one you'll want in the list is sass-loader as that needs to compile, then PostCSS, then CSS, and finally style-loader , which will inject the CSS into the DOM. src/index.js import './styles/main.scss' /* ... */ webpack.config.js module . exports = { /* ... */ module : { rules : [ // CSS, PostCSS, and Sass { test : / \\.(scss|css)$ / , use : [ 'style-loader' , 'css-loader' , 'postcss-loader' , 'sass-loader' ] , } , ] , } , } Now when you rebuild, you'll notice the Sass and PostCSS has been applied. Note : This is a setup for development. For production, you will use MiniCssExtractPlugin instead of style-loader , which will export the CSS as a minified file. You can this in the webpack 5 boilerplate . Development Running npm run build every single time you make an update is tedious. The bigger your site gets, the longer it will take to build. You'll want to set up two configurations for webpack: a production config, that minifies, optimizes and removes all source maps a development config, that runs webpack in a server, updates with every change, and has source maps Instead of building to a dist file, the development mode will just run everything in memory. To set up for development, you'll install webpack-dev-server . webpack-dev-server - Development server for webpack npm i -D webpack-dev-server For demonstrative purposes, we can just add the development config to the current webpack.config.js file we're building and test it out. However, you'll want to create two config files: one with mode: production and one with mode: development . In the webpack 5 boilerplate , I demonstrate how to use webpack-merge to put all the base webpack config in one file, and any special development or production configs in a webpack.prod.js and webpack.dev.js files. const webpack = require ( 'webpack' ) module . exports = { /* ... */ mode : 'development' , devServer : { historyApiFallback : true , contentBase : path . resolve ( __dirname , './dist' ) , open : true , compress : true , hot : true , port : 8080 , } , plugins : [ /* ... */ // Only update what has changed on hot reload new webpack . HotModuleReplacementPlugin ( ) , ] , } ) We're adding mode: development , and creating a devServer property. I'm setting a few defaults on it - the port will be 8080 , it will automatically open a browser window, and uses hot-module-replacement , which requires the webpack.HotModuleReplacementPlugin plugin. This will allow modules to update without doing a complete reload of the page - so if you update some styles, just those styles will change, and you won't need to reload the entirety of the JavaScript, which speeds up development a lot. Now you'll use the webpack serve command to set up the server. package.json \"scripts\" : { \"start\" : \"webpack serve\" } npm start When you run this command, a link to localhost:8080 will automatically pop up in your browser. Now you can update Sass and JavaScript and watch it update on the fly. Conclusion That should help you get started with webpack. Once again, I've created a production-ready webpack 5 boilerplate, with Babel, Sass, PostCSS, production optimization, and a development server, that has everything from this article but goes into more details. From here, you can easily set up React, Vue, Typescript, or anything else you might want. webpack 5 boilerplate Check it out, play around with it, and enjoy! About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: October 15, 2020 Category: Technical Tags javascript webpack tools tutorial Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/writing-an-emulator-in-javascript-chip8",
        "title": "Writing an Emulator from Scratch in JavaScript (Chip-8) | Tania Rascia's Personal Website",
        "headings": [
            "Writing an Emulator from Scratch in JavaScript (Chip-8)",
            "What is Chip-8?",
            "What Goes Into a Chip-8 Interpreter?",
            "Memory",
            "Program counter",
            "Registers",
            "Index register",
            "Stack",
            "Stack pointer",
            "Timers",
            "Key input",
            "Graphical output",
            "CPU",
            "Decoding Chip-8 Instructions",
            "Bit Masking",
            "Reading the ROM",
            "The Instruction Cycle - Fetch, Decode, Execute",
            "Creating a CPU Interface for I/O",
            "Screen",
            "Keys",
            "CLI App - Interfacing with the Terminal",
            "Screen",
            "Keys",
            "Entrypoint",
            "Web App - Interfacing with the Browser",
            "Screen",
            "Keys",
            "Entrypoint",
            "Native App - Interfacing with the Native Platform",
            "Entrypoint",
            "Screen",
            "Keys",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:12.503762",
        "content": [
            "Writing an Emulator from Scratch in JavaScript (Chip-8) | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me Writing an Emulator from Scratch in JavaScript (Chip-8) I spent a good portion of my childhood playing emulated NES and SNES games on my computer, but I never imagined I'd write an emulator myself one day. However, Vanya Sergeev challenged me to write a Chip-8 interpreter to learn some of the basic concepts of lower-level programming languages and how a CPU works, and the end result is a Chip-8 emulator in JavaScript that I wrote with his guidance. Although there are endless implementations of the Chip-8 interpreter in every programming language imaginable, this one is a bit unique. My Chip8.js code interfaces with not just one but three environments, existing as a web app, a CLI app, and a native app. You can take a look at the web app demo and the source here: Demo Source code There are plenty of guides on how to make a Chip-8 emulator, such as Mastering Chip8 , How to Write an Emulator , and most importantly, Cowgod's Chip-8 Technical Reference , the primary resource used for my own emulator, and a website so old it ends in .HTM . As such, this isn't intended to be a how-to guide, but an overview of how I built the emulator, what major concepts I learned, and some JavaScript specifics for making a browser, CLI, or native app. Contents What is Chip-8 What Goes Into a Chip-8 Interpreter? Decoding Chip-8 Instructions Reading the ROM The Instruction Cycle - Fetch, Decode, Execute Creating a CPU Interface for I/O CLI App - Interfacing with the Terminal Web App - Interfacing with the Browser Native App - Interfacing with the Native Platform What is Chip-8? I had never heard of Chip-8 before embarking on this project, so I assume most people haven't either unless they're already into emulators. Chip-8 is a very simple interpreted programming language that was developed in the 1970s for hobbyist computers. People wrote basic Chip-8 programs that mimicked popular games of the time, such as Pong, Tetris, Space Invaders, and probably other unique games lost to the annuls of time. A virtual machine that plays these games is actually a Chip-8 interpreter , not technically an emulator , as an emulator is software that emulates the hardware of a specific machine, and Chip-8 programs aren't tied to any hardware in specific. Often, Chip-8 interpreters were used on graphing calculators. Nonetheless, it's close enough to being an emulator that it's usually the starting project for anyone who wants to learn how to build an emulator, since it's significantly more simple than creating an NES emulator or anything beyond that. It's also a good starting point for a lot of CPU concepts in general, like memory, stacks, and I/O, things I deal with on a daily basis in the infinitely more complex world of a JavaScript runtime. What Goes Into a Chip-8 Interpreter? There was a lot of pre-learning I had to do to even get started understanding what I was working with, since I had never learned about computer science basics before. So I wrote Understanding Bits, Bytes, Bases, and Writing a Hex Dump in JavaScript which goes over much of that. To summarize, there are two major takeaways of that article: Bits and Bytes - A bit is a binary digit - 0 or 1 , true or false , on or off. Eight bits is a byte, which is the basic unit of information that computers work with. Number Bases - Decimal is the base number system we're most used to dealing with, but computers usually work with binary (base 2) or hexadecimal (base 16). 1111 in binary, 15 in decimal, and f in hexadecimal are all the same number. Nibbles - Also, 4 bits is a nibble, which is cute, and I had to deal with them a bit in this project. Prefixes - In JavaScript, 0x is a prefix for a hex number, and 0b is a prefix for a binary number. I also wrote a CLI snake game in preparation of figuring out how to work with pixels in the terminal for this project. A CPU is the main processor of a computer that executes the instructions of a program. In this case, it consists of various bits of state, described below, and an instruction cycle with fetch, decode, and execute steps. Memory Program counter Registers Index register Stack Stack pointer Key input Graphical output Timers Memory Chip-8 can access up to 4 kilobytes of memory (RAM). (That's 0.002% of the storage space on a floppy disk.) The vast majority of data in the CPU is stored in memory. 4kb is 4096 bytes, and JavaScript has some helpful typed arrays , like Uint8Array which is a fixed-size array of a certain element - in this case 8-bits. let memory = new Uint8Array ( 4096 ) You can access and use this array like a regular array, from memory[0] to memory[4095] and set each element to a value up to 255 . Anything above that will fall back to that (for example, memory[0] = 300 would result in memory[0] === 255 ). Program counter The program counter stores the address of the current instruction as an 16-bit integer . Every single instruction in Chip-8 will update the program counter (PC) when it is done to go on to the next instruction, by accessing memory with PC as the index. In the Chip-8 memory layout, 0x000 to 0x1FF in memory is reserved, so it starts at 0x200 . let PC = 0x200 // memory[PC] will access the address of  the current instruvtion *You'll notice the memory array is 8-bit and the PC is a 16-bit integer, so two program codes will be combined to make a big endian opcode. Registers Memory is generally used for long-term storage and program data, so registers exist as a kind of \"short-term memory\" for immediate data and computations. Chip-8 has 16 8-bit registers . They're referred as V0 through VF . let registers = new Uint8Array ( 16 ) Index register There is a special 16-bit register that accesses a specific point in memory, referred to as I . The I register exists mostly for reading and writing to memory in general, since the addressable memory is 16-bit as well. let I = 0 Stack Chip-8 has the ability to go into subroutines , and a stack for keeping track of where to return to. The stack is 16 16-bit values , meaning the program can go into 16 nested subroutines before experiencing a \"stack overflow\". let stack = new Uint16Array ( 16 ) Stack pointer The stack pointer (SP) is an 8-bit integer that points to a location in the stack. It only needs to be 8-bit even though the stack is 16-bit because it's only referencing the index of the stack, so only needs to be 0 thorough 15 . let SP = - 1 // stack[SP] will access the current return address in the stack Timers Chip-8 is capable of a glorious single beep as far as sound goes. To be honest, I didn't bother implementing an actual output for the \"music\", though the CPU itself is all set up to interface properly with it. There are two timers, both 8-bit registers - a sound timer (ST) for deciding when to beep and a delay timer (DT) for timing some events throughout the game. They count down at 60 Hz . let DT = 0 let ST = 0 Key input Chip-8 was set up to interface with the amazing hex keyboard. It looked like this: \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510",
            "8004 Similarly, 0f00 and 00f0 will mask the variables, and right-shifting ( >> ) them will access the correct nibble. const x = ( 0x8124 & 0x0f00 ) >> 8 // 1 // (0x8124 & 0x0f00) is 100000000 in binary // right shifting by 8 (>> 8) will remove 8 zeroes from the right // This leaves us with 1 const y = ( 0x8124 & 0x00f0 ) >> 4 // 2 // (0x8124 & 0x00f0) is 100000 in binary // right shifting by 4 (>> 4) will remove 4 zeroes from the right // This leaves us with 10, the binary equivalent of 2 So for each of the 36 instructions, I made an object with a unique identifier, mask, pattern, and arguments. const instruction = { id : 'ADD_VX_VY' , name : 'ADD' , mask : 0xf00f , pattern : 0x8004 , arguments : [ { mask : 0x0f00 , shift : 8 , type : 'R' } , { mask : 0x00f0 , shift : 4 , type : 'R' } , ] , } Now that I have these objects, each opcode can be disassembled into a unique identifier, and the values of the arguments can be determined. I made an INSTRUCTION_SET array containing all these instructions and a disassembler. I also wrote tests for every one to ensure they all worked correctly. Disassembler function disassemble ( opcode ) { // Find the instruction from the opcode const instruction = INSTRUCTION_SET . find ( ( instruction ) => ( opcode & instruction . mask ) === instruction . pattern ) // Find the argument(s) const args = instruction . arguments . map ( ( arg ) => ( opcode & arg . mask ) >> arg . shift ) // Return an object containing the instruction data and arguments return { instruction , args } } Reading the ROM Since we're considering this project an emulator, each Chip-8 program file can be considered a ROM. The ROM is just binary data, and we're writing the program to interpret it. We can imagine the Chip8 CPU to be a virtual console, and a Chip-8 ROM to be a virtual game cartridge. The ROM buffer will take the raw binary file and translate it into 16-bit big endian words (a word is a unit of data consisting of a set amount of bits). This is where that hex dump article comes in handy. I'm collecting the binary data and converting it into blocks that I can use, in this case the 16-bit opcodes. Big endian means that the most significant byte will be first in the buffer, so when it encounters the two bytes 12 34 , it will create a 1234 16-bit code. A little endian code would look like 3412 . RomBuffer.js class RomBuffer { /**",
            "*/ constructor ( fileContents ) { this . data = [ ] // Read the raw data buffer from the file const buffer = fileContents // Create 16-bit big endian opcodes from the buffer for ( let i = 0 ; i < buffer . length ; i += 2 ) { this . data . push ( ( buffer [ i ] << 8 ) | ( buffer [ i + 1 ] << 0 ) ) } } } The data returned from this buffer is the \"game\". The CPU will have a load() method - like loading a cartridge into a console - that will take the data from this buffer and place it into memory. Both the buffer and memory act as arrays in JavaScript, so loading the memory is just a matter of looping through the buffer and placing the bytes into the memory array. The Instruction Cycle - Fetch, Decode, Execute Now I have the instruction set and game data all ready to be interpreted. The CPU just needs to do something with it. The instruction cycle consists of three steps - fetch, decode, and execute. Fetch - Get the data stored in memory using the program counter Decode - Disassemble the 16-bit opcode to get the decoded instruction and argument values Execute - Perform the operation based on the decoded instruction and update the program counter Here's a condensed and simplified version of how load, fetch, decode, and execute work in the code. These CPU cycle methods are private and not exposed. The first step, fetch , will access the current opcode from memory. Fetch // Get address value from memory function fetch ( ) { return memory [ PC ] } The next step, decode , will disassemble the opcode into the more understandable instruction set I created earlier. Decode // Decode instruction function decode ( opcode ) { return disassemble ( opcode ) } The last step, execute , will consist of a switch with all 36 instructions as cases, and perform the relevant operation for the one it finds, then update the program counter so the next fetch cycle finds the next opcode. Any error handling will go here as well, which will halt the CPU. Execute // Execute instruction function execute ( instruction ) { const { id , args } = instruction switch ( id ) { case 'ADD_VX_VY' : // Perform the instruction operation registers [ args [ 0 ] ] += registers [ args [ 1 ] ] // Update program counter to next instruction PC = PC + 2 break case 'SUB_VX_VY' : // etc... } } What I end up with is the CPU, with all the state and the instruction cycle. There are two methods exposed on the CPU - load , which is the equivalent of loading a cartridge into a console with the romBuffer as the game, and step , which is the three functions of the instruction cycle (fetch, decode, execute). step will run in an infinite loop. CPU.js class CPU { constructor ( ) { this . memory = new Uint8Array ( 4096 ) this . registers = new Uint8Array ( 16 ) this . stack = new Uint16Array ( 16 ) this . ST = 0 this . DT = 0 this . I = 0 this . SP = - 1 this . PC = 0x200 } // Load buffer into memory load ( romBuffer ) { this . reset ( ) romBuffer . forEach ( ( opcode , i ) => { this . memory [ i ] = opcode } ) } // Step through each instruction step ( ) { const opcode = this . _fetch ( ) const instruction = this . _decode ( opcode ) this . _execute ( instruction ) } _fetch ( ) { return this . memory [ this . PC ] } _decode ( opcode ) { return disassemble ( opcode ) } _execute ( instruction ) { const { id , args } = instruction switch ( id ) { case 'ADD_VX_VY' : this . registers [ args [ 0 ] ] += this . registers [ args [ 1 ] ] this . PC = this . PC + 2 break } } } Only one aspect of the project is missing now, and a pretty important one - the ability to actually play and see the game. Creating a CPU Interface for I/O So now I have this CPU that's interpreting and executing instructions and updating all its own state, but I can't do anything with it yet. In order to play a game, you have to see it and be able to interact with it. This is where input/output , or I/O, comes in. I/O is the communication between the CPU and the outside world. Input is data received by the CPU Output is data sent from the CPU So for me, the input will be through the keyboard, and the output will be graphics onto the screen. I could just mix the I/O code in with the CPU directly, but then I would be tied to one environment. By creating a generic CPU interface to connect the I/O and the CPU, I can interface with any system. The first thing to do was look through the instructions and find any that have to do with I/O. A few examples of those instructions: CLS - Clear the screen LD Vx, K - Wait for a key press, store the value of the key in Vx. DRW Vx, Vy, nibble - Display n-byte sprite starting at memory location I Based on that, we'll want the interface to have methods like: clearDisplay() waitKey() drawPixel() ( drawSprite would have been 1:1, but it ended up to be easier doing it pixel-by-pixel from the interface) JavaScript doesn't really have a concept of an abstract class as far as I could find, but I created one by making a class that could not itself be instantiated, with methods that can only be used from classes that extend it. Here are all the interface methods on the class: CpuInterface.js // Abstract CPU interface class class CpuInterface { constructor ( ) { if ( new . target === CpuInterface ) { throw new TypeError ( 'Cannot instantiate abstract class' ) } } clearDisplay ( ) { throw new TypeError ( 'Must be implemented on the inherited class.' ) } waitKey ( ) { throw new TypeError ( 'Must be implemented on the inherited class.' ) } getKeys ( ) { throw new TypeError ( 'Must be implemented on the inherited class.' ) } drawPixel ( ) { throw new TypeError ( 'Must be implemented on the inherited class.' ) } enableSound ( ) { throw new TypeError ( 'Must be implemented on the inherited class.' ) } disableSound ( ) { throw new TypeError ( 'Must be implemented on the inherited class.' ) } } Here's how it will work: the interface will be loaded into the CPU on initialization, and the CPU will be able to access methods on the interface. class CPU { // Initialize the interface constructor ( cpuInterface ) { this . interface = cpuInterface } _execute ( instruction ) { const { id , args } = instruction switch ( id ) { case 'CLS' : // Use the interface while executing an instruction this . interface . clearDisplay ( ) } } Before setting up the interface with any real environment (web, terminal, or native) I created a mock interface for tests. It doesn't actually hook up to any I/O but it helped me to set up the state of the interface and prepare it for real data. I'll ignore the sound ones, because that was never implemented with actual speaker output, so that leaves the keyboard and screen. Screen The screen has a resolution of 64 pixels wide by 32 pixels tall. So as far as the CPU and interface is concerned, its a 64x32 grid of bits that are either on or off. To set up an empty screen, I can just make a 3D array of zeroes to represent all pixels being off. A frame buffer is a portion of memory containing a bitmapped image that will be rendered to a display. MockCpuInterface.js // Interface for testing class MockCpuInterface extends CpuInterface { constructor ( ) { super ( ) // Store the screen data in the frame buffer this . frameBuffer = this . createFrameBuffer ( ) } // Create 3D array of zeroes createFrameBuffer ( ) { let frameBuffer = [ ] for ( let i = 0 ; i < 32 ; i ++ ) { frameBuffer . push ( [ ] ) for ( let j = 0 ; j < 64 ; j ++ ) { frameBuffer [ i ] . push ( 0 ) } } return frameBuffer } // Update a single pixel with a value (0 or 1) drawPixel ( x , y , value ) { this . frameBuffer [ y ] [ x ] ^= value } } So I end up with something like this to represent the screen (when printing it as a newline-separated string): 0000000000000000000000000000000000000000000000000000000000000000",
            "global . RomBuffer = RomBuffer The web entrypoint uses the same cycle function as the terminal implementation, but has a function to fetch each ROM and reset the display every time a new one is selected. I'm used to working with json data and fetch, but in this case I fetched the raw arrayBuffer from the response. // Fetch the ROM and load the game async function loadRom ( ) { const rom = event . target . value const response = await fetch ( ` ./roms/ ${ rom } ` ) const arrayBuffer = await response . arrayBuffer ( ) const uint8View = new Uint8Array ( arrayBuffer ) const romBuffer = new RomBuffer ( uint8View ) cpu . interface . clearDisplay ( ) cpu . load ( romBuffer ) } // Add the ability to select a game document . querySelector ( 'select' ) . addEventListener ( 'change' , loadRom ) The HTML includes a canvas and a select . < canvas > </ canvas > < select > < option disabled selected > Load ROM... </ option > < option value = \" CONNECT4 \" > Connect4 </ option > < option value = \" PONG \" > Pong </ option > </ select > Then I just deployed the code onto GitHub pages because it's static. Native App - Interfacing with the Native Platform I also made an experimental native UI implementation. I used Raylib , a programming library for programming simple games that had bindings for Node.js . I consider this version experimental just because it's really slow compared to the other ones, so it's less usable, but everything works correctly with the keys and screen. Entrypoint Raylib works a bit differently than the other implementations because Raylib itself runs in a loop, meaning I won't end up using the cycle function. const r = require ( 'raylib' ) // As long as the window shouldn't close... while ( ! r . WindowShouldClose ( ) ) { // Fetch, decode, execute cpu . step ( ) r . BeginDrawing ( ) // Paint screen with amy changes r . EndDrawing ( ) } r . CloseWindow ( ) Screen Within the beginDrawing() and endDrawing() methods, the screen will update. For the Raylib implementation I accessed the interface directly from the script instead of keeping everything contained in the interface, but it works. r . BeginDrawing ( ) cpu . interface . frameBuffer . forEach ( ( y , i ) => { y . forEach ( ( x , j ) => { if ( x ) { r . DrawRectangleRec ( { x , y , width , height } , r . GREEN ) } else { r . DrawRectangleRec ( { x , y , width , height } , r . BLACK ) } } ) } ) r . EndDrawing ( ) Keys Getting the keys to work on Raylib was the last thing I worked on. It was more difficult to figure out because I had to do everything in the IsKeyDown method - there was a GetKeyPressed method, but it had side effects and caused problems. So instead of just waiting for a keypress like the other implementations, I had to loop through all keys and check if they were down, and append them to the key bitmask if so. let keyDownIndices = 0 // Run through all possible keys for ( let i = 0 ; i < nativeKeyMap . length ; i ++ ) { const currentKey = nativeKeyMap [ i ] // If key is already down, add index to key down map // This will also lift up any keys that aren't pressed if ( r . IsKeyDown ( currentKey ) ) { keyDownIndices |= 1 << i } } // Set all pressed keys cpu . interface . setKeys ( keyDownIndices ) That's it for the native implementation. It was more of a challenge than the other ones, but I'm glad I did it to round out the interface and see how well it would work on drastically different platforms. Conclusion So that's my Chip-8 project! Once again, you can check out the source on GitHub. I learned a lot about lower level programming concepts and how a CPU operates, and also about the capabilities of JavaScript outside of a browser app or REST API server. I still have a few things left to do in this project, like attempt to make a (very) simple game, but the emulator is complete, and I'm proud to have finished it. About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: April 13, 2020 Category: Technical Tags javascript node games Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/websockets-in-redux/",
        "title": "How to Use WebSockets in a Redux Application | Tania Rascia's Personal Website",
        "headings": [
            "How to Use WebSockets in a Redux Application",
            "Using WebSockets",
            "Socket Class",
            "Creating Redux Middleware",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:13.022199",
        "content": [
            "How to Use WebSockets in a Redux Application | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me How to Use WebSockets in a Redux Application At some point, you might work on a React/Redux application that requires the use of WebSockets, such as for chat or live updates on a dashboard. It might be confusing at first to know where to put the WebSocket state and events relative to React components and Redux state. Redux Middleware is a good place to handle all your WebSocket needs, which I'll lay out here. You can also see a working implementation of this method used in this minimal open-source chat application I made with React/Redux, TypeScript, and Socket.io. I opted to just use the browser's WebSocket API for this article, though. Prerequisites Understanding React Understanding Redux Goals Set up a Socket client and Redux middleware for handling a WebSocket connection Using WebSockets The WebSocket API is a Web API that makes it possible to open a connection between a client and server. If you wanted to make something like a chat application without a WebSocket, you would have to utilize polling, or continuously making API requests at an interval. The client portion of the connection is set up with new WebSocket(url) , and it handles open , close , and message events. // Initialize WebSocket connection const socket = new WebSocket ( 'wss://my-websocket-url' ) // Listen for open connection socket . addEventListener ( 'open' , ( event ) => { console . log ( 'You say hello...' ) } ) // Listen for messages socket . addEventListener ( 'message' , ( event ) => { console . log ( 'Incoming message: ' , event . data ) } ) // Listen for close connection socket . addEventListener ( 'close' , ( event ) => { console . log ( '...and I say goodbye!' ) } ) // Send a message socket . send ( 'A message' ) // Close websocket connection socket . close ( ) Socket Class I often like to make a little class API to make it slightly cleaner and easier to work with code, and not have to make any global variables. Though I'm not sure exactly why I feel that this is so much better than having const socket = new WebSocket(url) defined somewhere. But here's a class that connects, disconnects, sends messages, and handles events. @/utils/Socket.js class Socket { constructor ( ) { this . socket = null } connect ( url ) { if ( ! this . socket ) { this . socket = new WebSocket ( url ) } } disconnect ( ) { if ( this . socket ) { this . socket . close ( ) this . socket = null } } send ( message ) { if ( this . socket ) { this . socket . send ( JSON . stringify ( message ) ) } } on ( eventName , callback ) { if ( this . socket ) { this . socket . addEventListener ( eventName , callback ) } } } export { Socket } Now this can be used in basically the same way, and it makes it simple to work with multiple WebSockets, which I have needed to do on some projects. The example here is quite simple, but you might have more than just open , message and close events, and you might add other things into the class like checking for a heartbeat, applying retries, etc. import { Socket } from '@/utils/Socket' const socket = new Socket ( ) socket . connect ( 'wss://my-websocket-url' ) socket . on ( 'open' , ( event ) => { console . log ( 'You say hello...' ) } ) socket . on ( 'message' , ( event ) => { console . log ( 'Incoming message: ' , event . data ) } ) socket . on ( 'close' , ( event ) => { console . log ( '...and I say goodbye!' ) } ) socket . send ( 'A message' ) socket . disconnect ( ) Creating Redux Middleware Here is an example of Redux middleware: const middleware = ( params ) => ( next ) => ( action ) => { const { dispatch , getState } = params if ( action . type === 'action you want to intercept' ) { // Do something } return next ( action ) } You have access to the entire current state with getState , and you have access to dispatching an action with dispatch . Middleware is similar to a Redux thunk action. So for the Socket middleware, you'll want to intercept the open and close events for the WebSocket that have been dispatched from elsewhere. It might be on login to the application, as with an entire chat application, or it might be on mount of a specific page, as with a live dashboard. Using socket/connect and socket/disconnect actions, you can pass through an initialized instance of the Socket class created earlier. On socket/connect , you'll open the WebSocket connection and handle all events. On socket/disconnect , you'll close the connection. @/middleware/socket.js export const socketMiddleware = ( socket ) => ( params ) => ( next ) => ( action ) => { const { dispatch , getState } = params const { type } = action switch ( type ) { case 'socket/connect' : socket . connect ( 'wss://example.com' ) socket . on ( 'open' , ( ) => { } ) socket . on ( 'message' , ( data ) => { } ) socket . on ( 'close' , ( ) => { } ) break case 'socket/disconnect' : socket . disconnect ( ) break default : break } return next ( action ) } Now the connection should be initialized when you call socket/connect , and throughout the life of the application the WebSocket will be listening via the event handlers, until you end the connection. Finally, you'll add the middleware to the store configuration, shown here using the Redux Toolkit method which is currently the officially preferred method. @/store/index.js import { configureStore , getDefaultMiddleware } from '@reduxjs/toolkit' import { rootReducer } from '@/store/rootReducer' import { Socket } from '@/utils/Socket' export const store = configureStore ( { reducer : rootReducer , middleware : [ socketMiddleware ( new Socket ( ) ) , ... getDefaultMiddleware ( ) ] , } ) Now wherever you decide to call the connect and disconnect functions within the React component will have the desired effect. import React , { useEffect } from 'react' import { useDispatch } from 'react-redux' export const LiveDashboardPage = ( ) => { const dispatch = useDispatch ( ) useEffect ( ( ) => { dispatch ( { type : 'socket/connect' } ) return ( ) => { dispatch ( { type : 'socket/disconnect' } ) } } , [ ] ) } Conclusion This is a very minimalist setup for getting a WebSocket connection into a Redux application, but it covers the main gist of it. Use Middleware to intercept connect and disconnect events, and listen to all the events upon initialization and handle them accordingly. One thing to note with this particular approach is that every tab will open a new WebSocket connection. I've done some poking around but I haven't come to a definitive conclusion on whether or not 1 tab = 1 connection is the best approach, or whether using the SharedWorker API and BroadcastChannel API is a better approach. I plan to follow up this article with one about sharing a connection across multiple tabs using these APIs. About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: February 15, 2023 Category: Technical Tags redux api javascript Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/",
        "title": "Tania Rascia's Personal Website",
        "headings": [
            "Hey, I'm Tania",
            "ArticlesAll Articles",
            "Creating a Keyboard Shortcut Hook in React (Deep Dive)",
            "Tables with Fixed Headers and Horizontal Scroll",
            "How to Use WebSockets in a Redux Application",
            "Understanding the GraphQL Type System",
            "Testing API Calls With React Testing Library and Jest",
            "NotesAll Notes",
            "2023 into 2024",
            "2022 into 2023",
            "The Lore of Animorphs (an Ode)",
            "Tending to My Digital Garden",
            "Memories of Josh",
            "Highlights",
            "ProjectsAll Projects"
        ],
        "last_updated": "2024-10-23T01:36:13.135705",
        "content": [
            "Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me Hey, I'm Tania I'm a software developer who makes open-source projects and writes about code and life. On this site, you can check out all the technical articles I've written, read some of my personal notes , or learn more about me . Articles All Articles Creating a Keyboard Shortcut Hook in React (Deep Dive) October 2024 New! Tables with Fixed Headers and Horizontal Scroll October 2024 New! How to Use WebSockets in a Redux Application February 2023 Understanding the GraphQL Type System January 2023 Testing API Calls With React Testing Library and Jest December 2022 Notes All Notes 2023 into 2024 January 2024 2022 into 2023 January 2023 The Lore of Animorphs (an Ode) December 2022 Tending to My Digital Garden December 2022 Memories of Josh August 2022 Highlights November 17, 2021 An Introduction to GraphQL June 23, 2021 How to Structure and Organize a React Application October 15, 2020 How to Set Up webpack 5 From Scratch September 10, 2020 The Event Loop, Callbacks, Promises, and Async/Await in JavaScript March 09, 2020 How to Use Redux and React February 17, 2020 How to Set up a Mac for Development December 02, 2019 A Complete Guide to CSS Concepts and Fundamentals May 16, 2019 How to Use Vue, the JavaScript Framework February 11, 2019 Everything I Know as a Software Developer Without a Degree (2019) August 20, 2018 How to Use React, the JavaScript Framework October 12, 2017 Design for Developers: Specific Steps to Improve Your Website Design January 09, 2017 How to Use the Command Line in Linux and macOS Projects All Projects 2022 Keyboard Accordion Play the accordion with your keyboard! Article Demo 2020 TakeNote A free, open source notes app for the web. Article Demo 2019 Chip8 A retro game emulator for three platforms. Article Demo 2021 Sokoban A web-based Sokoban implementation. Article Demo 2015 New Moon The optimized dark theme for web development. Demo 2019 Snek A terminal-based Snake implementation. Article Demo Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/redux-react-guide/",
        "title": "How to Use Redux and React | Tania Rascia's Personal Website",
        "headings": [
            "How to Use Redux and React",
            "What is Redux?",
            "Why should I use Redux?",
            "Terminology",
            "Actions",
            "Action creators",
            "Reducers",
            "Store",
            "Dispatch",
            "Connect",
            "Getting Started",
            "Setting up the Redux Store",
            "Bringing in reducers",
            "Redux DevTools",
            "Setting up Redux Actions",
            "Responding to actions",
            "Connecting Redux to React Components",
            "The End",
            "Redux Toolkit",
            "Advantages to Redux Toolkit",
            "Store",
            "Slices",
            "Selecting Redux state in a React component",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:13.197080",
        "content": [
            "How to Use Redux and React | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me How to Use Redux and React Do you have experience using React ? Have you heard of Redux , but you've put off learning it because it looks very complicated and all the guides seem overwhelming? If that's the case, this is the article for you! Contain your fear of containing state and come along with me on this relatively painless journey. Prerequisites You must already know how to use React for this tutorial, as I will not be explaining any aspects of React itself. Familiarity with HTML & CSS . Familiarity with ES6 syntax and features . Knowledge of React terminology: JSX, State, Components, Props, Lifecycle and Hooks Knowledge of React Router Knowledge of asynchronous JavaScript and making API calls Also, download Redux DevTools for Chrome or for FireFox . Goals In this tutorial, we will build a small blog app. It will fetch posts and comments from an API. I've created the same app with both plain Redux, and Redux Toolkit (RTK), the officially sanctioned toolset for Redux. Here are the links to the source and demos of both the plain and RTK versions. React + Redux Application (Plain Redux) Source Demo Application React + Redux Toolkit Application Source Demo Application Note : The applications are pulling from a real API via JSON Placeholder API . Due to rate limiting on CodeSandbox, the API may appear slow, but it has nothing to do with the Redux application itself. You can also clone the repository locally. We will learn: What is Redux and why you might want to use it The terminology of Redux: actions, reducers, store, dispatch, connect, and container Making asynchronous API calls with Redux Thunk How to make a small, real-world application with React and Redux How to use Redux Toolkit to simplify Redux app development What is Redux? Redux is a state container for JavaScript applications. Normally with React, you manage state at a component level, and pass state around via props. With Redux, the entire state of your application is managed in one immutable object. Every update to the Redux state results in a copy of sections of the state, plus the new change. Redux was originally created by Dan Abramov and Andrew Clark . Why should I use Redux? Easily manage global state - access or update any part of the state from any Redux-connected component Easily keep track of changes with Redux DevTools - any action or state change is tracked and easy to follow with Redux. The fact that the entire state of the application is tracked with each change means you can easily do time-travel debugging to move back and forth between changes. The downside to Redux is that there's a lot of initial boilerplate to set up and maintain (especially if you use plain Redux without Redux Toolkit). A smaller application may not need Redux and may instead benefit from simply using the Context API for global state needs. In my personal experience, I set up an application with Context alone, and later needed to convert everything over to Redux to make it more maintainable and organized. Terminology Usually I don't like to just make a list of terms and definitions, but Redux has a few that are likely unfamiliar, so I'm just going to define them all up front to make it easy to refer back to them. Although you can skip to the beginning of the tutorial section , I think it would be good to read through all the definitions just to get exposure and an idea of them in your head first. Actions Reducers Store Dispatch Connect I'll just use the typical todo application, and the action of deleting a todo, for the examples. Actions An action sends data from your application to the Redux store. An action is conventionally an object with two properties: type and (optional) payload . The type is generally an uppercase string (assigned to a constant) that describes the action. The payload is additional data that may be passed. Action Type const DELETE_TODO = 'posts/deleteTodo' Action { type : DELETE_TODO , payload : id , } Action creators An action creator is a function that returns an action. Action Creator const deleteTodo = ( id ) => ( { type : DELETE_TODO , payload : id } ) Reducers A reducer is a function that takes two parameters: state and action . A reducer is immutable and always returns a copy of the entire state. A reducer typically consists of a switch statement that goes through all the possible action types. Reducer const initialState = { todos : [ { id : 1 , text : 'Eat' } , { id : 2 , text : 'Sleep' } , ] , loading : false , hasErrors : false , } function todoReducer ( state = initialState , action ) { switch ( action . type ) { case DELETE_TODO : return { ... state , todos : state . todos . filter ( ( todo ) => todo . id !== action . payload ) , } default : return state } } Store The Redux application state lives in the store , which is initialized with a reducer. When used with React, a <Provider> exists to wrap the application, and anything within the Provider can have access to Redux. Store import { createStore } from 'redux' import { Provider } from 'react-redux' import reducer from './reducers' const store = createStore ( reducer ) render ( < Provider store = { store } > < App /> </ Provider > , document . getElementById ( 'root' ) ) Dispatch dispatch is a method available on the store object that accepts an object which is used to update the Redux state. Usually, this object is the result of invoking an action creator. const Component = ( { dispatch } ) => { useEffect ( ( ) => { dispatch ( deleteTodo ( ) ) } , [ dispatch ] ) } Connect The connect() function is one typical way to connect React to Redux. A connected component is sometimes referred to as a container . Okay, that about covers it for the major terms of Redux. It can be overwhelming to read the terminology without any context, so let's begin. Getting Started For ease of getting started quickly, my example uses Create React App to set up the environment. npx create-react-app redux-tutorial cd redux-tutorial Redux requires a few dependencies. Redux - Core library React Redux - React bindings for Redux Redux Thunk - Async middleware for Redux Redux DevTools Extension - Connects Redux app to Redux DevTools You can yarn add or npm i them, and I'll be using react-router-dom as well, but that's it for extra dependencies. npm i \\ redux \\ react-redux \\ redux-thunk \\ redux-devtools-extension \\ react-router-dom And delete all the boilerplate. We'll add everything we need from scratch instead. cd src && rm * # move to src and delete all files within We'll make directories for Redux reducers and Redux actions , as well as pages and components which you should already be familiar with from React. mkdir actions components pages reducers And we'll bring back index.js , App.js , and index.css . touch index.js index.css App.js So at this point your project directory tree looks like this. \u2514\u2500\u2500 src/",
            "\u2514\u2500\u2500 index.js For the index.css file, just take the contents of this gist and paste it. I intend only to go over functionality and not anything about style, so I just wrote some very basic styles to ensure the site looks decent enough. Now we have enough boilerplate to get started, so we'll begin working on the entrypoint. Setting up the Redux Store When I first started learning Redux, it seemed so overwhelming because every app I looked at had index.js set up a bit differently. After looking at a lot of the more up-to-date apps and taking the aspects that were common across all of them, I got a good feel for what should really be in a Redux app, and what is just people moving things around to be unique. There are plenty of tutorials out there that show you how to get a very basic Redux store with todos set up, but I don't find that very useful for knowing how to make a production level setup, so I'm going to set it up with everything you need from the get-go. Even so, there will be some opinionated aspects because Redux is very flexible. In index.js , we'll be bringing in a few things. createStore , to create the store that will maintain the Redux state applyMiddleware , to be able to use middleware, in this case thunk Provider , to wrap the entire application in Redux thunk , a middleware that allows us to make asynchronous actions in Redux composeWithDevTools , code that connects your app to Redux DevTools index.js // External imports import React from 'react' import { render } from 'react-dom' import { createStore , applyMiddleware } from 'redux' import { Provider } from 'react-redux' import thunk from 'redux-thunk' import { composeWithDevTools } from 'redux-devtools-extension' // Local imports import App from './App' import rootReducer from './reducers' // Assets import './index.css' const store = createStore ( rootReducer , composeWithDevTools ( applyMiddleware ( thunk ) ) ) render ( < Provider store = { store } > < App /> </ Provider > , document . getElementById ( 'root' ) ) Put a component in App.js . We'll modify this later, but we just want to get the app up and running for now. App.js import React from 'react' const App = ( ) => { return < div > Hello, Redux </ div > } export default App Bringing in reducers The last thing to do is bring in the reducer. A reducer is a function that determines changes to Redux state. It is a pure function that returns a copy of the state with the new change. A neat feature of Redux is that we can have many reducers, and combine them all into one root reducer that the store uses, using combineReducers . This leads to us being able to easily organize our code while still having everything in one root state tree. Since this app will be like a blog, it will have a list of posts, and we'll put that in the postsReducer in a moment. Having this combineReducers method allows us to bring whatever we want in - a commentsReducer , an authReducer , and so on. In reducers/index.js , create the file that will combine all reducers. reducers/index.js import { combineReducers } from 'redux' import postsReducer from './postsReducer' const rootReducer = combineReducers ( { posts : postsReducer , } ) export default rootReducer Finally, we'll make the postsReducer . We can set it up with an initial state. Just like you might expect from a regular React component, we'll have a loading and hasErrors state, as well as a posts array, where all the posts will live. First we'll set it up with no actions in the switch, just a default case that returns the entire state. reducers/postsReducer.js export const initialState = { posts : [ ] , loading : false , hasErrors : false , } export default function postsReducer ( state = initialState , action ) { switch ( action . type ) { default : return state } } Now we at least have enough setup that the application will load without crashing. Redux DevTools With the application loading and the Redux <Provider> set up, we can take a look at Redux DevTools. After downloading it, it'll be a tab in your Developer Tools. If you click on State , you'll see the entire state of the application so far. There's not much in here yet, but Redux DevTools is amazing once you get to having a lot of reducers and actions.",
            "It keeps track of all changes to your app and makes debugging a breeze compared to plain React. Setting up Redux Actions So now we have a reducer for posts, but we don't have any actions, meaning the reducer will only return the state without modifying it in any way. Actions are how we communicate with the Redux store. For this blog app, we're going to want to fetch posts from an API and put them in our Redux state. Since fetching posts is an asynchronous action, it will require the use of Redux thunk. Fortunately, we don't have to do anything special to use thunk beyond setting it up in the store, which we already did. Create a actions/postsActions.js . First, we'll define the action types as constants. This is not necessary, but is a common convention, and makes it easy to export the actions around and prevent typos. We want to do three things: getPosts - begin telling Redux we're going to fetch posts from an API getPostsSuccess - pass the posts to Redux on successful API call getPostsFailure - inform Redux that an error was encountered during Redux on failed API call actions/postsActions.js // Create Redux action types export const GET_POSTS = 'GET_POSTS' export const GET_POSTS_SUCCESS = 'GET_POSTS_SUCCESS' export const GET_POSTS_FAILURE = 'GET_POSTS_FAILURE' Then create action creators , functions that return an action , which consists of the type and an optional payload containing data. actions/postsActions.js // Create Redux action creators that return an action export const getPosts = ( ) => ( { type : GET_POSTS , } ) export const getPostsSuccess = ( posts ) => ( { type : GET_POSTS_SUCCESS , payload : posts , } ) export const getPostsFailure = ( ) => ( { type : GET_POSTS_FAILURE , } ) Finally, make the asynchronous thunk action that combines all three of the above actions. When called, it will dispatch the initial getPosts() action to inform Redux to prepare for an API call, then in a try/catch , do everything necessary to get the data, and dispatch a success or failure action as necessary. actions/postsActions.js // Combine them all in an asynchronous thunk export function fetchPosts ( ) { return async ( dispatch ) => { dispatch ( getPosts ( ) ) try { const response = await fetch ( 'https://jsonplaceholder.typicode.com/posts' ) const data = await response . json ( ) dispatch ( getPostsSuccess ( data ) ) } catch ( error ) { dispatch ( getPostsFailure ( ) ) } } } Great, we're all done with creating actions now! All that's left to do is tell the reducer what to do with the state on each action. Responding to actions Back at our post reducer, we have a switch that isn't doing anything yet. reducers/postsReducer.js export default function postsReducer ( state = initialState , action ) { switch ( action . type ) { default : return state } } Now that we have actions, we can bring them in from the postsActions page. // Import all actions import * as actions from '../actions/postsActions' For each action, we'll make a case , that returns the entire state plus whatever change we're making to it. For GET_POSTS , for example, all we want to do is tell the app to set loading to true since we'll be making an API call. case actions . GET_POSTS : return { ... state , loading : true } GET_POSTS - begin loading GET_POSTS_SUCCESS - the app has posts, no errors, and should stop loading GET_POSTS_FAILURE - the app has errors and should stop loading Here's the whole reducer. reducers/postsReducer.js import * as actions from '../actions/postsActions' export const initialState = { posts : [ ] , loading : false , hasErrors : false , } export default function postsReducer ( state = initialState , action ) { switch ( action . type ) { case actions . GET_POSTS : return { ... state , loading : true } case actions . GET_POSTS_SUCCESS : return { posts : action . payload , loading : false , hasErrors : false } case actions . GET_POSTS_FAILURE : return { ... state , loading : false , hasErrors : true } default : return state } } Now our actions and reducers are ready, so all that's left to do is connect everything to the React app. Connecting Redux to React Components Since the demo app I've created uses React Router to have a few routes - a dashboard, a listing of all posts, and an individual posts page, I'll bring React Router in now. I'll just bring in the dashboard and all posts listing for this demo. App.js import React from 'react' import { BrowserRouter as Router , Switch , Route , Redirect } from 'react-router-dom' import DashboardPage from './pages/DashboardPage' import PostsPage from './pages/PostsPage' const App = ( ) => { return ( < Router > < Switch > < Route exact path = \" / \" component = { DashboardPage } /> < Route exact path = \" /posts \" component = { PostsPage } /> < Redirect to = \" / \" /> </ Switch > </ Router > ) } export default App We can create the dashboard page, which is just a regular React component. pages/DashboardPage.js import React from 'react' import { Link } from 'react-router-dom' const DashboardPage = ( ) => ( < section > < h1 > Dashboard </ h1 > < p > This is the dashboard. </ p > < Link to = \" /posts \" className = \" button \" > View Posts </ Link > </ section > ) export default DashboardPage For each post, let's make a Post component that will display the title and an excerpt of the text of the article. Make a Post.js in the components subdirectory. components/Post.js import React from 'react' export const Post = ( { post } ) => ( < article className = \" post-excerpt \" > < h2 > { post . title } </ h2 > < p > { post . body . substring ( 0 , 100 ) } </ p > </ article > ) Components that do not connect to Redux are still important and useful for smaller, reusable areas, such as this Post component. Now the interesting part comes in for the posts page - bringing Redux into React. To do this we'll use connect from react-redux . First, we'll just make a regular component for the page. pages/PostsPage.js import React from 'react' const PostsPage = ( ) => { return ( < section > < h1 > Posts </ h1 > </ section > ) } export default PostsPage Then we'll bring in connect . The connect function is a higher-order function that connects the Redux store to a React component. We'll pass a parameter called mapStateToProps to connect . This aptly named function will take any state from the Redux store and pass it to the props of the React component. We'll bring in loading , posts , and hasErrors from the Redux postsReducer . pages/PostsPage.js import React from 'react' import { connect } from 'react-redux' // Redux state is now in the props of the component const PostsPage = ( { loading , posts , hasErrors } ) => { return ( < section > < h1 > Posts </ h1 > </ section > ) } // Map Redux state to React component props const mapStateToProps = ( state ) => ( { loading : state . posts . loading , posts : state . posts . posts , hasErrors : state . posts . hasErrors , } ) // Connect Redux to React export default connect ( mapStateToProps ) ( PostsPage ) Since this component uses state from the same reducer, we could also write state => state.posts . However, learning how to write it the long way is useful to know in case you need to bring multiple reducers into the same component. Finally, we'll bring in the asynchronous fetchPosts from the actions, which is the action that combines the whole lifecycle of fetching all posts into one. Using useEffect from React, we'll dispatch fetchPosts when the component mounts. dispatch will automatically be available on a connected component. pages/PostsPage.js import React , { useEffect } from 'react' import { connect } from 'react-redux' // Bring in the asynchronous fetchPosts action import { fetchPosts } from '../actions/postsActions' const PostsPage = ( { dispatch , loading , posts , hasErrors } ) => { useEffect ( ( ) => { dispatch ( fetchPosts ( ) ) } , [ dispatch ] ) return ( < section > < h1 > Posts </ h1 > </ section > ) } const mapStateToProps = ( state ) => ( { loading : state . posts . loading , posts : state . posts . posts , hasErrors : state . posts . hasErrors , } ) export default connect ( mapStateToProps ) ( PostsPage ) All that's left to do at this point is display all three possible states of the page - whether it's loading, has an error, or successfully retrieved the posts from the API. pages/PostsPage.js import React , { useEffect } from 'react' import { connect } from 'react-redux' import { fetchPosts } from '../actions/postsActions' import { Post } from '../components/Post' const PostsPage = ( { dispatch , loading , posts , hasErrors } ) => { useEffect ( ( ) => { dispatch ( fetchPosts ( ) ) } , [ dispatch ] ) // Show loading, error, or success state const renderPosts = ( ) => { if ( loading ) return < p > Loading posts... </ p > if ( hasErrors ) return < p > Unable to display posts. </ p > return posts . map ( ( post ) => < Post key = { post . id } post = { post } /> ) } return ( < section > < h1 > Posts </ h1 > { renderPosts ( ) } </ section > ) } const mapStateToProps = ( state ) => ( { loading : state . posts . loading , posts : state . posts . posts , hasErrors : state . posts . hasErrors , } ) export default connect ( mapStateToProps ) ( PostsPage ) And that's all - we now have a connected component, and are bringing in data from an API to our Redux store. Using Redux DevTools, we can see each action as it happens, and the changes (diff) after each state change. The End This is where the tutorial for creating an application with plain Redux ends. If you look at the source code of the demo application , you'll see a lot has been added - a reducer and actions for a single post, and for comments. I would recommend completing your project so that it matches the demo app. There are no new concepts to be learned, but you will create two more reducers and actions, and see how to bring two states into one component for the single post page, which brings in one post as well as comments for that post. Redux Toolkit There is one more thing I want to cover - Redux Toolkit . Redux Toolkit, or RTK, is a newer and easier official way to use Redux. You may notice that Redux has a lot of boilerplate for setup and requires many more folders and files than plain React would. Some patterns have emerged to attempt to mitigate all that, such as Redux ducks pattern , but we can simplify it even more. View the source of the demo Redux Toolkit application , which is the same application we just created with Redux, but using RTK. It is much simpler, with a drastic reduction in lines of code for all the same functionality. Using RTK just requires one dependency, @reduxjs/toolkit . npm i @reduxjs/toolkit And no longer requires you to install the redux-thunk or redux-devtools-extension dependencies. Advantages to Redux Toolkit The main advantages to using RTK are: Easier to set up (less dependencies) Reduction of boilerplate code (one slice vs. many files for actions and reducers) Sensible defaults (Redux Thunk, Redux DevTools built-in) The ability to use direct state mutation , since RTK uses immer under the hood. This means you no longer need to return { ...state } with every reducer. Store Since Redux Toolkit comes with a lot built-in already, like Redux DevTools and Redux Thunk, we no longer have to bring them into the index.js file. Now we only need configureStore , instead of createStore . index.js import React from 'react' import { render } from 'react-dom' import { configureStore } from '@reduxjs/toolkit' import { Provider } from 'react-redux' import App from './App' import rootReducer from './slices' import './index.css' const store = configureStore ( { reducer : rootReducer } ) render ( < Provider store = { store } > < App /> </ Provider > , document . getElementById ( 'root' ) ) Slices Instead of dealing with reducers, actions, and all as separate files and individually creating all those action types, RTK gives us the concept of slices . A slice automatically generates reducers, action types, and action creators. As such, you'll only have to create one folder - slices . initialState will look the same. slices/posts.js import { createSlice } from '@reduxjs/toolkit' export const initialState = { loading : false , hasErrors : false , posts : [ ] , } The names of the reducers in the slice will also be the same - getPosts , getPostsSuccess , and getPostsFailure . We'll make all the same changes, but note that we're no longer returning the entire state - we're just mutating state. It's still immutable under the hood, but this approach may be easier and faster for some. If preferred, you can still return the whole state as an object. slices/posts.js // A slice for posts with our three reducers const postsSlice = createSlice ( { name : 'posts' , initialState , reducers : { getPosts : ( state ) => { state . loading = true } , getPostsSuccess : ( state , { payload } ) => { state . posts = payload",
            "state . loading = false state . hasErrors = false } , getPostsFailure : ( state ) => { state . loading = false state . hasErrors = true } , } , } ) The actions that get generated are the same, we just don't have to write them out individually anymore. From the same file, we can export all the actions, the reducer, the asynchronous thunk, and one new thing - a selector , which we'll use to access any of the state from a React component instead of using connect . slices/posts.js // Three actions generated from the slice export const { getPosts , getPostsSuccess , getPostsFailure } = postsSlice . actions // A selector export const postsSelector = ( state ) => state . posts // The reducer export default postsSlice . reducer // Asynchronous thunk action export function fetchPosts ( ) { return async ( dispatch ) => { dispatch ( getPosts ( ) ) try { const response = await fetch ( 'https://jsonplaceholder.typicode.com/posts' ) const data = await response . json ( ) dispatch ( getPostsSuccess ( data ) ) } catch ( error ) { dispatch ( getPostsFailure ( ) ) } } } Selecting Redux state in a React component The traditional approach, as we just learned, is to use mapStateToProps with the connect() function. This is still common in codebases and therefore worth learning. You can still use this approach with RTK, but the newer, React Hooks way of going about it is to use useDispatch and useSelector from react-redux . This approach requires less code overall as well. As you can see in the updated PostsPage.js file below, the Redux state is no longer available as props on the connected component, but from the selector we exported in the slice. pages/PostsPage.js import React , { useEffect } from 'react' import { useDispatch , useSelector } from 'react-redux' import { fetchPosts , postsSelector } from '../slices/posts' import { Post } from '../components/Post' const PostsPage = ( ) => { const dispatch = useDispatch ( ) const { posts , loading , hasErrors } = useSelector ( postsSelector ) useEffect ( ( ) => { dispatch ( fetchPosts ( ) ) } , [ dispatch ] ) const renderPosts = ( ) => { if ( loading ) return < p > Loading posts... </ p > if ( hasErrors ) return < p > Unable to display posts. </ p > return posts . map ( ( post ) => < Post key = { post . id } post = { post } excerpt /> ) } return ( < section > < h1 > Posts </ h1 > { renderPosts ( ) } </ section > ) } export default PostsPage Now we have the same app as before with a few updates from Redux Toolkit, and a lot less code to maintain. Conclusion We did it! If you followed along with me through this whole tutorial, you should have a really good feel for Redux now, both the old-fashioned way and using Redux Toolkit to simplify things. To summarize, Redux allows us to easily manage global state in a React application. We can access and update the state from anywhere, and easily debug the entire state of an application with Redux Devtools. You can place most of the state of your application in Redux, but certain areas of an app, such as forms as they are being updated, still make sense to keep in the React component state itself until the form is officially submitted. I hope you enjoyed this article! It was a lot of work to put together two complete demo applications and run through the whole thing here, and the article ran pretty long, but hopefully this is your one-stop shop for learning all beginner and intermediate Redux concepts. Please let me know what you think and share the article if it helped you out, and donations are always welcome! About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: March 09, 2020 Category: Technical Tags redux react tutorial Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/introduction-to-graphql/",
        "title": "An Introduction to GraphQL | Tania Rascia's Personal Website",
        "headings": [
            "An Introduction to GraphQL",
            "Introduction",
            "What is GraphQL?",
            "GraphQL Characteristics",
            "Declarative",
            "Hierarchical",
            "Strongly-typed",
            "Self-documenting",
            "Client-driven",
            "Architecture",
            "Server",
            "Client",
            "GraphQL vs. REST",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:13.609180",
        "content": [
            "An Introduction to GraphQL | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me An Introduction to GraphQL This article was originally written for DigitalOcean . Introduction As web and mobile applications become more mature and complex, software engineers invent clever new ways of improving the interaction between client and server within an application. One of the biggest paradigm shifts over the last few years in this regard has been GraphQL , an open-source query language and runtime for manipulating APIs. GraphQL was designed by Facebook in 2012 (and released publicly in 2015) to solve various weaknesses with traditional REST architecture by making a new system that is declarative, client-driven, and performant. In this article, you will learn what GraphQL is, familiarize yourself with important terminology and concepts of GraphQL, and discover how the GraphQL specification compares with the REST architectural style. What is GraphQL? GraphQL stands for Graph Q uery L anguage, but unlike other query languages such as SQL ( S tructured Q uery L anguage), it is not a language for communicating directly with a database, but rather a language that defines a contract through which a client communicates with a API server. The GraphQL specification is an open standard that describes the rules and characteristics of the language. It also provides instructions for executing a GraphQL query. Due to the fact that GraphQL is defined by an open-standard, there is no official implementation of GraphQL. A GraphQL implementation can be written with any programming language, integrate with any type of database, and support any client (such as mobile or web applications), as long as it follows the rules outlined in the spec. One of the most popular commercial GraphQL implementations is Apollo GraphQL , a which touts several GraphQL client and server implementations, but it is not necessary to use Apollo to use or understand GraphQL. GraphQL Characteristics There are several key characteristics of GraphQL design. GraphQL queries are declarative and hierarchical , and a GraphQL schema is strongly-typed and introspective . Declarative GraphQL queries are declarative , meaning the client will declare exactly which fields it is interested in, and the response will only include those properties. This example GraphQL query for a hypothetical fantasy game API requests a wizard with an ID of \"1\" , and requests the name and race fields on that object. { wizard ( id : \"1\" ) { name race } } The response, which is returned in JSON format, will return a data object that contains the found wizard object, with the two fields the query requested. { \"data\" : { \"wizard\" : { \"name\" : \"Merlin\" , \"race\" : \"HUMAN\" } } } Since a GraphQL response only gives you the exact information you want, it results in a more efficient and performant network request than alternatives that always provide a complete set of data. Hierarchical GraphQL queries are also hierarchical . The data returned follows the shape of the query. In this example, the query has been extended to include spells , and is requesting the name and attack fields of every spell. { wizard ( id : \"1\" ) { name spells { name attack } } } The response will now include an array of all the spell objects associated with this particular wizard . Although wizards and spells might be stored in separate database tables, they can be fetched with a single GraphQL request. (However, GraphQL is not opinionated about how the data itself is stored, so that is a presumption.) { \"data\" : { \"wizard\" : { \"name\" : \"Merlin\" , \"spells\" : [ { \"name\" : \"Lightning Bolt\" , \"attack\" : 2 } , { \"name\" : \"Ice Storm\" , \"attack\" : 2 } , { \"name\" : \"Fireball\" , \"attack\" : 3 } ] } } } Strongly-typed GraphQL is strongly-typed, as described by the GraphQL Type system . Types describe the capabilities of the values within a GraphQL server. The GraphQL types will be familiar to most programmers, with scalars (primitive values) like strings, booleans, and numeric integers, as well as more advanced values like objects. This example creates a Spell Object type with fields that correspond to String and Int scalar types. type Spell { name : String ! attack : Int range : Int } A GraphQL schema is defined using the type system, which allows the server to determine whether or not a query is valid before attempting to query the data. GraphQL Validation ensures the request is syntactically correct, unambiguous, and mistake-free. Self-documenting The Introspection feature allows GraphQL clients and tools to query the GraphQL server for the underlying schema's shape and data. This allows for the creation of tools like GraphiQL , an in-browser IDE and playground for working with GraphQL queries, and other tools for automatically generating documentation. For example, you can find out more about the Spell type through this introspection feature via the __schema . { __schema { types { name kind description } } } The response will also be JSON like any other GraphQL response { \"data\" : { \"__schema\" : { \"types\" : [ { \"name\" : \"Spell\" , \"kind\" : \"OBJECT\" , \"description\" : \"A powerful spell that a wizard can read from a scroll.\" } ] } } } Client-driven The work of developing a GraphQL API happens on the backend, where the schema is defined and implemented. However, since all of the power of the GraphQL API is encompassed a single endpoint on the server, it is up to the client via declarative queries to decide exactly what data it needs. This empowers developers to iterate quickly, as the front end developer can continue to query the data the GraphQL API exposes without doing any additional backend work. Architecture GraphQL exists in the application layer between client and data. The GraphQL server describes the capabilities exposed in the API, and the client describes the requirements of the request. Server A GraphQL API is defined with a single endpoint, usually the /graphql endpoint, which can access the full capabilities of the GraphQL server. Since GraphQL is an application layer technology and is transport agnostic, it can be served over any protocol, but it is most commonly served over HTTP. A GraphQL server implementation can be written with any programming language, such as the express-graphql middleware which allows you to create a GraphQL API on a Node/Express HTTP server. GraphQL is also database agnostic, and the data for the application can be stored in MySQL, PostgreSQL, MongoDB, or any other database. The data can even be supplied by an aggregation of several traditional REST API endpoints. All that matters is that the data is defined in a GraphQL schema , which defines the API by describing the data available to be queried. Client Requests made to a GraphQL server are called documents and consist of operations such as queries (for read requests) and mutations (for write requests). Although there are advanced GraphQL clients, such as Apollo Client or Facebook's Relay which provide mechanisms for caching as well as additional tools, no special client is required to make a request to a GraphQL server. A simple XMLHttpRequest or fetch from a web browser is sufficient for making requests by sending a GraphQL document to a GraphQL server. Below is an example of a fetch request to a /graphql endpoint, which passes the GraphQL document as a string in the body of the POST request. async function fetchWizards ( ) { const response = await fetch ( '/graphql' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' , } , body : JSON . stringify ( { query : ` {",
            "} ` , } ) , } ) const wizards = await response . json ( ) return wizards } fetchWizards ( ) This will return a JSON response for the request. { \"data\" : { \"wizards\" : [ { \"id\" : \"1\" , \"name\" : \"Merlin\" } , { \"id\" : \"2\" , \"name\" : \"Gandalf\" } ] } } GraphQL vs. REST GraphQL and REST are not interchangeable concepts, but they solve similar problems for applications. REST stands for Re presentational S tate T ransfer, and is a software architectural style for sharing data between different systems. A RESTful API is an API that adheres to the principles and constraints of REST, which include being stateless, cacheable, enforcing a separation of concerns between the client and server, and having a uniform interface, such as through URIs. GraphQL, as covered previously, is a specification for a query language and runtime for executing queries. There are advantages and disadvantages to both systems, and both have their use in modern API development. However, GraphQL was developed to combat some perceived weaknesses with the REST system, and to create a more efficient, client-driven API. Architecture - A REST API is typically defined by multiple endpoints on a server, but GraphQL exchanges data over a single endpoint. A GraphQL endpoint can return a complex graph of data that might require multiple REST queries, reducing the number of requests over the network for a single view. Data fetching - A REST API returns the set of data that was determined on the server. This might be far too much data, such as if the view only requires one property from a response, or it might not be enough, such as a list endpoint that doesn't return every property that a table requires in the view. GraphQL prevents this over and under fetching of data via declarative queries. Error Handling - Since it is not necessary for GraphQL to be served over HTTP, there is no specification about using HTTP response codes for errors. Typically all GraphQL endpoints will resolve with a 200 HTTP code response, and failed results will include an errors property alongside the data property in the response. RESTful APIs, on the other hand, utilize different 400 level HTTP codes for client errors and 200 level HTTP codes for successful responses. Versioning - GraphQL APIs strive to be backwards compatible and avoid breaking changes, contrasting with the common REST pattern of versioning endpoints, often with a /v1 or /v2 in the URL itself to determine the version. However, it is possible to implement your own versioning with GraphQL, or version via evolution with REST, it's just less conventional. Caching - Cacheability is an integral part of the REST guiding constraints . Since HTTP-based REST APIs consist of multiple endpoints using different HTTP methods, it can take advantage of existing HTTP conventions for caching and avoiding refetching resource. And since essentially every GraphQL request will be different but use the single endpoint, it cannot take advantage of any of the built-in HTTP caching mechanisms. GraphQL clients can take advantage of Global Object Identification to enable simple caching. This list does not cover all the similarities and differences between REST and GraphQL, but summarizes many of the most critical points. Additionally, GraphQL can be used as a gateway that aggregates multiple REST endpoints or services, in which case both technologies can be used in harmony side-by-side. Feature GraphQL REST Description GraphQL is a query language for APIs, and a server-side runtime An architectural style for designing web services Data Fetching A single HTTP endpoint that responds to deterministic queries A set of HTTP endpoints that typically return a predetermined dataset Versioning Versioning discouraged Versioning common HTTP Status Codes All responses, including errors, are typically 200 Implements HTTP Status codes Validation Built-in metadata validation Validation must be manually implemented Documentation Built-in via type system and introspection Not self-documenting, tools like OpenAPI available Caching No Yes Request Methods Queries, mutations, and subscriptions (over POST for HTTP) All HTTP methods utilized ( GET , POST , PATCH , PUT , DELETE , etc) Response Content-Type JSON Any (JSON, XML, HTML, etc.) Conclusion GraphQL is an open-source query language and runtime for APIs. GraphQL was invented by developers at Facebook to solve various issues encountered with traditional REST APIs, such as over/under fetching data and inefficient network requests, by making a client-driven, declarative query language for APIs. While GraphQL is not an interchangeable concept with REST, they both describe different ways to manage communication between a client and a server. In this article, you learned what GraphQL is, key differences and similarities between GraphQL and REST, and how a GraphQL server exposes data to a client. About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: November 17, 2021 Category: Technical Tags graphql api rest Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/projects",
        "title": "Projects | Tania Rascia's Personal Website",
        "headings": [
            "Projects"
        ],
        "last_updated": "2024-10-23T01:36:13.799656",
        "content": [
            "Projects | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me Projects Open-source projects I've made over the years, including this website, an emulator, and various games, apps, frameworks, and boilerplates. 2022 taniarascia.com The source of this website. Source 2022 Keyboard Accordion Play the accordion with your keyboard! Article Demo Source 2020 TakeNote A free, open source notes app for the web. Article Demo Source 2019 Chip8 A retro game emulator for three platforms. Article Demo Source 2021 Sokoban A web-based Sokoban implementation. Article Demo Source 2015 New Moon The optimized dark theme for web development. Demo Source 2018 Laconia An MVC framework from scratch in PHP. Source 2017 Primitive A front-end design toolkit for responsive web apps. Demo Source 2019 Snek A terminal-based Snake implementation. Article Source 2020 webpack Boilerplate A sensible webpack 5 boilerplate. Source 2021 Chat App React/Redux, TypeScript, Socket.io chat app. Source 2022 React Advanced Form An example of a schema-based form system for React. Source Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/me",
        "title": "About Me | Tania Rascia's Personal Website",
        "headings": [
            "About Me",
            "Contact",
            "What I'm doing now",
            "Lifting",
            "Tools",
            "Software",
            "Hardware",
            "Publications",
            "Books",
            "Interviews & Podcasts",
            "Speaking",
            "Songs",
            "Miscellaneous"
        ],
        "last_updated": "2024-10-23T01:36:13.822737",
        "content": [
            "About Me | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me About Me Hey, I'm Tania. I've been a software engineer since 2014 (previously I was a chef), and I've been making websites since 1998. I also have a DDR machine in the basement, two cats, and a wonderful partner. I like working out, playing video games, and occasionally updating this website. Welcome to my spot on the web for writing, projects, tutorials, art, and anything else I want to put out there. You can read some of my personal thoughts , as well as all the technical articles I've written over the years. Also check out the projects page to see a highlight of my open-source work. My site has no ads, no affiliate links, no tracking or analytics, no sponsored posts, and no paywall . My motivation for the site is to have a space for self-expression and to share what I've learned with the world. I hope I will inspire others to make their own creative corner on the web in the uphill battle against the enshittification of the internet. I don't post too often, so feel free to subscribe to the RSS feed for updates when I do. Contact Email: hello at taniarascia.com . Newsletter GitHub Twitter What I'm doing now Updated October 6th, 2024 Working full time Lifting three times/week Cooking dinner every night instead of ordering out Building a replica of our home out of Lego Tweaking this website Lifting Squat - 3x5 @ 95 Bench Press - 3x5 @ 65 Deadlift - 3x5 @ 135 Bent Over Row - 3x5 @ 65 Overhead Press - 3x5 @ 45 Tools Software This website is hosted on Netlify and uses the Gatsby SSG framework. Coding : Visual Studio Code with New Moon Theme Terminal : iTerm2 Notes : Obsidian Hardware Coding PC : M1 MacBook Pro 16\" 2021, 32GB RAM Gaming PC CPU: AMD Ryzen 5 3600 Motherboard: ASRock B550 Phantom Gaming 4 Memory: Crucial Ballistix 32GB Storage: SSD 970 EVO NVMe M.2 1TB GPU: Radeon 6950XT PSU: EVGA SuperNOVA 650 G+ Case: H510 Elite Monitor : TUF Gaming VG27AQ (x2) Keyboard : Durgod Fusion Microphone : Blue Yeti Headphones : Sony WH-1000XM3 Publications Understanding the GraphQL Type System DigitalOcean, 2023 How To Set Up a GraphQL API Server in Node.js DigitalOcean, 2022 An Introduction to GraphQL DigitalOcean, 2021 How to Code in JavaScript (Tutorial Series, 32 articles) DigitalOcean, 2017 - 2020 Understanding the DOM \u2014 Document Object Model (Tutorial Series, 8 articles) DigitalOcean, 2017 - 2018 Setting up a RESTful API with Node.js and PostgreSQL LogRocket, 2018 An Introduction to CSS Shapes Tympanus Codrops, 2018 ES6 Syntax, Features and Additions: A Reference Guide Progress Telerik, 2018 REST API Tutorial (1): Understanding REST APIs Envato Tuts+, 2018 REST API Tutorial (2): Set Up a Node/Express Server Envato Tuts+, 2018 REST API Tutorial (3): Connect to a Postgres Database Envato Tuts+, 2018 A Beginner\u2019s Guide to JavaScript Variables and Datatypes SitePoint, 2017 JavaScript Operators, Conditionals & Functions SitePoint, 2017 Books Understanding the DOM DigitalOcean, 2020 Interviews & Podcasts How to Organize your React App React Round Up, Jack Herrington, Paige Niedringhaus, TJ VanToll Switching Careers and Learning in Public Egghead.io Podcast, Joel Hooks Web Developer: Tania Rascia You are techY Podcast, Ellen Twomey Interview Hashnode Townhall, Bolaji Ayodeji Speaking Getting Started with Vue Chicago JavaScript, 2019 Getting Started with React Chicago JavaScript, 2018 Developing a WordPress Theme from Scratch WordCamp Chicago, 2017 Songs Rain Let It Be I'd Like to Walk Around In Your Mind El Pasadiscos Such Great Hights (Duet) Night Nurse (Duet) Miscellaneous Resume Illustration Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/digital-gardening/",
        "title": "Tending to My Digital Garden | Tania Rascia's Personal Website",
        "headings": [
            "Tending to My Digital Garden",
            "Treating My Work as Precious",
            "Working with Burnout",
            "Personal Issues",
            "How Things Are Going",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:13.879262",
        "content": [
            "Tending to My Digital Garden | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me Tending to My Digital Garden Hi there. It's December 2022. How are you doing? This has been a slow year for me. I'm going to write a little post to let you know what I've been up to, how I'm feeling, and what I'm planning going forward. Also, I drew this RAM ram, so I decided to make it the new mascot of my site. \ud83d\udc0f Treating My Work as Precious There are a lot of reasons contributing to less activity from me, but I think one of the major ones is that I've been treating all my blog posts like they have to be precious. They're not posts, I'll think, they're articles . It's not a blog, it's the writing section of my site. It feels weird to have a short, low-effort post about how I'm doing, what I'm doing, or something personal next to a massive diatribe about the event loop or everything you might want to know about CSS fundamentals . It's weird that I feel weird about that, considering it's my blog, so what else could or should it consist of aside from whatever I want to put on it? There are no sponsors, no affiliates, no guest posts, I'm not selling you anything, I have no set writing schedule, it's just whatever I find interesting and whatever I'm working on. If that ends up being scales on the chromatic accordion, or a list of shortcuts I use on Photoshop, or a blog roll of personal website designs I enjoy, or how my day is going, that should be completely fine. Look at kottke , nothing is too precious for his site. So I'm writing this post to give myself permission to put whatever I want on the site. One thing that held me back is that I have around 13,000 newsletter subscribers, and I felt like I didn't want to bother them, so I was neither posting nor sharing anything that I didn't deem big or important enough. This means that months go by without me sending out a single email. But then I had the thought - so many companies spam me all day with content I don't want in the attempt to get my money. It doesn't matter if I uncheck the \"send me promotional materials\" option, I'll get those emails. No matter how hard I work towards having a perfect inbox that doesn't get any spam where I only get personal emails, important emails, and a few newsletters I actually sign up for, this impersonal, useless content still manages to sneak through. That doesn't mean I shouldn't respect your inbox, but once again - it's not quite as precious as I'm making it out to be. I'm not sending out an emergency push notification to your phone, I'm sending you an email that you can read at your leisure. Personally, I'd rather get an email in my inbox from a random, genuine person online talking about whatever interests them on a semi-regular basis then the vast majority of emails I actually receive. Anyone who isn't interested is free to unsubscribe. It's not a big deal. What do you think? Working with Burnout Another thing that affects me is burnout, which is honestly something I've been dealing with on and off for a long time. I have a lot of methods for managing it. Mostly I try to do my best to not look at code after 5pm on a workday, and I usually don't look at code at all on weekends. Like anyone else in the field, I get imposter syndrome. The fact that I keep my coding to a minimum during non-work hours means I'm not familiar with the latest and greatest in my field. I've never tried out Rome . I don't really know what Astro, Vite, and Quik are. I have no experience with Kafka. I don't know if webpack is old and crusty and I should be using something else for my bundling. Since I'm focused on front end at my current job, my SQL, Node, and backend architecture skills are not progressing and are being replaced with other things, like a recipe for Chicken Masala or how to play Waltz No. 2 by Shostakovich. Not to say that I haven't picked up anything new - I made keyboardaccordion.com with Svelte this year, for example, a language I hadn't previously used for anything. One thing I have is a confidence that I can jump into a new project or language or framework and learn whatever is necessary and relevant for me to succeed. I live by the mantra of \"You don't need to know anything\" . You'll figure it out when you need to know it. This is not necessarily something that is tested in coding interviews, however. Anyway, it's easy for me to feel like I haven't accomplished much. Only seven articles for the whole year? Hardly any creative accomplishments? But then I look back over eight years of several side projects, and mostly consistent writing for both myself and companies in addition to having a full-time job and trying to live a life and be a person, and maybe it's not so bad. Maybe I can be proud of what I've done, and not be afraid to do something small or something new. I wish taking a sabbatical was more commonplace. Actually, every time I think about it, I just think about the mess that dealing with insurance would be, and then I put it off. Hitting that reset button wouldn't be a bad idea, though. Personal Issues The truth is this year did not get off to a good start, and it's been a little hard to bounce back from. As I wrote about earlier this year , one of my lifelong best friends died suddenly and unexpectedly. Most of my personal life and activities revolved around friendship with a few specific people, from vacations to video games to dinner nights and game nights and birthdays and everything else, so it was a big shock to my system in both personal grief and understanding my place in the world. I've had to grapple with and think about death and existence far more than I wanted to or expected to, and at some points it has been particularly rough. The fact that I've been able to pretty much work full-time without much of a disruption and continue to be productive is actually quite surprising to me. Oddly enough, I was sick more during the first half of this year than any other time in my life, culminating in a really horrible bout of Covid that lasted over a week and kept me bedridden. After that one, I haven't gotten sick again, so I'm hoping to go a nice, long while without getting sick. I'm sure a lot of the sicknesses had to do with all the horrible diseases and viruses floating around right now, but it certainly wasn't helping or being helped by my mood and situation, and it kept compounding. On another note, romantic endeavors have been a wash this year. But I'm feeling much better about next year. How Things Are Going This post has a pretty moody vibe going so far, but actually I'm feeling really good right now. Things have really been going well, particularly in the last few months, and I think it's important to take note of that. Keeping track of what you're doing when things are going well can be helpful to look at when things aren't going so well. So a few things going on lately: Moving to a new apartment and building a new interior space Quitting and deleting the game I was playing far too much (Heroes of the Storm) Cooking at home instead of ordering out basically every day Running a mile every morning (also got a Fitbit) Buying a Wacom tablet and a Photoshop subscription and beginning to draw again Buying a new style of accordion and learning some new songs Attempting to have house plants for the very first time Organizing and moving my notes over to Obsidian Organizing and attending social events I don't want to get too detailed and into everything I've done this year, since I like doing the year in review to see what I've been up to, but this is a pretty good summary of what's going on lately. I recently completed my battlestation, and I updated it to be a dual desk - one side for my WFH life, and one side for play. Featured in this image is the PC I built during the early days of the pandemic. Oh yeah, I've also been tweaking this website design incessantly. It's funny, by the time I make a redesign post , I've already tweaked the design so much that my before pictures from the new design aren't the same as the after pictures from the old design. Playing around with my design is kind of a procrastination tactic for me though, and I'm REALLY happy with it right now, so hopefully I can focus more on making stuff and less on the medium. So there's just been a lot going on lately, between art, music, creativity, health, fitness, organization, and life. Well, I'd love to hear your thoughts, and I'll be planning on making more little posts going forward. About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: December 01, 2022 Category: Personal Tags life Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/everything-i-know-as-a-software-developer-without-a-degree/",
        "title": "Everything I Know as a Software Developer Without a Degree (2019) | Tania Rascia's Personal Website",
        "headings": [
            "Everything I Know as a Software Developer Without a Degree (2019)",
            "Pre-Knowledge (1998 - 2014)",
            "Getting Started and Internship (2014-2015)",
            "Job 1: Junior Web Developer - WordPress (2015-2017)",
            "Side project: Primitive CSS Framework",
            "Side project: New Moon",
            "Side quest: Technical Writer for DigitalOcean",
            "Job 2: Back End PHP Developer (2018)",
            "Side project: Laconia MVC Framework",
            "Job 3: Front End Software Engineer (2018-2019)",
            "Side project: Chip-8 Emulator",
            "Things I Don't Know, Abridged",
            "Jargon Glossary",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:14.027925",
        "content": [
            "Everything I Know as a Software Developer Without a Degree (2019) | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me Everything I Know as a Software Developer Without a Degree (2019) I'm not going to get into the details of my story - in short, I liked making websites as a kid, but I went to culinary school and worked in the restaurant industry for nearly a decade. Eventually I needed out, and I decided on making a career out of web development. Despite only knowing some basic outdated HTML and CSS, I wanted a new life and I wanted it without going back to school and getting a degree, or paying for a bootcamp. I see people ask all the time what they need to know to become a web developer, how long it takes, what they'll make, and so on. It's hard to have all the answers to those questions, but I can share my own experience. So I present to you a list of all the concepts, libraries, frameworks, and technology I've learned over the years, in the order I learned it, with links to the side quests and articles I've written about them. Although I'm trying to write it in order, there is some overlap. I'll try not to make too many assumptions, but this list is not meant to be a deep dive on any topic - although many of the links are! Note : Some of the earlier articles may be amateur and have information that I wouldn't necessarily put into an article on the subject if I wrote it today. Pre-Knowledge (1998 - 2014) I made my first websites in the late nineties by viewing the source of sites I landed on in Netscape Navigator (a browser), copying the HTML into Notepad (a text editor), and uploading the pages to Geocities (a web host). HTML, text editors, and hosting most likely seem like second nature to many of us, but like everything else related to computers, it's not inherent knowledge, and it's a hurdle to get through as a beginner. I just happened to do it early enough that I wasn't even aware I was learning. Here's what I learned in that period, although since I learned by doing, I didn't know the proper terms for many things: An idea of what HTML (Hypertext Markup Language) is - the very first step to doing anything related to web development. How to view the HTML source of a web browser (Netscape Navigator, and later Internet Explorer). How to create and edit an HTML file with a text editor (Notepad) and save it locally on my file system (Windows as my OS). Basic HTML tags/elements - text, headings, lists, tables, links, images, formatting (also blinking text). How to make colors with hex codes . How to use FTP (File Transfer Protocol) to upload files from my computer to a web host on the internet to make my website publicly accessible. A few years later, CSS became popular, and I spent the next several years copying the CSS of sites I liked to make designs. CSS was revolutionary because you could do things like change all the colors of your links in one spot instead of all over your pages, having different sets of link colors, and so on. How to use CSS (Cascading Style Sheets) to design the layout, font, spacing, and colors of a website. How to bring CSS (Cascading Style Sheets) files into an HTML file. How to create layouts with floats instead of tables. Although I had been making websites for years, I'd never read a tutorial, article, or watched a video about web design/development. So although I was oddly competent at making a website intuitively from all the sites I downloaded and played around with, I didn't actually know many basic concepts like how CSS selector specificity worked, or ids vs. classes, how to use pseudo selectors, and I would often end up brute forcing solutions for things like positioning and the box model. This is generally the extent of everything I knew about web development before I decided to make a career out of it: basic HTML, basic CSS, basic managed hosting, and transferring files via FTP - everything I knew was static development, and I had absolutely no concept of programming. For anything that might be more advanced or dynamic - counters, guestbooks, blogs, forums - I used a third-party resource. Getting Started and Internship (2014-2015) Somehow, it still didn't occur to me to really do much studying before diving into this new career. I bought HTML, XHTML & CSS for Dummies from a used book store - which was honestly only a few years out of date at this point - and looked over it all. I was pretty overjoyed to discover that I knew basically everything in the book from my heuristic approach, but now I knew more of the technical terms. I was lucky enough that a bartender at the restaurant I was working at was starting his own business and offered me an unpaid internship for a few months. So by day I did the internship and by night I cooked at the Pac-Man restaurant . At the same time, I was scouring Craigslist for some small jobs, and I created a few static Bootstrap sites as a freelancer. A lot changed since my early days, and here's what I learned during this time. Upgrading Notepad to Notepad++ was a first step, which I quickly traded for Adobe Brackets . How to use Bootstrap , a responsive CSS/JS framework - I found out responsive design was a new thing I would have to know, and I learned how to integrate Bootstrap, a third party framework, into my sites. I made a site about accordions at this point, and spent a long time trying to use PHP to set up a contact form on my Bootstrap site. The fundamentals of responsive design without a framework - I didn't like how dependent I was on Bootstrap to create a responsive design, so I learned how to make a responsive site without it. The basics of jQuery , a JavaScript library - Although I had no knowledge of JavaScript or programming, I began to figure out the basics of jQuery by copying and pasting snippets and code and hoping for the best - which I would use to make \"awesome\" effects like parallax scroll . It was a hurdle to learn how to load a JavaScript file, load jQuery first, and other very novice mistakes. Eventually I learned how to make tabs, accordions, dropdowns, modals and other common UI elements from scratch with jQuery. How to create several types of navigation styles without relying on Bootstrap - dropdown navigation bar , off-canvas navigation , full-screen navigation . I really wanted to be independent of relying on Bootstrap. How to use flexbox - I can't say I understood flexbox to the full extent at this time, but I was beginning to figure out how to use it in many situations that I had previously used floats. How to use and and set up a Mac - I started using a Mac for the first time, after 20 years of only using Windows. I have to make a pause here, because the next thing I learned blew my mind and is what really enabled me to start moving to the next level beyond making simple brochure-type websites: the command line. How to use the command line (*nix) - understanding that I could navigate and command my computer through the command line seems obvious to me now, but was revolutionary for me. I learned about moving, copying, deleting, changing permissions, installing programs, using command line text editors, sudo , and more. How to use SSH (Secure Shell) to login to another computer through the command line. This blew my mind as well. How to use Sass , a CSS preprocessor - this enabled me to install and learn Sass, which was my initial reason for learning the command line. I learned how to structure a project, use variables and nesting, and watch changes to a file to compile Sass to CSS. How to use Grunt , a JavaScript task runner - Just compiling Sass wasn't enough - I wanted to combine it with auto-prefixing, minifying, and other tasks. Grunt was the way to do that, so I learned how to set up a Grunt process. How to install and use Node.js and npm - in learning how to install Grunt to compile my Sass, I had to learn how to install Node, and importantly, the concept of local installations. This opened up a whole new world to me. How to use Gulp , another JavaScript task runner - I quickly realized Grunt was convoluted and slow, so I upgraded to using Gulp. Back End 101 through JavaScript - comments, varibles, data types , and comparisons, math, and logic . I didn't know how to do anything practical with programming yet outside of my jQuery tinkering, but I started gaining a better understanding of the fundamentals. How to use basic Git commands and make a repository - I didn't quite understand Git yet, but I knew how to use four or five commands to use Git as a glorified FTP, and that was a start to learning about version control. I knew Git was important, but without a team to work with I wasn't exposed to many of the concepts I'd learn later. Job 1: Junior Web Developer - WordPress (2015-2017) 11% salary increase from experienced chef to entry level junior WordPress developer It's great that I learned all that, because for my first real job in the industry, I was going to use practically none of it. No Git, no Node, no Sass, no Grunt nor Gulp, no command line, no Bootstrap. Just cold, hard WordPress. Nonetheless, this was going to present a whole new group of challenges to overcome and things to learn. A few months into my internship, I applied for a job at a different company as a junior web developer/designer. I'd spend the next two years (exactly two years, to the day!) making websites with Teo . How to set up a LAMP environment - I had hosting, but I never used PHP and it never occurred to me that a host was any different than my local HTML setup. I learned how to set up a local environment for Linux (or Mac, or Windows), Apache (the server), MySQL (the database), and PHP - a full \"stack\". How to set up Apache and virtual hosts - I learned how to configure the Apache server to be able to run many virtual hosts at the same time. How to set up cron jobs in Linux. The basics of PHP and PHP tags - \"PHP: HyperText Preprocessor\", as is what PHP stands for, is the most popular programming language on the web and the language most web developers start off with. I learned that if I started some code with <?php and ended it with ?> , everything inside would be PHP, and everything outside of that would be rendered as regular HTML. For the longest time, I wanted to know how to make my OWN blog - not rely on Blogger, or WordPress(.com) hosting, but something I hosted myself with my own design - not someone else's theme. But how? I didn't know how and it was immensely frustrating. I struggled a lot, and when I finally figured out how to use WordPress(.org)'s platform to create my own unique blog, I wrote an article to share with the world what I learned. How to develop a WordPress theme from scratch - this is the article that enabled me to begin this blog, and to start my first job in web development. I began by learning how to make posts, pages, a front page, header, footer, and navigation and put it into a unique, custom layout. WordPress pagination, comments, functions, & custom posts - I began taking my WordPress development to an intermediate level. WordPress custom fields - The final step to learning how to turn WordPress into a true CMS (Content Management System). How to use JSON with PHP and/or JavaScript - I learned how to utilize data stored in JSON format (JavaScript Object Notation) in my PHP or JavaScript code. Ajax How to use Google Maps API - my first foray into learning what an API (Application Program Interface) key is and how to use one. How to set up a website with TLS (Transport Layer Security)/SSL (Secure Sockets Layer) - to get a HTTP secure (https) URL. At some point, I was given the responsibility of learning how to use AWS (Amazon Web Services) to set up Linux servers and migrate our websites over. How to use AWS and the AWS ecosystem - I learned so much about DevOps and AWS in this period - setting up a VPC (virtual private cloud), an EC2 instance (a virtual server in the cloud), S3 (object storage buckets for static files), setting up a LAMP server from scratch, migrating websites and configuring DNS (Domain Name Service), generating public/private keys, and much more. How to set up virtual machines , using Vagrant and VirtualBox How to set up an SSG (Static Site Generator) using Jekyll - I started exploring other methods of setting up things like a blog, and learned how to make a Jekyll blog and host it on GitHub. How to use PDO to connect to MySQL and create a CRUD app: Creating, reading , updating and deleting - Soon, I got tired of relying on WordPress to do anything dynamic with a website. Since I already knew some PHP from WordPress, I looked into learning how to build my own dynamic site that could connect to a database. Accessibility - I learned much about making a website accessible for people with disabilities, from having appropriate contrast, to making websites accessible only by keyboard, to captioning audio, and much more, following WCAG 2.0 standards. Side project: Primitive CSS Framework While working as a WordPress developer, I also made all my own custom designs for the sites I created. To speed up this process, I created Primitive (source) , a minimal CSS framework and website boilerplate that made it quick and easy for me to make unique, custom designs. The framework is built in Sass. With Primitive, I could create the majority of a site's CSS in a few hours. I built many sites with Primitive - Cafe Ba Ba Reeba , Shaw's Crabhouse , Tokio Pub , Krispy Kreme Pacific Northwest , this blog, and more. Side project: New Moon I created New Moon , the best code theme for web development, and distrubuted it to Visual Studio Code , Brackets , Sublime Text , Chrome DevTools , learning how to create extensions for each of those environments. Side quest: Technical Writer for DigitalOcean I took a few month long sabbatical and traveled around Europe for a while after I left the WordPress job, but during that time I wrote the How to Code in JavaScript and Understanding the DOM (Document Object Model) series, which gave me a much deeper understanding programming and JavaScript, concepts like prototypical inheritance and scope, and finally understanding how the DOM actually works and is different than a website's source, which was much less relevant to me when I was only working with PHP-based sites. I learned about syntax and code structure , comments , strings , variables, scope, and hoisting , math , arrays , mutator , accessor , and iteration methods. I also learned about objects , object methods , conditionals , functions , prototypes and inheritance , and classes . From the DOM side, I learned what the DOM is and how it's different than HTML source code , about nodes and node types , how to access , traverse , and change the DOM. I also learned how to modify styles, classes, and attributes , and gain a better understanding of events, event handlers, and event listeners . Job 2: Back End PHP Developer (2018) 28% salary increase from previous starting salary After I got back from traveling, I started looking for another job. I knew I never wanted to work in WordPress again, and I didn't necessarily want to learn another programming language and its environment to find a job right away. I also thought PHP was fun, so I wanted to find a job where I could use PHP, but not WordPress. How to write a memory game in JavaScript - For one job interview for becoming a PHP developer, I made a memory game in JavaScript, putting together much of what I learned about the DOM and data types to actually build things without any libraries or frameworks or tutorials. How to write unit tests and set up automated testing - I had never had a job that knew the concept of testing, and my next job would be no exception, but I did learn some concepts of testing , what unit, integration, and end-to-end tests mean and how to set them up. How to connect to a REST API with JavaScript - I began to learn what REST (Representational State Transfer) was, and how REST HTTP methods could be comparable with CRUD. JavaScript local storage and session storage How to work with files and file uploads - I worked a lot with modifying and saving files to a file system through JavaScript and PHP, something that was intensely mysterious to me previously. How to work with SVGs, polygons and paths - I worked a lot with maps of concert halls and arenas at this job, and learned how to create and work with SVGs, polygons and paths. How to use SQL (Structured Query Language) commands - my job involved a lot of raw SQL queries, and I learned all about creating, inserting, updating, deleting, altering, constraining, and joining tables with SQL. I also learned all sorts of conditionals that can be applied to queries, grouping, ordering, limiting, and offsetting. How to create and use Bash scripts CSS shapes Side project: Laconia MVC Framework During this time, I wrote Laconia , a modern MVC (Model View Controller) application written in plain PHP without libraries or frameworks. I wanted to learn how to create something with MVC architecture, and I didn't want to rely on a framework to do it. I wanted it to be secure, and I wanted it to have users. I aimed to and succeeded in learning the basics of: Authentication - logging in, logging out, resetting a password, having private content/dashboard hidden from anonymous users Security and validation - encrypted passwords and hashing, parameter binding with SQL, making sure users cannot be overridden, making sure no spam or empty content can go through, making sure passwords and usernames have the proper characters Routing - Redirecting to URLs based on incoming request method and URI path, creating public user profiles in the root directory, creating dynamic pages based on GET requests Object oriented programming - I had never used a class in a working application before writing this app, so I learned a lot about constructors, inheritance, and abstract classes Composer - I had no prior experience using Composer, so I wanted to find out why it was the standard in modern PHP development. I used it for autoloading classes and configuration. Database schema - how to structure a database to relate information easily between the tables, i.e. linking lists and list items, users and user comments, etc. Sessions and Users - how to easily deal with sessions, users, and authentication. Job 3: Front End Software Engineer (2018-2019) 17% salary increase Eventually, I wanted to do anything else besides PHP or jQuery. JavaScript seemed like a good choice due to all the JavaScript I had been teaching myself on my own, so I ended up getting a position as a front end software engineer writing applications in React. I also didn't know React when I got the position, but I learned quickly. ES6+ - The syntax of ECMAScript 2015/ES6+, the new additions to JavaScript made over the last few years. How to use React - I was very opposed to learning React, Vue, Angular, or any other JavaScript framework/library until I felt like I could do what those things accomplish in vanilla JavaScript first. (The same policy is why I created Laconia instead of learning Laravel.) I struggled to understand React for quite a bit, and once I got it I wrote this article, which is awesomely included in the official docs! How to use React Hooks , and other React components , and React Router. How to use the Semantic UI React library to quickly and efficiently make prototype applications. A deeper understanding of REST and REST APIs - I really began to understand how resources should be structured. How to make a server in Node.js , using the HTTP module or Express . How to connect to a MySQL database from Node.js and make API calls. How to use PostgreSQL . The concept of asynchronous programming , and how to use callbacks, promises , and async/await. How to write scripts in Node.js - I wrote a script that would generate JSON from a Google Sheets/Excel CSV that could be utilized throughout an application. How to set up a project with Webpack with hot reloading How to use Git to work with a team - merging, rebasing, fixing merge conflicts, stashing, and working with feature branches . Error handling . Side project: Chip-8 Emulator My project of 2019 has been creating a Chip-8 emulator in Node.js from scratch, thanks to Vanya Sergeev. I've learned many lower-level programming concepts, such as: The concept of binary, decimal, and hexadecimal base systems how they interact with each other and the concept of abstract numbers in programming. Bits, nibbles, bytes, ASCII encoding , and big and little endian values. Bitwise operators - AND ( & ), OR ( | ), XOR ( ^ ), left shift ( << ), right shift ( >> ) and how to use them for masking, setting, and testing values. Using the Node built-in file system ( fs ). The concept of a raw data buffer and how to work with it, how to convert an 8-bit buffer to a 16-bit big endian array. How to write and understand an 8-bit and 16-bit hex dump. How to disassemble and decode an opcode into instructions a CPU can use. How a CPU can utilize memory, stack, program counters, stack pointers, memory addresses, and registers . How a CPU implements*- fetch, decode, and execute**. The importance of unit testing . Things I Don't Know, Abridged In true Dan Abramov fashion, I'm happy to admit the plethora of concepts, technologies, libraries, frameworks, etc. that I don't know. What I don't know I don't know is much more extensive, however. This is a list of things I don't know that I think I probably should. GraphQL Redux/MobX Docker Electron React Native Vim Algorithms Data structures Calculating time complexity Algebra, honestly Sockets Networking CI/CD Types Jargon Glossary A small subset of the jargon acronyms that are familiar to me now. API - Application Program Interface Back end/server-side - the data access layer CMS - Content Management System CRUD - Create, Read, Update, Delete CSS - Cascading Style Sheets DNS - Domain Name Service DOM - Document Object Model ES(6) - ECMAScript (S)FTP - (Secure) File Transfer Protocol Front end/client-side - the presentation layer HTML - Hypertext Markup Language HTTP(S) - HyperText Transfer Protocol (Secure) JSON - JavaScript Object Notation MVC - Model View Controller REST - Representational State Transfer SPA - Single Page Application SQL - Structured Query Language SSG - Static Site Generator SSH - Secure Shell SSL - Secure Sockets Layer TLS - Transport Layer Security VCS - Version Control Systems (Git) VM - Virtual Machine Conclusion Carl Sagan once said, \"if you wish to make an apple pie from scratch, you must first invent the universe\" . That is how I felt writing this article. I tried to compile everything I know, but each new thing involved some previous knowledge, and that required previous knowledge, and at what point do I stop? I'm missing plenty, I glossed over more, but in the past five years or so, I've tried to compile and write about everything that has tripped me up along the way. I hope something I've written has helped you in your own journey, and will continue to do so in the future. I've written 123 articles about web development between my own website, DigitalOcean, SitePoint, Codrops, Envato Tuts+, and Progress. About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: February 11, 2019 Category: Personal Tags career life lists Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/building-takenote",
        "title": "Building TakeNote, a Full-Stack Notes App for Developers | Tania Rascia's Personal Website",
        "headings": [
            "Building TakeNote, a Full-Stack Notes App for Developers",
            "What I Wanted It To Do",
            "Why I Don't Want to Ship It",
            "What I Learned While Writing It",
            "Authentication (OAuth)",
            "CI/CD (Docker and Travis)",
            "State management (Redux)",
            "Bundling and configuration (webpack)",
            "How I made it",
            "Language (TypeScript)",
            "Front end (React + Redux)",
            "Back end (Node + Express)",
            "Data and authentication (GitHub)",
            "Primary component",
            "GitHub Sync",
            "Open Source",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:14.432315",
        "content": [
            "Building TakeNote, a Full-Stack Notes App for Developers | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me Building TakeNote, a Full-Stack Notes App for Developers Not too long ago, I realized I didn't have a really good system for organizing my thoughts, and I wasn't happy with any of the note-taking apps I tried. Evernote was too bloated for me, and required a paid account to sync between multiple devices. SimpleNote was closer to what I wanted, but I found it somewhat ugly and clunky. Keep was too simple, Bear didn't have a web-based version...and so on. Eventually I thought - why not just make exactly what I want? So I started building an app with the technologies I knew. That app became TakeNote , which I'm proud to say has been completed, thanks to over 50 open-source contributors who helped along the way. The source is up on GitHub for anyone who wants to see how it was done. What I Wanted It To Do A few of my most important wants for the app: Plain text notes, no WYSIWYG or rich text editor Accessible from a web browser Authenticates and syncs with GitHub Does not require a database Has the look and feel of an IDE like Visual Studio Code, with syntax highlighting, markdown preview, and keyboard shortcuts Links to internal notes like a wiki Drag and drop Easy to back up and import I'm really happy I saw it through to the end. It took about a full year with some breaks here and there (I started in September, 2019). I learned a lot along the way, much of which became knowledge that I directly used in my job. Why I Don't Want to Ship It TakeNote has two versions - the static, client-side only demo version that only saves to local storage, and a self-hosted complete version that runs on an Express server and authenticates and syncs with GitHub. Originally, I had the full, authenticated version hosted and despite not advertising this app at all, over 1,300 people authenticated with it, but now I have the demo version hosted on Netlify at takenote.dev . Although I spent a lot of time on the project and I'm proud of it, I ultimately decided not to ship it. I spent a long time agonizing about what to do with the project, because I knew I didn't want to maintain it or have real users. There were a few reasons for that: I don't want to maintain a server. If I had real users and the app went down, I didn't feel comfortable having that knowledge in the back of mind that if there was a DDoS or DigitalOcean was down or for any other reason the server went down, the app would be down for users. I don't want to be responsible for anyone's private data. Although the data was saved in GitHub and not a database of mine, I'm just really not interested in people's private data in any capacity, and a note-taking app is inherently going to contain personal data. GitHub OAuth requires full access to all private repositories to get access to any private repository. There is no way around it. The \"GitHub App\" flow did not pertain to my use case, and all private repos is the only relevant scope for my app. I didn't feel comfortable having these permissions for any reason, and nor do many other people, which is understandable. If I were to actually host this, it would have users and likely go over the rate limiting allowed very quickly, rendering the app pretty useless. After getting far along in the project, I realized it would be impossible to make a good mobile experience for such an involved app, especially since it's impossible to disable zoom on iOS devices. I originally planned to just make a responsive web app for mobile, but after realizing I would need to make iOS/Android apps for mobile to work, I realized I wasn't willing to double the effort that I had already put in to complete this last step. What I've ended up with is an excellent desktop web app, that looks and feels exactly like I'd want a note-taking app to feel. The hosted version is perfectly fine for any private, ephemeral notes anyone wants to take that definitely does not connect to any server or database, and imports/exports to JSON. Personally, I decided to settle on Bear for a notes app for myself, as I found that it had so many of the features I implemented in TakeNote, and I appreciated it. My only issue with it is that it's not available from the web or for Windows (as I now have a Windows PC for gaming/other activities as well and would like to access notes from there). What I Learned While Writing It I wrote several articles that were the result of things I learned while writing this app. Authentication (OAuth) I wrote Client-side Authentication the Right Way (Cookies vs. Local Storage) , which details how to make a secure authentication set up using HTTP Only, Secure, Same-Site cookies with an Express server and a front end. I also learned the OAuth flow, and how easy it is to set up instead of using some third-party system like Auth0, which deceptively sounds similar to OAuth and can easily trick people into thinking they need to use it. CI/CD (Docker and Travis) I wanted to automate deployments and testing for the app, but I had never done it before from scratch. It's easy enough with a static site and something like Netlify or GitHub pages, but it's a whole different beast for a site with a server. I wrote Create a CI/CD Pipeline with Docker , which entailed all that I learned while creating an automation pipeline that would test all my code in PRs, and deploy it to a server behind a load balancer every time a merge was made into the master branch. State management (Redux) Before I started this project, I mostly avoided Redux, preferring to use Context in React for projects at work. As a result of setting up Redux Toolkit and Redux sagas for this project, I wrote An Overview and Walkthrough of Redux which builds demo applications of projects using vanilla Redux and Redux Toolkit. After using Redux, I realized I preferred it greatly to using Context. It does add a lot of boilerplate upfront, but the limitations of Context caused issues in previous projects as they grew. Bundling and configuration (webpack) I wrote How to Set Up webpack 5 From Scratch based on much of what of what I learned setting up a custom webpack config for the app that would support both an Express-serving-a-frontend app and a static frontend app. So the moral of the story here is it's always a good idea to reinvent the wheel and build a project because you'll learn something along the way. It's never a waste of time. How I made it Here are the decisions and various tech I used to create the app. Language (TypeScript) I chose to write TakeNote in TypeScript . I had a little bit of experience here and there with TypeScript, but I wanted to make a complete, full-stack app to see if it lives up to the hype. It did get a bit annoying with various React and web types - or using some third-party dependencies, but I did feel confident that a lot of little bugs were prevented by using the strictest settings. Front end (React + Redux) I used React and Redux for the front end. It was either that, or Vue and Vuex, and although I've used Vue in the past for work, I just feel faster and more productive with React. I used simple SCSS for the styles instead of a CSS-in-JS solution, just because it's easier for me and simpler in my opinion. Back end (Node + Express) I used Node and Express for the full version of the app. I only needed a few endpoints, for authenticating and syncing. I decided against making a real update on every change, and instead only sync all the data at once on an interval. The server is necessary to obtain an authentication token and securely store it to allow a user to remain logged in, as GitHub does not have a PKCE setup that would allow OAuth with a front end only app. Data and authentication (GitHub) I used GitHub to authenticate, instead of creating a database with users, so all of that security could be handled elsewhere. I also used the GitHub API to make commits on every interval with the changes made to the notes. Primary component The text editor is built with CodeMirror , which is also used by Chrome and Firefox DevTools, Codepen, GitHub, and basically any other in-browser fiddle environment. Behind the scenes, it uses webpack for bundling, Jest and Cypress for testing, ESLint , and a few other open-source helper libraries. GitHub Sync The part I had the most trouble with in the application was syncing to GitHub. I had the app completed up to that point for a long time before I finally finished it. My original intention was that the app would save all the files exactly like you would organize them in a folder on your computer - all categories would be folders, and all notes would be a .md file within the folder. I imagined that every time you sync the data, it would be the equivalent of doing git add . && git commit && git push . However, it's not so simple to do that with the GitHub API. I spent a lot of time figuring out how to create and edit multiple files at once, and I realized there was really no way to do it without making an API call for every single file. I know it seems like there should be a multi-file create or update API call, but there's not. What I finally ended up doing is what you see in the sync.ts file , which does the following: Gets a reference to the current head Creates a blob for each file (I decided on just creating one file for notes.json and one file for categories.json , instead of having a file for each note) Creates a tree path Creates a tree Creates a commit Updates a reference With these steps, on every sync a new commit is created for any updates that are made since the last sync. Open Source Nobody should start to undertake a large project. You start with a small trivial project, and you should never expect it to get large. If you do, you'll just over design and generally think it is more important than it likely is at that stage. Or worse, you might be scared away by the sheer size of the work you envision. So start small, and think about the details. Don't think about some big picture and fancy design. If it doesn't solve some fairly immediate need, it's almost certainly over-designed. And don't expect people to jump in and help you. That's not how these things work. You need to get something half-way useful first, and then others will say \"hey, that almost works for me\", and they'll get involved in the project. \u2014 Linus Torvalds I just started building this for a few months and once it got to a state where it was recognizable a note-taking app, people started making issues and PRs. It even made it to the trending list on GitHub one day, and I also think there were a lot of Hacktoberfest contributions (most positive, a little spam I had to shut down immediately). Ultimately, there were about 250 pull requests and 200 issues created. I divided the issues - everything got a label of a type and a status. Types were: features, bugs, refactors, testing, questions, documentation, and accessibility. Statuses were: blocked, duplicate, won't do, invalid, can't replicate, in progress, completed, and postponed. Labeling everything kept it all organized and easy to keep track of for me I tagged and released the big changes, and I connected the app with SonarQube to track any bugs or problems (very few due to TypeScript) and Cypress/Jest with Travis to run tests before merging PRs. I learned a lot about managing and maintaining a coding project while working on this. I took care of the main behavior notes, the authentication, the GitHub sync, and many contributors fixed bugs, designed the logo, set up a testing framework, and suggested and implemented new features. Conclusion Overall, working on TakeNote was a really positive experience for me. It's easy to get excited about a project and never finish it, or get stuck at a road block, but I saw it through to the end making it the fourth big project of mine: Primitive the CSS framework, Laconia the MVC PHP app, a Chip-8 emulator , and now TakeNote . Ultimately, I decided not to release the app as a real service, but leave it out there as a fully functioning open-source project for people to see and learn from, and use and extend if they want. For myself, I decided to go with Bear for my own personal note-taking, as I realized I did not want to maintain something and spend more time on the maintenance of the app than the actual intended purpose of it. I hope you check out the demo and play around with it! I encourage you to build a project if you have an idea, because it's fun and you'll learn a lot along the way. About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: November 30, 2020 Category: Personal Tags life typescript projects Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/josh/",
        "title": "Memories of Josh | Tania Rascia's Personal Website",
        "headings": [
            "Memories of Josh",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter"
        ],
        "last_updated": "2024-10-23T01:36:14.627086",
        "content": []
    },
    {
        "url": "https://www.taniarascia.com/2022-into-2023/",
        "title": "2022 into 2023 | Tania Rascia's Personal Website",
        "headings": [
            "2022 into 2023",
            "Resolutions?",
            "I wrote 10 articles (11)",
            "Technical",
            "Personal",
            "I made 1264 commits",
            "I made 1 project",
            "I got a promotion",
            "I drew 10ish things",
            "I recorded 1 song (and got an accordion)",
            "I did a lot of interior decorating",
            "What I want to write about",
            "What I want to learn next",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:14.868496",
        "content": [
            "2022 into 2023 | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me 2022 into 2023 Happy New Year, friends! Time to write another year in review. This will be the seventh time I've done this. Here are all the previous ones: 2016 into 2017 2017 into 2018 2018 into 2019 2019 into 2020 2020 into 2021 2021 into 2022 I have really high hopes for 2023! It's only a few days in and so far so good. I've really had a chance to relax, rest, and reset. Here's me and Dimo at the end of 2022. Here are a few bits of content out in the ether that I enjoyed this year. The Bear (TV Show) - If you want to know what my life was like before changing careers into development, this show does the best job I've ever seen. It takes place in Chicago, to boot! I usually avoid food/kitchen related shows like the plague, but I'm glad I watched this one. I could very much relate to this show. Reservation Dogs (TV Show) - I just watched the first season of this show last week, and I thought it was great. It's a slice of life show about four kids on a Native American/Indian reservation in Oklahoma. 1883 (TV Show) - A really good Western themed show about a family on the Oregon trail. I was surprised how much I liked it. Highly recommended! Avatar: The Way of Water (Movie) - I loved the first Avatar, and this one was great, too! It made me feel something, and I spent a few days thinking about it after watching. There's just something about night time bioluminescence that can't be beat. Three-Body Problem Series (Book series) - A really good hard sci-fi series that I read this year. It was originally written in Chinese. It's very existential, and the scope of the story is bigger than most other sci-fi books I've ever read. Obsidian (App) - I switched from Bear + Todoist to Obsidian for note-taking and todos. I've been looking for a long time for ONE app the data is all stored in Markdown on folders on my computer, can sync between Mac, Windows, and iPhone, and can handle todos as well as note-taking. I found it all with Obsidian! I pay the full $100/year or so for Premium (sync), I think it's worth it to keep everything together. FanHOTS (Twitch) - The game Heroes of the Storm is my gaming addiction, and if long periods of time go by that I don't write, it's because I was probably playing HOTS instead. Every now and then, I decide I need to be productive instead and I delete the game. Fan is a great content creator with integrity who is highly entertaining as well. Despite the fact that HOTS is in maintenance mode and no longer has the player base of the heydey, he continues to play and teach, and I like to watch and support when I can. Resolutions? I gained a little more weight this year than I'd like, so I made a dashboard for tracking progress - weight, waist measurement, calories, BMI, alcohol intake, etc. Here's Weight Loss Dashboard (and Sandbox ) if you think that's helpful and would like to do something similar. I figure it's best to focus on one thing at a time, so I'm focusing on health/fitness/diet/exercise right now. My plan is to focus on one thing per month, so maybe one month will be all music, one month all drawing, one month all coding/learning, etc. We'll see! It's easy to say January 1st is an arbitrary date and doesn't mean anything, but honestly perception can be powerful. For me personally, it was really hard to start any goal in December with all the parties and get togethers and routine disruption, and a nice, cold, boring January is a good time to start a new routine. It also gave me time to plan exactly what I want to do, which can also contribute to success. I wrote 10 articles (11) It wasn't an amazingly writing heavy year for me but! I wrote a few good ones. Five of them were written in December - I'm getting back into the swing of things! (It's actually 11, but one that I wrote for DigitalOcean has not been published yet.) Technical Creating a Schema-Based Form System - I really like this article. One of my biggest philosophies when writing code is do not hardcode markup . In this article, I create a form system in which you simply pass data, and the system takes care of all the types and validation and everything else. I've used a system like this to great success in production at multiple companies. Building a Musical Instrument with the Web Audio API - In order to create KeyboardAccordion.com , I had to learn a bit about Svelte, the Web Audio API, and how frequencies work with it. I documented it all here. How To Set Up a GraphQL API Server in Node.js - A follow up to An Introduction to GraphQL , this article is more of a practical straightforward tutorial. Simplifying Drag and Drop - A demo I made for working with React + Drag and Drop, and making it a little more pleasant to work with. Using Path Matching in React Router - An article I made where (spoiler) at the end I realized I didn't need any of it. Testing API Calls in useEffect using React Testing Library and Jest - Testing is probably what I'm weakest at, so once I figure something out after struggling with it, I like to write about it. Personal Redesign: Version 6.0 - Yet another redesign this year. I'm really happy with the current design, so I think I'm going to keep it like this for a while! Memories of Josh - Pictures and memories of my friend, Josh. Tending to my Digital Garden - A personal post I made about the current state of life, burnout, and work. An Ode to Animorphs - If you're into sci-fi at all, set aside your preconceived notions and give this article a read! I just want to get people into Animorphs lore in 2023. I made 1264 commits The commit metric is fun to track. The vast majority of my coding has been work-related. So as you can see, I've been busy M-F basically every week this year except for two small vacations! Still, on the personal side I managed to get a few demos/projects in this year, a redesign, and some posts. I made 1 project My project this year was KeyboardAccordion.com , which I made to be able to practice the accordion at night and not bother anyone. The write-up for this project is the Musical Instrument/Web Audio API article. I also started a Baba Is You game implemention earlier in the year that I abandoned for a bit, I'd like to finish that up this year. I got a promotion I've been making fewer updates here, but working as much or more than ever. I actually really enjoy my job and the people I work with, and greatly appreciate that I have a good work-life balance. I was recently promoted to Principal Software Engineer, after a few years working as a Staff Software Engineer. I've really come a long way in the past eight or nine years of working as a developer, and still have a long way to go! I drew 10ish things I bought a tablet this year! I made an Illustration page to keep track of what I draw. My plan to get back into the swing of things was to draw all 150 Pok\u00e9mon. I haven't made it that far yet, but it's a start. I recorded 1 song (and got an accordion) I recorded one song this year, after a two year break. Let It Be I also got an awesome wooden chromatic button accordion I'm very excited about learning. I'm slowly teaching myself to play, but I'm completely self-taught when it comes to any kind of music and I can't really read sheet music, so it's slow going. I'm currently wondering if I can find a teacher in my area, but it's a pretty niche instrument so we'll see. I learned a few songs on it already though - Korobeiniki (Tetris theme), Shostakovich Waltz No. 2, La Noyee, La Valse des Monstres, Sonic Accordion Song, and Final Fantasy VI Wedding Waltz. I did a lot of interior decorating My entire life up until now, I never really cared much about my environment: I lived in small, cheap apartments with cheap furniture and little to no art. I'm not sure why exactly - I was frugal, but also it felt like the apartments were just supposed to be temporary, so why would I put time and effort into decorating them? I've stepped away from the minimalism mindset lately. I spent a lot of time this year buying art and furniture for my latest apartment, and making a cool battlestation for WFH + play. Now I have art on the walls from the Chicago transit system, Cowboy Bebop, Animorphs, Harry Potter, russian propaganda, space, my own paintings, and small designs from artists around the city. For once I really enjoy my environment and I'm glad I put the time and effort into it. What I want to write about A few topics I have ideas about and would like to write about in the coming year: WebSocket API, BroadcastChannel API, SharedWorker API Swagger/OpenAPI Common array/object tasks Redux + Immer Drawing in Photoshop Logical fallacies Existentialism Internet in the '90s What I want to learn next A few topics I'd like to learn more about in the coming year: Redis Pub/Sub Why everyone loves Tailwind Server-side rendering (NextJS?) Python environment setup CSS animations (This is on my list of things to learn from 2016...) Data structures (On my list from 2019...) Sometimes it's hard for me to realize how much I've learned over the last several years, but the list is actually getting quite long. It's not quite so obvious what I should learn next, suggestions are appreciated! Maybe Rome, Deno, WebAssembly, web components, newer CSS concepts, in-depth exploration of DevTools, or Rust? Conclusion This year I started writing a bit more about personal stuff - my friend, my childhood Animorphs obsession, burnout. It's been good practice for me to write in a format that isn't just an A-to-B tutorial. It's actually quite a struggle for me to focus and do reseach, which is why I haven't written so much of those types of posts, but we'll see what interests me in 2023. I think over the last few years, I've become much less of a \"known entity\" in the JavaScript/front end world. I write less, the topics I do write about tend to be more focused and advanced, and I don't participate much in online discussion. Unfortunately, that means my connections with other people dwindle, so I hope in 2023 I can make some more good, genuine, human connections through this website, and in the real world as well. Thank you all for reading, and I hope you have a great 2023! About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: January 02, 2023 Category: Personal Tags life new-year Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/blog",
        "title": "Articles | Tania Rascia's Personal Website",
        "headings": [
            "Articles",
            "2024",
            "Creating a Keyboard Shortcut Hook in React (Deep Dive)",
            "Tables with Fixed Headers and Horizontal Scroll",
            "2023",
            "How to Use WebSockets in a Redux Application",
            "Understanding the GraphQL Type System",
            "2022",
            "Testing API Calls With React Testing Library and Jest",
            "Using Path Matching in React Router",
            "Simplifying Drag and Drop (Lists and Nested Lists)",
            "How To Set Up a GraphQL API Server in Node.js",
            "Creating a Schema-Based Form System",
            "2021",
            "An Introduction to GraphQL",
            "How to Sort, Filter, and Paginate a Table with JavaScript",
            "Writing a Sokoban Puzzle Game in JavaScript",
            "How to Structure and Organize a React Application",
            "Using OAuth with PKCE Authorization Flow (Proof Key for Code Exchange)",
            "How and When to Use Context in React with Hooks",
            "Integration Tests with Jest, Supertest, Knex, and Objection in TypeScript",
            "2020",
            "Understanding Modules, Import and Export in JavaScript",
            "How to Set Up webpack 5 From Scratch",
            "The Event Loop, Callbacks, Promises, and Async/Await in JavaScript",
            "How to Sort, Filter, and Paginate in a REST API",
            "Understanding Arrow Functions in JavaScript",
            "Using Git Submodules for Private Content",
            "Understanding Template Literals in JavaScript",
            "Understanding Destructuring, Rest Parameters, and Spread Syntax",
            "Writing an Emulator from Scratch in JavaScript (Chip-8)",
            "Understanding Default Parameters in JavaScript",
            "How to Use Redux and React",
            "Understanding Generators in JavaScript",
            "How to Set up a Mac for Development",
            "Understanding Map and Set in JavaScript",
            "How to Use Docker to Create a CI/CD Pipeline",
            "2019",
            "A Complete Guide to CSS Concepts and Fundamentals",
            "Client-side Authentication the Right Way (Cookies vs. Local Storage)",
            "Understanding This, Bind, Call, and Apply in JavaScript",
            "Roll Your Own Comment System for a Static Site",
            "How to Build a Node.js, Express, & PostgreSQL REST API",
            "How to Build a Simple MVC App From Scratch in JavaScript",
            "How to Make API Requests with Postman or cURL",
            "Display Build Status and Test Coverage Badges for a JavaScript Project",
            "How to Use Vue, the JavaScript Framework",
            "Using Context API in React (Hooks and Classes)",
            "Using React Router for a Single Page Application",
            "Writing a Snake Game for the Terminal in JavaScript",
            "Using Content Editable Elements in JavaScript (React)",
            "Understanding Bits, Bytes, and Numerical Bases",
            "2018",
            "Build a CRUD App in React with Hooks",
            "Promise.all with Async/Await",
            "Understanding REST APIs",
            "How to Use React, the JavaScript Framework",
            "How to Promisify an Ajax Call",
            "How To Use Object Methods in JavaScript",
            "The Simplest PHP Router",
            "Understanding Events in JavaScript",
            "How to Create a Snippet in Visual Studio Code",
            "Rewrite Query String to Path with htaccess",
            "How to Create and Use Bash Scripts",
            "SQL and PDO Operations Reference",
            "Understanding Classes in JavaScript",
            "How to Upload Files to a Server with Plain JavaScript and PHP",
            "Create a Simple CRUD Database App (Part 2)",
            "How to Paginate an Array in JavaScript",
            "ES6 Syntax and Feature Overview",
            "Basic Refactoring: Don't Repeat Yourself",
            "Object Oriented Pattern: JavaScript Classes and PHP Classes",
            "Unit Testing in JavaScript with Mocha",
            "How to Use the JavaScript Fetch API to Get JSON Data",
            "How to Set Up a Cron Job in MAMP",
            "Understanding Variables, Scope and Hoisting in JavaScript",
            "Create a Memory Game (ala Super Mario 3) with JavaScript",
            "Understanding Prototypes and Inheritance in JavaScript",
            "2017",
            "How To Make Changes to the DOM",
            "How to Use Local Storage with JavaScript",
            "How to Connect to an API with JavaScript",
            "How To Traverse the DOM",
            "How To Access Elements in the DOM",
            "Basic Authentication for an Express Node App (htpasswd)",
            "Understanding the DOM Tree and Nodes",
            "Introduction to the DOM",
            "How To Write Conditional Statements in JavaScript",
            "Understanding Date and Time in JavaScript",
            "Design for Developers: Specific Steps to Improve Your Website Design",
            "Understanding Functions in JavaScript",
            "Using While and Do While Loops in JavaScript",
            "How To Use the Switch Statement in JavaScript",
            "How To Create For Loops in JavaScript",
            "Understanding Objects in JavaScript",
            "How To Use Array Methods in JavaScript: Iteration Methods",
            "How To Use Array Methods in JavaScript: Accessor Methods",
            "Examples of Map, Filter and Reduce in JavaScript",
            "How To Use Array Methods in JavaScript: Mutator Methods",
            "Understanding Arrays in JavaScript",
            "Node.js and npm Tutorial: Installation and Usage",
            "How To Index, Split, and Manipulate Strings in JavaScript",
            "How to Work with Strings in JavaScript",
            "Understanding Syntax and Code Structure",
            "How to Install Apache, PHP 7, and MySQL on Ubuntu with Vagrant",
            "How to Set Up a Virtual Server with Vagrant and VirtualBox",
            "How To Write Comments in JavaScript",
            "How to Generate a Public Key from a Private Key",
            "Build a PHP & MySQL CRUD Database App From Scratch",
            "Smooth Scroll to ID with jQuery",
            "Prevent Mouse Scroll from Zooming on Embedded Google Maps",
            "A Practical Guide to Search Engine Optimization (SEO) with Google",
            "Background Position Fixed and Cover with CSS",
            "Crossfade Between Two Images with CSS Animations",
            "Redirect all HTTP requests to HTTPS",
            "Simple jQuery Examples with Code and Demos",
            "How to Use jQuery, a JavaScript Library",
            "How to Request JSON API Data with JavaScript or PHP",
            "How to Use the Command Line in Linux and macOS",
            "2016",
            "My Complete Front End Web Development Setup",
            "Styling UI Components from Scratch: Buttons & Forms",
            "Setting Up a Basic Cron Job on a Linux Server",
            "WordPress Tutorial: Custom Fields and Meta Boxes",
            "How to Build a Responsive Image Gallery with Flexbox",
            "How To Do Math in JavaScript with Operators",
            "JavaScript Comparisons, Math, and Logic",
            "Adding Syntax Highlighting to Code Snippets in a Blog or Website",
            "Parallax Scroll Effect",
            "JavaScript Comments, Variables, Data Types, and Hello, World!",
            "Automated Task Running in JavaScript with Gulp",
            "Obtain a TLS/SSL Certificate and Enable HTTPS Encryption",
            "WordPress Tutorial: Pagination, Comments, Functions, & Custom Posts",
            "2015",
            "How to Set Up an EC2 Virtual Server in AWS",
            "How to Use Sass, a CSS Preprocessor",
            "How to Create a Static Website with Jekyll",
            "Full Screen Navigation Overlay",
            "Google Maps APIs for Multiple Locations",
            "How to Use Bootstrap, a CSS Framework",
            "Off Canvas Navigation",
            "Understanding the Fundamentals of Responsive Design",
            "RSS Feeds",
            "Migrating a WordPress Site to a Live Server",
            "Automated Task Running in JavaScript with Grunt",
            "WordPress Tutorial: Developing a Wordpress Theme from Scratch",
            "Setting Up a Local Server Environment",
            "Setting Up Virtual Hosts",
            "How to Create a Flexbox Grid",
            "Responsive Dropdown Navigation Bar",
            "Basic HTML5 Skeleton File",
            "Getting Started with Git for Version Control"
        ],
        "last_updated": "2024-10-23T01:36:15.039832",
        "content": [
            "Articles | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me Articles Guides, references, and tutorials on programming, web development, and design. View All Tags 2024 Creating a Keyboard Shortcut Hook in React (Deep Dive) Oct 19 New! Tables with Fixed Headers and Horizontal Scroll Oct 09 New! 2023 How to Use WebSockets in a Redux Application Feb 15 Understanding the GraphQL Type System Jan 27 2022 Testing API Calls With React Testing Library and Jest Dec 09 Using Path Matching in React Router Dec 05 Simplifying Drag and Drop (Lists and Nested Lists) Sep 05 How To Set Up a GraphQL API Server in Node.js Jun 13 Creating a Schema-Based Form System Jan 31 2021 An Introduction to GraphQL Nov 17 How to Sort, Filter, and Paginate a Table with JavaScript Oct 22 Writing a Sokoban Puzzle Game in JavaScript Jul 26 How to Structure and Organize a React Application Jun 23 Using OAuth with PKCE Authorization Flow (Proof Key for Code Exchange) Jun 20 How and When to Use Context in React with Hooks Jun 15 Integration Tests with Jest, Supertest, Knex, and Objection in TypeScript Apr 06 2020 Understanding Modules, Import and Export in JavaScript Oct 23 How to Set Up webpack 5 From Scratch Oct 15 The Event Loop, Callbacks, Promises, and Async/Await in JavaScript Sep 10 How to Sort, Filter, and Paginate in a REST API Sep 09 Understanding Arrow Functions in JavaScript Aug 01 Using Git Submodules for Private Content Jul 01 Understanding Template Literals in JavaScript Jun 30 Understanding Destructuring, Rest Parameters, and Spread Syntax May 14 Writing an Emulator from Scratch in JavaScript (Chip-8) Apr 13 Understanding Default Parameters in JavaScript Mar 31 How to Use Redux and React Mar 09 Understanding Generators in JavaScript Feb 29 How to Set up a Mac for Development Feb 17 Understanding Map and Set in JavaScript Feb 12 How to Use Docker to Create a CI/CD Pipeline Feb 07 2019 A Complete Guide to CSS Concepts and Fundamentals Dec 02 Client-side Authentication the Right Way (Cookies vs. Local Storage) Oct 29 Understanding This, Bind, Call, and Apply in JavaScript Oct 04 Roll Your Own Comment System for a Static Site Aug 16 How to Build a Node.js, Express, & PostgreSQL REST API Aug 09 How to Build a Simple MVC App From Scratch in JavaScript Jul 30 How to Make API Requests with Postman or cURL Jul 16 Display Build Status and Test Coverage Badges for a JavaScript Project Jul 15 How to Use Vue, the JavaScript Framework May 16 Using Context API in React (Hooks and Classes) Apr 25 Using React Router for a Single Page Application Apr 25 Writing a Snake Game for the Terminal in JavaScript Apr 09 Using Content Editable Elements in JavaScript (React) Jan 22 Understanding Bits, Bytes, and Numerical Bases Jan 04 2018 Build a CRUD App in React with Hooks Nov 07 Promise.all with Async/Await Oct 04 Understanding REST APIs Sep 21 How to Use React, the JavaScript Framework Aug 20 How to Promisify an Ajax Call Aug 08 How To Use Object Methods in JavaScript Aug 03 The Simplest PHP Router Jun 21 Understanding Events in JavaScript Jun 19 How to Create a Snippet in Visual Studio Code Jun 12 Rewrite Query String to Path with htaccess Jun 07 How to Create and Use Bash Scripts May 29 SQL and PDO Operations Reference May 08 Understanding Classes in JavaScript May 04 How to Upload Files to a Server with Plain JavaScript and PHP Apr 28 Create a Simple CRUD Database App (Part 2) Apr 23 How to Paginate an Array in JavaScript Apr 09 ES6 Syntax and Feature Overview Apr 09 Basic Refactoring: Don't Repeat Yourself Apr 05 Object Oriented Pattern: JavaScript Classes and PHP Classes Mar 29 Unit Testing in JavaScript with Mocha Mar 27 How to Use the JavaScript Fetch API to Get JSON Data Mar 06 How to Set Up a Cron Job in MAMP Mar 04 Understanding Variables, Scope and Hoisting in JavaScript Feb 20 Create a Memory Game (ala Super Mario 3) with JavaScript Feb 07 Understanding Prototypes and Inheritance in JavaScript Jan 12 2017 How To Make Changes to the DOM Dec 26 How to Use Local Storage with JavaScript Dec 19 How to Connect to an API with JavaScript Dec 07 How To Traverse the DOM Dec 04 How To Access Elements in the DOM Nov 20 Basic Authentication for an Express Node App (htpasswd) Nov 13 Understanding the DOM Tree and Nodes Nov 07 Introduction to the DOM Nov 06 How To Write Conditional Statements in JavaScript Oct 19 Understanding Date and Time in JavaScript Oct 19 Design for Developers: Specific Steps to Improve Your Website Design Oct 12 Understanding Functions in JavaScript Oct 09 Using While and Do While Loops in JavaScript Sep 27 How To Use the Switch Statement in JavaScript Sep 11 How To Create For Loops in JavaScript Sep 11 Understanding Objects in JavaScript Aug 24 How To Use Array Methods in JavaScript: Iteration Methods Aug 15 How To Use Array Methods in JavaScript: Accessor Methods Aug 14 Examples of Map, Filter and Reduce in JavaScript Aug 11 How To Use Array Methods in JavaScript: Mutator Methods Aug 10 Understanding Arrays in JavaScript Jul 28 Node.js and npm Tutorial: Installation and Usage Jul 21 How To Index, Split, and Manipulate Strings in JavaScript Jul 14 How to Work with Strings in JavaScript Jul 11 Understanding Syntax and Code Structure Jul 05 How to Install Apache, PHP 7, and MySQL on Ubuntu with Vagrant Jul 03 How to Set Up a Virtual Server with Vagrant and VirtualBox Jul 02 How To Write Comments in JavaScript Jun 20 How to Generate a Public Key from a Private Key Jun 06 Build a PHP & MySQL CRUD Database App From Scratch May 16 Smooth Scroll to ID with jQuery Apr 14 Prevent Mouse Scroll from Zooming on Embedded Google Maps Apr 05 A Practical Guide to Search Engine Optimization (SEO) with Google Mar 29 Background Position Fixed and Cover with CSS Mar 27 Crossfade Between Two Images with CSS Animations Mar 27 Redirect all HTTP requests to HTTPS Mar 23 Simple jQuery Examples with Code and Demos Feb 23 How to Use jQuery, a JavaScript Library Feb 08 How to Request JSON API Data with JavaScript or PHP Jan 22 How to Use the Command Line in Linux and macOS Jan 09 2016 My Complete Front End Web Development Setup Nov 10 Styling UI Components from Scratch: Buttons & Forms Nov 08 Setting Up a Basic Cron Job on a Linux Server Oct 14 WordPress Tutorial: Custom Fields and Meta Boxes Aug 10 How to Build a Responsive Image Gallery with Flexbox Jul 26 How To Do Math in JavaScript with Operators Jul 20 JavaScript Comparisons, Math, and Logic Jun 25 Adding Syntax Highlighting to Code Snippets in a Blog or Website Jun 07 Parallax Scroll Effect Apr 09 JavaScript Comments, Variables, Data Types, and Hello, World! Mar 30 Automated Task Running in JavaScript with Gulp Feb 16 Obtain a TLS/SSL Certificate and Enable HTTPS Encryption Jan 29 WordPress Tutorial: Pagination, Comments, Functions, & Custom Posts Jan 14 2015 How to Set Up an EC2 Virtual Server in AWS Dec 22 How to Use Sass, a CSS Preprocessor Dec 12 How to Create a Static Website with Jekyll Nov 30 Full Screen Navigation Overlay Nov 21 Google Maps APIs for Multiple Locations Nov 14 How to Use Bootstrap, a CSS Framework Nov 10 Off Canvas Navigation Nov 02 Understanding the Fundamentals of Responsive Design Oct 31 RSS Feeds Oct 28 Migrating a WordPress Site to a Live Server Oct 23 Automated Task Running in JavaScript with Grunt Oct 20 WordPress Tutorial: Developing a Wordpress Theme from Scratch Oct 17 Setting Up a Local Server Environment Oct 17 Setting Up Virtual Hosts Oct 17 How to Create a Flexbox Grid Oct 07 Responsive Dropdown Navigation Bar Oct 02 Basic HTML5 Skeleton File Sep 30 Getting Started with Git for Version Control Sep 24 Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/graphql-type-system/",
        "title": "Understanding the GraphQL Type System | Tania Rascia's Personal Website",
        "headings": [
            "Understanding the GraphQL Type System",
            "Introduction",
            "Prerequisites",
            "Scalar Types",
            "Int",
            "Float",
            "String",
            "Boolean",
            "ID",
            "Custom Scalars",
            "Enum Type",
            "Non-Null Type",
            "List Type",
            "Object Type",
            "Root Operation Types",
            "Field Arguments",
            "Interface Type",
            "Union Type",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:15.151073",
        "content": [
            "Understanding the GraphQL Type System | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me Understanding the GraphQL Type System Introduction GraphQL is a modern solution for facilitating the communication between a front end and a data source. All of the details and capabilities of a GraphQL implementation are laid out in the GraphQL Schema . In order to write a functioning GraphQL schema, you must understand the GraphQL Type System . In this article, you will learn about GraphQL types: the five built-in scalar types, Enums , the List and Non-Null wrapping types, Object types , and the abstract Interface and Union types that work alongside them. You will review examples for each type and learn how to use them to build a complete GraphQL schema. Prerequisites To get the most out of this tutorial, you should have: An understanding of the fundamental concepts of GraphQL, which are laid out in An Introduction to GraphQL . A GraphQL environment, an example of which can be found in How to Set Up a GraphQL API Server in Node.js . Scalar Types All the data in a GraphQL schema ultimately resolve to various scalar types, which represent primitive values. GraphQL responses can be represented as a tree, and the scalar types are the leaves at the ends of the tree. There can be many levels in a nested response, but the last level will always resolve to a scalar (or Enum) type. GraphQL comes with five built-in scalar types: Int , Float , String , Boolean , and ID . Int Int is a signed 32-bit non-fractional numerical value. It is a signed (positive or negative) integer that does not include decimals. The maximum value of a signed 32-bit integer is 2,147,483,647 . This is one of the two built-in scalars used for numerical data. Float A Float is a signed double-precision fractional value. It is a signed (positive or negative) number that contains a decimal point, such as 1.2 . This is the other built-in scalar used for numerical data. String A String is a UTF-8 character sequence. The String type is used for any textual data. This can also include data like very large numbers. Most custom scalars will be types of string data. Boolean A Boolean is a true or false value. ID An ID is a unique identifier. This value is always serialized as a string, even if the ID is numerical. An ID type might be commonly represented with a Universally Unique Identifier (UUID) . Custom Scalars In addition to these built-in scalars, the scalar keyword can be used to define a custom scalar. You can use custom scalars to create types that have additional server-level validation, such as Date , Time , or Url . Here is an example defining a new Date type: scalar Date The server will know how to handle interactions with this new type using the GraphQLScalarType . Enum Type The Enum type , also known as an Enumerator type, describes a set of possible values. Using the Fantasy Game API theme from other tutorials in the series, you might make an enum for the game characters' Job and Species with all the values the system will accept for them. An Enum is defined with the enum keyword, like so: \" The job class of the character. \" enum Job { FIGHTER WIZARD } \" The species or ancestry of the character. \" enum Species { HUMAN ELF DWARF } In this way, it is guaranteed that the Job of a character is FIGHTER or WIZARD and can never accidentally be \"purple\" or some other random string, which could be possible if you used a String type instead of making a custom Enum. Enums are written in all-caps by convention. Enums can also be used as the accepted values in arguments. For example, you might make a Hand enum to denote whether a weapon is single-handed (like a short sword) or double-handed (like a heavy axe), and use that to determine whether one or two can be equipped: enum Hand { SINGLE DOUBLE } \" A valiant weapon wielded by a fighter. \" type Weapon { name : String ! attack : Int range : Int hand : Hand } type Query { weapons ( hand : Hand = SINGLE ) : [ Weapon ] } The Hand enum has been declared with SINGLE and DOUBLE as values, and the argument on the weapons field has a default value of SINGLE , meaning if no argument is passed then it will fall back to SINGLE . Non-Null Type You might notice that null or undefined , a common type that many languages consider a primitive, is missing from the list of built-in scalars. Null does exist in GraphQL and represents the lack of a value. All types in GraphQL are nullable by default and therefore null is a valid response for any type. In order to make a value required, it must be converted to a GraphQL Non-Null type with a trailing exclamation point. Non-Null is defined as a type modifier, which are types used to modify the type it is referring to. As an example, String is an optional (or nullable) string, and String! is a required (or Non-Null) string. List Type A List type in GraphQL is another type modifier. Any type that is wrapped in square brackets ( [] ) becomes a List type, which is a collection that defines the type of each item in a list. As an example, a type defined as [Int] will be a collection of Int types, and [String] will be a collection of String types. Non-Null and List can be used together to make a type both required and defined as a List, such as [String]! . Object Type If GraphQL scalar types describe the \"leaves\" at the end of the hierarchical GraphQL response, then Object types describe the intermediary \"branches\", and almost everything in a GraphQL schema is a type of Object. Objects consist of a list of named fields (keys) and the value type that each field will resolve to. Objects are defined with the type keyword. At least one or more fields must be defined, and fields cannot begin with two underscores ( __ ) to avoid conflict with the GraphQL introspection system. In the GraphQL Fantasy Game API example, you could create a Fighter Object to represent a type of character in a game: \" A hero with direct combat ability and strength. \" type Fighter { id : ID ! name : String ! level : Int active : Boolean ! } In this example, the Fighter Object type has been declared, and it has has four named fields: id yields a Non-Null ID type. name yields a Non-Null String type. level yields an Int type. active yields a Non-Null Boolean type. Above the declaration, you can also add a comment using double quotes, as in this example: \"A hero with direct combat ability and strength.\" . This will appear as the description for the type. In this example, each field resolves to a scalar type, but Object fields can also resolve to other Object types. For example, you could create a Weapon type, and the GraphQL schema can be set up where the weapon field on the Fighter will resolve to a Weapon Object: \" A valiant weapon wielded by a fighter. \" type Weapon { name : String ! attack : Int range : Int } \" A hero with direct combat ability and strength. \" type Fighter { id : ID ! name : String ! level : Int active : Boolean ! weapon : Weapon } Objects can also be nested into the fields of other Objects. Root Operation Types There are three special Objects that serve as entrypoints into a GraphQL schema: Query, Mutation, and Subscription. These are known as Root Operation types and follow all the same rules as any other Object type. The schema keyword represents the entrypoint into a GraphQL schema. Your root Query, Mutation, and Subcription types will be on the root schema Object: schema { query : Query mutation : Mutation subscription : Subscription } The Query type is required on any GraphQL schema and represents a read request, similar to a REST API GET . The following is an example of a root Query Object that returns a List of Fighter types: type Query { fighters : [ Fighter ] } Mutations represent a write request, which would be analogous to a POST , PUT , or DELETE in a REST API. In the following example, the Mutation has an addFighter field with a named argument ( input ): type Mutation { addFighter ( input : FighterInput ) : Fighter } Finally, a Subscription corresponds to an event stream, which would be used in conjunction with a Websocket in a web app. In the GraphQL Fantasy API, perhaps it could be used for random battle encounters, like so: type Subscription { randomBattle ( enemy : Enemy ) : BattleResult } Note that the schema entrypoint is often abstracted away in some GraphQL implementations. Field Arguments The fields of a GraphQL Object are essentially functions that return a value, and they can accept arguments like any function. Field arguments are defined by the name of the argument followed by the type. Arguments can be any non-Object type. In this example, the Fighter Object can be filtered by the id field (which resolves to a Non-Null ID type): type Query { fighter ( id : ID ! ) : Fighter } This particular example is useful for fetching a single item from the data store, but arguments can also be used for filtering, pagination, and other more specific queries. Interface Type Like the Object type, the abstract Interface type consists of a list of named fields and their associated value types. Interfaces look like and follow all the same rules as Objects but are used to define a subset of an Object's implementation. So far in your schema, you have a Fighter Object, but you might also want to make a Wizard , a Healer , and other Objects that will share many of the same fields but have a few differences. In this case, you can use an Interface to define the fields they all have in common, and create Objects that are implementations of the Interface. In the following example, you could create a BaseCharacter Interface using the interface keyword with all the fields every type of character will possess: \" A hero on a quest. \" interface BaseCharacter { id : ID ! name : String ! level : Int ! species : Species job : Job } Every character type will have the fields id , name , level , species , and job . Now, imagine you have a Fighter type and a Wizard type that have these shared fields, but Fighters use a Weapon and Wizards use Spells . You can use the implements keyword to delineate each as a BaseCharacter implementation, which means they must have all the fields from the created Interface: \" A hero with direct combat ability and strength. \" type Fighter implements BaseCharacter { id : ID ! name : String ! level : Int ! species : Species job : Job ! weapon : Weapon } \" A hero with a variety of magical powers. \" type Wizard implements BaseCharacter { id : ID ! name : String ! level : Int ! species : Species job : Job ! spells : [ Spell ] } Fighter and Wizard are both valid implementations of the BaseCharacter Interface because they have the required subset of fields. Union Type Another abstract type that can be used with Objects is the Union type . Using the union keyword, you can define a type with a list of Objects that are all valid as responses. Using the Interfaces created in the previous section, you can create a Character Union that defines a character as a Wizard OR a Fighter : union Character = Wizard | Fighter The equal character ( = ) sets the definition, and the pipe character ( | ) functions as the OR statement. Note that a Union must consist of Objects or Interfaces. Scalar types are not valid on a Union. Now if you query for a list of characters, it could use the Character Union and return all Wizard and Fighter types. Conclusion In this tutorial, you learned about many of the types that define the GraphQL type system . The most fundamental types are the scalar types, which are the values that act as the leaves on the schema tree, and consist of Int , Float , String , Boolean , ID , and any custom scalar that a GraphQL implementation decides to create. Enums are lists of valid constant values that can be used when you need more control over a response than simply declaring it as a String , and are also leaves on the schema tree. List and Non-Null types are known as type modifiers, or wrapping types, and they can define other types as collections or required, respectively. Objects are the branches of the schema tree, and almost everything in a GraphQL schema is a type of Object, including the query , mutation , and subscription entrypoints. Interface and Union types are abstract types that can be helpful in defining Objects. For further learning, you can practice creating and modifying a GraphQL schema by reading the How to Set Up a GraphQL API Server in Node.js tutorial to have a working GraphQL server environment. About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: January 27, 2023 Category: Technical Tags graphql api Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/animorphs/",
        "title": "The Lore of Animorphs (an Ode) | Tania Rascia's Personal Website",
        "headings": [
            "The Lore of Animorphs (an Ode)",
            "Seerow's Kindness",
            "The First Innocents",
            "The Discovery of Humans",
            "The Sharing",
            "And Finally, the Animorphs",
            "The Author's Take",
            "Recap",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:15.335287",
        "content": [
            "The Lore of Animorphs (an Ode) | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me The Lore of Animorphs (an Ode) Recently, after I watched the latest movie in the Avatar series - yes, the one with the blue people - it got me thinking about why I like the series so much, and I realized it's not the only \"blue alien falls in love with human ultimately resulting in inter-species transmogrification\" story that I love. That got me thinking about Animorphs. Actually, I never stopped thinking about Animorphs. Despite the fact that I read through the series when I was in grade school, and despite the fact that it was written for children, the dark themes and situations, cast of complex characters, and moral quandaries presented within have stuck with me for my entire life. I know what you're thinking - Animorphs, really? Those weird kids' books with the embarrassing 90s cover art? The low-budget, forgettable Nickelodeon show? The next generation of the Babysitter's Club? The rag-tag Captain Planet squad of kids? Maybe you read a few of them as a kid and it didn't really stick with you, or maybe you were too old or too young to bother. It's hard to imagine that anything but nostalgia that could make me make such bold claims about Animorphs being so deep. Animorphs was dark. Animorphs was often disturbing, and no one got a happy ending. War, morality, ethics, genocide, torture, psychopathy, love, betrayal, loss of innocence, and sacrifice are all themes that were explored in Animorphs. I don't think anyone who didn't engage with the series understands or cares to, and why should they? But oddly I feel like this important part of my childhood and myself is misunderstood as a result and I have a desire to get more people to understand what I felt. Although I haven't read any of the books since I was a teenager, and the writing is very simple so my childhood imagination read between the lines and filled in the blanks, many quotes and situations throughout the story still evoke emotion and still make me think about them, and I want to share them with you. So let's start at the beginning... (Massive spoilers ahead) Seerow's Kindness The story does not begin with Earth, humans, or the Animorphs. Two alien species, the Yeerks and the Andalites, are engaged in a bitter war spanning the galaxy and humans eventually become unknowing pawns in this war. But before that there was Seerow's Kindness. Prince Seerow was an Andalite scientist and researcher that led the first expedition to the Yeerk homeworld. Andalites are a highly intelligent and advanced race of space-faring aliens that look like blue centaurs with no mouths that communicate with their minds using thought-speak. They also recently developed a technology that allows them to absorb the DNA of creatures they touch and morph into them at will. When Seerow arrives on this new planet, he discovers two sentient species that evolved and live in an almost symbiotic harmony: a highly-intelligent and slug-like parasitic species known as the Yeerks, and a host species with low intelligence and poor motor skills known as the Gedd. Yeerks can burrow into the ear canal of a sentient species, wrap around the brain stem, and take control of the host. In their natural state, Yeerks are blind and helpless, and need to return to their pool to feed every three days. Seerow befriends the Yeerks and teaches them writing, science, technology, and space travel. He takes pity on them and believes they have the right to join other sentient races, and seeks to form a peaceful coalition of cooperation and understanding between the two species. This era of harmony doesn't last long - a group of Yeerks rebel and betray the Andalites, steal several ships and escape to space with intent to expand their empire, find new hosts, and not be forever playing second fiddle to the Andalites. You're a fool, Seerow. A soft, sentimental, well-meaning fool. And now my men are dead and the Yeerks are loose in the galaxy. How many will die before we can bring this contagion under control? How many will die for Seerow's kindness? \u2014 Alloran This event leads to the start of the Andalite-Yeerk War, and the creation of the sarcastically named Seerow's Kindness law, in which Andalites must never give their advanced technology to any other race. Already, I'm intrigued by how the supposed heroes and villains are compelling and not so black-and-white. The war does not begin with a conquest for land or a fight for ideology, but with an innocent act of naive kindness. Although the Andalites are our supposed heroes, they're full of arrogance and pride. And although the Yeerks are our clear villains, it is possible to empathize with their situation. The First Innocents After the events on the Yeerk homeworld, the disgraced Seerow is exiled to a new planet with his family. This new planet is the homeworld of the Hork-Bajir, a fearsome looking but peaceful race of tree-dwelling reptilians. The Hork-Bajir are a simple tribal people that have not even discovered music or art yet. Once every several generations, a special Hork-Bajir capable of deep understanding and intelligence known as a seer is born to the people, who is seen as a harbinger of change. One such seer, named Dak Hamee, is living on the Hork-Bajir homeworld when Seerow and his family are stationed there. Seerow's daughter Aldrea befriends Dak, and they begin to form a bond sharing each other's culture and knowledge. Soon enough, the Yeerks show up for their first planetary conquest, and Aldrea's family are among the first casualties. The Hork-Bajir have no concept of killing or war, making them incredibly simple to subjugate and turn into Controllers. Aldrea encourages Dak to teach his people to fight, and together they form a resistance force against the Yeerks. \"You are the seer. You were born to teach your\u00a0people a new thing. Maybe you were born to teach your people to fight.\" \"I hoped I had been chosen to show my people all the things your\u00a0father tried to show the Yeerks. I wanted to teach them music. Writing. Art...\" \u2014 Aldrea and Dak Dak leads his people knowing it's the only way to save them, but feels a deep remorse for introducing war and violence to his people who only knew peace. \"We don\u2019t unleash a plague of parasites on the galaxy, endangering every other free species, and then go swaggering around like the lords of the universe. No, we\u2019re too simple for all that. We're too stupid to lie and manipulate. We're too stupid to be ruthless. We're too stupid to know how to build powerful weapons designed to annihilate our enemies. Until you came, Andalite, we were too stupid to know how to kill.\" \u2014 Dak Aldrea believes the Andalites will show up and save them, but the Andalite force led by War-Prince Alloran that eventually does arrive is not enough to turn the tide of the war. After many months of guerilla warfare, Alloran turns to drastic measures and plans to release a biological weapon called the Quantum Virus on the planet. The virus targets Hork-Bajir biology, and would kill all the Hork-Bajir on the planet, whether controlled by Yeerk or not. \"You ask me to kill my own people today and to lead my people in killing their brothers. You say they are not Hork-Bajir, but Yeerks. But when the dead have given up their souls to Mother Sky, there will be Hork-Bajir bodies lying dead.\" \u2014 Dak When Aldrea learns of this plan, she and Dak try to stop Alloran but are thwarted by a Yeerk named Esplin 9466, ranked Sub-Visser Twelve in the current Yeerk regime and one of the first Hork-Bajir-Controllers. They fail to prevent the release of the virus. Aldrea becomes disillusioned with her species, defects and morphs into a female Hork-Bajir. A morph becomes permanent if two hours pass without returning to the original form, and Aldrea becomes a Hork-Bajir forever. The war is lost; Alloran and his Andalite forces abandon the planet and Alloran, now disgraced, is henceforth known as the Butcher of Hork-Bajir. Aldrea and Dak hide away in a deep valley the virus does not reach, and have a child they name Seerow. Eventually the Yeerks take full control of the planet and its inhabitants, and completely ravage the natural habitat. Aldrea and Dak are killed, and their child is made into a Controller. Would he leave me? No. He cared for me. We had more in common than he could ever have with any Hork-Bajir. It was too late for Dak: He knew that the stars were not flowers. \u2014 Aldrea This story was a lot to take in. It really shows that everyone loses in war. Dak's loss of innocence, Alloran's loss of humanity, Aldrea's loss of hope and optimism, the innocents caught in the crossfire. It becomes increasingly difficult to root for the Andalites when they're advocating for actual genocide. I appreciate that K.A. Applegate respected her readers enough, young children that we were, to be able to engage with these themes. Although Aldrea, Dak, their child, and the Hork-Bajir homeworld are doomed, all hope is not completely lost. Many generations down the line, a seer will be born of their descendants who, having grown up in the midst of war, has no reservations about fighting back. The Discovery of Humans The end of the Hork-Bajir War is far from the last we see of disgraced War-Prince Alloran. Many years later, well into the Andalite-Yeerk War, Alloran - no longer in a position of much importance, although the atrocities he committed have been mostly kept quiet - oversees a simple transport mission with two Andalite cadets, Elfangor and Arbron. Their task is to return two humans back to Earth: Loren and Chapman, who have been essentially abducted by a mischiveous species of aliens called the Skrit Na. True to character, Alloran has no qualms ordering Elfangor to flush the cargo on the ship - thousands of defenseless Yeerks. Elfangor refuses. Still, it seems Alloran's time in the last war has left him with some mental scars as well. \"So, Loren, Daddy went nutso, huh? Another whacked-out 'Nam vet? I guess some guys can't take it.\" \"Be quiet, fool. Those who have been to war understand. Those who have not have no opinion worth hearing. Even those who return from war may never really come home.\" \u2014 Chapman and Alloran Elfangor and Loren discover that they are curious about each other's life and culture and begin to form a friendship on the journey. \"Do humans dream?\" \"I do. Every night.\" \"So do I.\" \u2014 Elfangor and Loren Soon the mission is interrupted, as the Andalites discover that the Skrit Na also inadvertently made off with a machine known the Time Matrix, the most potentially dangerous weapon in the galaxy. The Time Matrix is known in Andalite lore as having been created by an all-powerful being called the Ellimist, but Elfangor thought both the Time Matrix and the Ellimist were just a myth. The Andalites are desperate to stop the Skrit Na before they realize what they possess and sell it to the Yeerks. The humans get strung along as the Andalites head to the Yeerk colony on the Taxxon homeworld. The Taxxons are a sentient, hive-minded species that resemble enormous centipedes and live in a state of eternal hunger - a raging, insatiable and irresistible instinct to consume. Unlike other species, the Taxxons willingly exchanged their freedom for the promise of a constant supply of fresh meat from the Yeerks. Even Yeerk Controllers cannot overpower a Taxxon in a bloodlust-induced feeding frenzy. Taxxons will not even hesitate to turn to cannibalism when faced with a wounded of their own kind. The Yeerk Esplin is stationed on the Taxxon homeworld, his rank now upgraded to Sub-Visser Seven. Having realized that a Yeerk's host body becomes a political indication of power, he is obsessed with idea of being the first to infest an Andalite. \"There is one other possibility, Andalite. There has never been an Andalite-Controller. None of us has ever succeeded in capturing an Andalite alive. Your warriors use that nasty Andalite tail blade on themselves rather than be taken alive. Such a waste. Really. See, I want to be the first to have an Andalite body.\" \u2014 Esplin 9466 The three Andalites acquire Taxxon morphs on the homeworld, and do some reconnaissance before getting separated during a frenzy. By the time Elfangor and Arbron meet up again, Elfangor realizes with horror that Arbron is still in his Taxxon form - Arbron had passed the two-hour time limit and will forever be trapped in a Taxxon body. Initially, Arbron tries and fails to get Elfangor to kill him. Elfangor refuses and they get separated (and then Elfangor has a whole montage of discovering Earth through cigarette ads in a magazine and driving a Mustang through the Taxxon desert while drinking Dr. Pepper and blasting The Rolling Stones...) by the next time Elfangor and Arbron meet, Arbron had discovered the Living Hive and the Taxxons who were still loyal to their own kind, and decides to aid their war of resistance against the Yeerks. \"Don't pity me, Elfangor. I am glad I didn't die. Any life is better than none. And no matter how awful things seem, there is always meaning and purpose to be found.\" \u2014 Arbron Elfangor meets back up with Alloran who has captured the Yeerk Esplin, who he plans to use as leverage to get off the planet. Once again Alloran commands Elfangor to flush the Yeerks, but once again Elfangor refuses and discovers the reason for Alloran's disgrace. \"They are the enemy. Hypocrites! You're all hypocrites! We lost the Hork-Bajir war because of weak, moralizing fools like you! Because of fools like you, I am disgraced and shunned and sent off on trivial errands. What is the difference how you destroy the enemy? What does it matter if you kill them with a tail blade or shredder or quantum virus?\" \u2014 Alloran Secretly working together, Chapman knocks out Alloran and Esplin infects Alloran's body and becomes the first Yeerk controlled Andalite. He stood there, rage on his face. Alloran. War-Prince Alloran-Semitur-Corrass. But not really Alloran anymore. For the rest of my life I would remember that moment. The moment when I looked for the first time upon the abomination. \u2014 Elfangor Elfangor and Loren manage to escape with the Time Matrix on the ship, but they can't evade the Sub-Visser for long, who has now been elevated to a Visser position. Eventually, all three fight for control of the Time Matrix, and get transported to a new world. When Elfangor comes to, he sees the Guide Tree from his homeworld and believes himself to be home, but looking up at the sky he notices the red and gold of his own sky interspersed with the blue sky and clouds of Earth and lightning-torn green sky of the Yeerk homeworld. The memories and desires of Elfangor, Loren, and Esplin combined created a patchwork world. Elfangor finds Loren and as they travel through this newly-devised world, it only becomes more bizarre. Any sentient beings they encounter turn out to be simple representations formed from bits and pieces of their memories. Loren sees a boy she knows, but his splotchy, pustule ridden face is completely devoid of eyes, as his acne was all Loren ever noticed of him in the real world. Eventually they find the Time Matrix in a spiral at the center of the new universe. Elfangor decides due to the shame of being responsible for the existence of the first Andalite-Controller, the horror leaving Arbron behind, and the knowledge of what Andalites have done and what they might do with the Time Matrix technology, that he will go with Loren back to Earth. Elfangor decides to leave the war behind forever and morphs into a human, taking the name Alan Fangor. He buries the Time Matrix deep in a forest. He goes to college to be a computer scientist (and teaches his friends Bill and Steve a few things). And he marries Loren. Elfangor starts a new life, and for three years he lives as a human far away from the battles raging across the galaxy on distant stars. However, Elfangor's self-imposed exile will not last. The Ellimist, creator of the Time Matrix, arrives to right the wrongs of the alternate timeline Elfangor has created. He gives Elfangor the choice to stay and allow the galaxy to fall into chaos under the Yeerks, or return and become the War-Prince he was meant to be. \"You refused to slaughter defenseless prisoners. You refused to destroy yourself in order to win a battle. You are wise, for a primitive creature. But you also altered the course of time by using the Time Matrix. And that has created awful problems. For your people. For both your peoples. Your peoples need you. You are not where and when you should be, Elfangor.\" \u2014 Ellimist The Ellimist conveniently fails to mention that Loren was pregnant before restoring the timeline, erasing her memories of all that had conspired. \"No! You can't take me away! I have a son! That changes everything! Don't take me away!\" \u2014 Elfangor Although Elfangor leads his people to victory in many battles, his already tragic story will not end any happier. After crash-landing in an abandoned construction site on Earth during a battle with Esplin - now upgraded to Visser Three - he encounters five young humans. In a last-ditch effort, he breaks the law of Seerow's Kindness and gives them the morphing technology before being mercilessly devoured by Visser Three in morph. In a small thread of hope, one of the humans with the new technology is his son, Tobias. Tobias's story is hardly any less tragic - abandoned by his mother at birth, he grows up being shuffled between an alcoholic uncle and apathetic aunt. Tobias experienced no love in his childhood. When Tobias gets trapped in the body of a hawk and disappears from human life, there is no one to notice or care. The Ellimist intervenes in its twisted way, giving Tobias the ability to become a human, but only for two hours at a time, leaving the hawk form as his permanent body. Even as Tobias begins to find meaning in his life through his friends and the battle against the Yeerks, he ultimately gets kidnapped and tortured, and sees the woman he loves get murdered before his eyes. Tobias never recovers, severing his last remaining connections with humanity. Maybe the Ellimist should have just let Elfangor be a dad. Our story leaves off in the middle of the war, but does not explain how the Yeerks came to infiltrate humanity... The Sharing The Yeerks, now let loose upon the galaxy, are in search of what they consider a Class Five species: a species that is a viable for infestation with no biological drawbacks, that exist in large numbers and do not possess the military power and technology to present a challenge for invasion. A low-ranking Yeerk named Edriss 562, ranked Sub-Visser 409, hears about humanity through Esplin's report from the Taxxon homeworld with Loren and Chapman. Suspecting that humans might be a Class Five species and desiring the glory of discovering them herself, she hijacks and ship and heads for the region where Earth is thought to be, along with a subordinate named Essam. After obtaining information from their first victim, a solider in Desert Storm, the Yeerks head to America, believing it to be the most powerful sector - and Hollywood to be the most important, according to the broadcasts they discovered. Edriss finds and infests a drug addict known as Jenny Lines, and Essam's finds a host in a movie producer she is acquainted with. \"This human has suffered what the humans consider to be the most horrific torture and deprivation in their history. An experience in his youth that even a Taxxon would find cruel. I believe he has weaknesses, but is not weak.\" \"No, Essam, you are wrong. They are not a strong species with a few weaknesses. They are weak, with but a few strengths. We will not have to conquer humans. They will conquer themselves. They will come to us willingly and make themselves our slaves.\" \u2014 Edriss and Essam In need of a more useful host, Edriss disposes of Jenny Lines and infects a scientist named Allison Kim, and she begins to learn more about the resiliency of the human spirit. Allison fought me. What a glorious fight she made of it! I used to toy with her, withdraw some small bit of my control, just to see how long it would take her to find the weakness and attempt to exploit it. Once I surrendered control of a single eye. Allison discovered that she could change the direction of that one eye. She waited a week, til I was driving a car on a busy road, going at a high speed. Then, at the perfect moment, she closed her eye. She had been trying to kill herself, and me. Better dead than a Controller. \u2014 Edriss Essam, in turn, takes a new host named Hildy Gervais. Far from the Empire and sentenced to death for disobeying orders, Essam and Edriss begin to fade into human life, reveling in their new senses. Through Allison's romantic attraction to Hildy and Edriss's feelings for Essam, the four fall in love, resulting in Edriss becoming the mother of two human children through her host body. \"I love you, Edriss. And I love these small humans. Our children. One thing we swear, the four of us, the children will survive.\" \u2014 Essam Caught between her ambitions and her desire to bask in the experience of being a human, Edriss decides she must find a way to infiltrate humans from within. Starvation lay ahead. Essam said he would die rather than contact the Empire. Not me. I wasn\u2019t ready to die. I loved life as a human. Loved my life as Allison Kim, as Hildy's wife, as a mother. \u2014 Edriss Edriss invents the idea of The Sharing, a front organization and subtle cult for vulnerable people (similar to the real life Landmark ). She takes a secondary host to be the leader, and uses San Francisco as a base. It would cater to one of the most fundamental human weaknesses: the need to belong. The fear of loneliness. The hunger to be special. The craving for an exaggerated importance. I would make a haven for the weak, the inadequate, the fearful. \u2014 Edriss The Sharing consists of an Outer-Sharing and Inner-Sharing. To any observer, the Outer-Sharing seems like a community center with events like cookouts and rafting trips; something to bring your friends and family to. If and when a person voluntarily decides they wish to join the Inner-Sharing, they are told they will become a part of something beautiful and bigger than themselves, discover their true potential and be the best person they can become. Joining the Inner-Sharing means willingly submitting and being infested by a Yeerk. In this way, the slow subjugation of Earth begins, unbeknownst to the general human population. After the first human submits, Edriss contacts the Empire with proof, and the plan is put into operation. Horrified by everything that's happening, Hildy/Essam rebel against Edriss, free Allison, and escape with the children, but it doesn't last long. Edriss manages to track them down, kills Allison, and tears Essam in half as he crawls out of Hildy's ear, killing Essam and rendering Hildy insane. Edriss rises to the rank of Visser One, the highest military rank among the Yeerks, answering only to the Council of Thirteen. She takes a new human host, a woman named Eva, and stages her death. However, Eva has a son named Marco, who happened to be one of the kids walking through the abandoned construction site on that fateful night... And Finally, the Animorphs Everything I've mentioned so far has been backstory and build-up to the Animorphs. Animorphs was a book series that came out in 1996, when I was seven. Even as a young grade schooler I was embarrassed by the cover, but I was enthralled by the story. Every month, a new book would come out, and if I could scrounge up five dollars, I'd buy it. When I think back on it, the books had even more of an impact on my young self than I remembered - my first ever online screenname was Morph, one of the first websites I ever made was a little Animorphs fan site, and something about Andalite thought-speak and HTML is <forever linked> in my mind. The books were not all of particularly high quality - in order to meet the monthly quotas, ghost writers were hired, and the books in the middle of the run were often questionable filler - but the first books, last books, and supplemental world building books were highly engaging. The Animorphs follows our Breakfast Club cast of misfit who were in the abandoned construction site that night: Jake, the fearless leader; his cousin Rachel, a popular girl at school who finds more joy in the fighting than expected; \"kill 'em then cry over them\" Cassie, the team's voice of morality; Marco, the comic relief and the son of Visser One's host; and Tobias, the Three Wolf Moon shirt-wearing dweeb with a sad upbringing. And later Aximili, Elfangor's younger brother. They can't tell you their full names. They can't tell you where they live. Because nothing is safe, and anyone you know - your brother, your dad, your teacher, your best friend - might be under a Yeerk's control right now. Before Elfangor died, he gave the group the power to morph and told them the Andalite fleet might take a year or more to show up. If they don't want Earth to be completely taken over by then, they'll have to fight. At first the kids shrug it off, but Jake soon discovers that his brother, Tom, is a Controller. The group goes on their first mission to save Tom. They fail - and Tobias gets forever stuck in his hawk body - but from then on they become the Animorphs. Right from the start, the stakes are high. Tobias's human life is over, and Jake's brother is one of them . As the series progresses, it only gets darker as they have to deal with the horrors they're committing and their own mental torment. Rachel, once just a pretty girl who liked shopping and gymnastics, discovers that she revels in the thrill of violence and killing in her new Animorphs role. She takes the form of a grizzly bear, and is always down for any plan, no matter how dangerous or gruesome. She becomes the one who does the dirty work, the deeds no one else in the group wants on their conscience. Lately, it's been scaring me that I like it. That I look forward to it so much. I can't help myself. It's like I'm addicted or something. Addicted to danger. Addicted to defeating the Yeerk invaders. - Rachel At one point, another human named David gains the ability to morph but turns out to be a sadistic psychopath. Rachel is the one who carries out a plan to trap him in a cage until he's stuck in rat morph, and leave him stranded on an island as he pleads for Rachel to kill him. By the end of the series, Jake has to give the order to Rachel to kill his brother, Tom, who is the host for a high-ranking Yeerk. He also gives the order to flush 17,000 Yeerks in a pool into space. Tom was dead. And I wondered how I was ever going to explain it. I had ordered my\u00a0cousin\u00a0to execute my brother. How would I ever explain that? All these years I'd fought to keep us all alive, to stop the\u00a0Yeerks, always with the hope that someday I would save my brother, that he would come back, that he'd be Tom again. That was why I'd enlisted in the\u00a0war to begin with. I was going to save Tom. Tom was dead. The Yeerk in his head\u00a0was dead. And Rachel. - Jake Rachel also dies and Tobias, who loves her, loses the last shred of what keeps him tethered to humanity, escaping to the woods and living fully as a hawk. And ultimately, the whole story is actually a universe-spanning 4D chess game between two powerful entities, the Ellimist and the Crayak (similar to the Vorlons and the Shadows in Babylon 5) with all the rest of the characters just being pawns in their war. The Author's Take Nobody got a happy ending in Animorphs, which did not sit well with many readers. K.A. Applegate wrote a letter to the fans with her thoughts about it. Animorphs was always a war story. Wars don\u2019t end happily. Not ever. Often relationships that were central during war, dissolve during peace. Some people who were brave and fearless in war are unable to handle peace, feel disconnected and confused. Other times people in war make the move to peace very easily. Always people die in wars. And always people are left shattered by the loss of loved ones. So, you don\u2019t like the way our little fictional war came out? You don\u2019t like Rachel dead and Tobias shattered and Jake guilt-ridden? You don\u2019t like that one war simply led to another? Fine. Pretty soon you\u2019ll all be of voting age, and of draft age. So when someone proposes a war, remember that even the most necessary wars, even the rare wars where the lines of good and evil are clear and clean, end with a lot of people dead, a lot of people crippled, and a lot of orphans, widows and grieving parents. If you\u2019re mad at me because that\u2019s what you have to take away from Animorphs, too bad. I couldn\u2019t have written it any other way and remained true to the respect I have always felt for Animorphs readers. \u2014 K. A. Applegate Recap As I mentioned, a slew of dark and disturbing scenarios play out in Animorphs. Ethics and morality - The entire existence of Yeerks, and the fact that the only way they get to live a life that isn't completely devoid of all senses is through enslaving another creature, how far the Andalites and Animorphs will go while still being \"the good guys\", the killing of innocent hosts in battle Genocide - Alloran's usage of biological weapons against the Hork-Bajir, multiple occasions in which the Animoprhs eject thousands of defenseless Yeerks into space, or boil them alive in their own pools, the Ellimist's home planet being annihilated by another species when they think his simulation games are reality Torture and body horror - Tobias being relentlessly tortured by Taylor, a voluntary Controller who chose to betray humanity after being disfigured in a house fire, the Ellimist being forced to engage in mental games with a large, borg-like alien for centuries as his body hangs from a tentacle, surrounded the rotting corpses of his friends, countless situations in which the Animorphs almost get stuck trapped in horrible morphs like fleas and ants, Animorphs losing limbs and almost bleeding out during battles, Elfangor almost being eaten alive as a Taxxon Suicide - Allison Kim attempts to commit suicide rather than be a Controller PTSD - Jake's inability to cope after the war, Tobias's escape from humanity Love - Several stories of alien/human inter species love, such as Aldrea and Dak, Elfangor and Loren, and Visser One's strange four-way relationship. Of course, none of these ended well, and even within the Animorphs, Tobias and Rachel's story ends tragically, and Jake and Cassie grow apart after the war and part ways, as Cassie can never forgive Jake for the atrocities he's committed against his own brother, Rachel, and the Yeerks Psychopathy - Rachel's slow descent into an obsession with the war Not black and white - So much of the fiction I read as a child had pretty clear divisions without much deviation: Gryffindor good, Slytherin bad. Redwall mice good, rats bad. In Animorphs, there are Yeerks that fight for peace, and Andalites and humans that commit all manner of war crimes. Just a host of other messed up stuff - Rachel trapping David as a rat, a Yeerk discovering they can stay alive via cannibalism, Arbron being stuck forever in a Taxxon morph, Taxxons hunger being so overwhelming that they will auto-cannibalize if wounded, Jake recruiting physically disabled kids to be Animorphs by the end of the war and then sending them to die on suicide missions, a peaceful android species turning to violence and being forced to forever remember every detail of what they've done, Marco having to struggle with his resolve to kill his own mother if it comes to it, etc. And this is a broad take of the things I remember. So much of this has stayed with me, despite the fact that I read the whole series before I was even a preteen. Conclusion I really don't know if I'd recommend an adult to read Animorphs. Most of these books I read when I was 7-10 years old, and while the themes are very adult, the prose is very simple and full of onomatopoeia, and the books are full of dated '90s references, and there are a lot of them. As an adult, it's much harder to read between the lines and use your imagination to fill in all the blanks. I don't tend to have a very good memory for the details of most books after reading them, but Animorphs has stayed with me through the years. I'm sad that the TV show was so bad, and I have little hope for any good adaptation, but I find the world created around Animorphs to be fascinating, as well as the feelings that come along with all these stories. I wrote this article to share the backstory of this world with an audience who I don't expect to ever read the books. And there will always be a soft spot in my soul for a blue alien who falls in love with a human. About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: December 29, 2022 Category: Personal Tags books Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/horizontal-scroll-fixed-headers-table/",
        "title": "Tables with Fixed Headers and Horizontal Scroll | Tania Rascia's Personal Website",
        "headings": [
            "Tables with Fixed Headers and Horizontal Scroll",
            "Horizontal Scroll",
            "Sticky Headers",
            "Solution",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:15.827750",
        "content": [
            "Tables with Fixed Headers and Horizontal Scroll | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me Tables with Fixed Headers and Horizontal Scroll Turns out, creating an HTML table that has both horizontal scroll and fixed headers can be a tricky problem. As another developer said about this problem, You would think this is easy. But is really isn't . Horizontal Scroll When working with a table that has a lot of columns, you can ensure everything remains visible by adding horizontal scroll. You can do this by wrapping the table in a div that has overflow-x set to auto . Note : I prefer to use overflow-x: auto instead of overflow-x: scroll because scroll will always show the scroll container, even if there is no scroll available. It looks cleaner. style.css .table-outer { overflow-x : auto ; } index.html < div class = \" table-outer \" > < table > < thead > /* table columns go here */ </ thead > < tbody > /* table data goes here... */ </ tbody > </ table > </ div > This works great initially, but there can be some problems. If you have a lot of rows, as you scroll down, you can't see which table headers are associated with each cell If your table rows are selectable and you have bulk actions in the header, you won't see them as you scroll down If there is more content on the page below the table, you won't see the headers as you scroll down Sticky Headers You might think that adding position: sticky to the thead of the table would ensure that as you scroll down, the headers will remain fixed to the top of the screen until you scroll past the table. style.css .table-outer { overflow-x : auto ; } thead { position : sticky ; z-index : 2 ; top : 0 ; } But as you can see in this example , the table headers are not fixed to the top of the screen as you scroll down. Since you're now using an overflow container, position: sticky will only apply to the overflow container, and if you're not scrolling within it, it will just be ignored. Solution The solution was to add a height to the table wrapper. In this example, I chose to make the height 100% of the viewport window, minus 100px to enable the page title and footer to always be visible. This results in a full-screen datagrid type view. style.css .table-outer { overflow-x : auto ; height : calc ( 100vh - 100px ) ; /* full height minus header and footer */ } header { height : 60px ; } footer { height : 40px ; } As you can see here, the page title and footer are always visible, and the table is both horizontally and vertically scrollable. This table has fixed headers and also the first row (ID) is fixed to the left of the screen as you scroll horizontally. Conclusion And that's all! Hopefully this helps anyone that is struggling to figure out a good solution for their scrollable table. About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: October 09, 2024 Category: Technical Tags html css design javascript tables Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/keyboard-shortcut-hook-react/",
        "title": "Creating a Keyboard Shortcut Hook in React (Deep Dive) | Tania Rascia's Personal Website",
        "headings": [
            "Creating a Keyboard Shortcut Hook in React (Deep Dive)",
            "Setting Up",
            "useShortcutHook",
            "Performance Optimization",
            "Holding Onto Stale State",
            "Accessing Current State",
            "Combination Keyboard Shortcuts with Modifiers",
            "Shortcuts and Text Inputs",
            "Key Sequences",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:15.903065",
        "content": [
            "Creating a Keyboard Shortcut Hook in React (Deep Dive) | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me Creating a Keyboard Shortcut Hook in React (Deep Dive) Recently I needed to add some keyboard shortcuts to an app I was working on. I wrote up some example code and decided to write this article about it. It goes into various types of shortcuts, caching, some potential bugs and pitfalls you might encounter, and more. \ud83d\udc47 tl;dr I made a custom React hook to handle keyboard shortcuts. Demo CodeSandbox It handles: A single keypress: X A combination keypress with modifiers: \u2325 + X (Option + X) A combination keypress with multiple modifiers: \u2318 + \u21e7 + X (Command + Shift + X) A sequence of characters: \u2191 \u2191 \u2193 \u2193 \u2190 \u2192 \u2190 \u2192 B A It also makes sure: The shortcut will cache the event handler function if nothing changed (with useCallback ) The shortcut always uses the latest function value, not holding on to stale state (with useLayoutEffect ) Shortcuts won't run while you're typing in a text input , textarea , or contenteditable element (unless you want them to) You'll be able to run the hook in a component like this: useShortcut ( 'Command+Shift+X' , ( ) => console . log ( '\u00a1Hola, mundo!' ) ) I'll make a little example to show everything working in a minimalist fashion, or you can just go to the sandbox or demo and play around with it. Try any of those key combinations, including but not limited to the Konami Code ! Note : The Konami Code is an old cheat code for video games that has also been included as a secret in a lot of websites. Setting Up I don't usually like using a contrived example like count, setCount and just increasing state, but in this case we just care about making sure the shortcut is working and accessing state properly, so I decided to make it simple. Here's a simple React app with a button that increments and displays the count, and an input. App.js import { useState } from 'react' export default function App ( ) { const [ count , setCount ] = useState ( 0 ) return ( < div > < button type = \"button\" onClick = { ( ) => setCount ( ( prev ) => prev + 1 ) } > { ` Count: ${ count } ` } < / button > < button type = \"button\" onClick = { ( ) => setCount ( 0 ) } > Clear < / button > < input type = \"text\" placeholder = \"Type a shortcut key\" / > < / div > ) } The front end buttons aren't overly necessary, they just help with debugging. The input will come in handy later. useShortcut Hook We're going to want to be able to implement the useShortcut hook like this: App.js import { useState } from 'react' import { useShortcut } from './useShortcut' export default function App ( ) { const [ count , setCount ] = useState ( 0 ) useShortcut ( 'a' , ( ) => { setCount ( ( prev ) => prev + 1 ) } ) return < div > { /* ... */ } < / div > } So let's make the simplest version of the hook. You'll make a useShortcut function that takes two parameters: shortcut - the string representing a key, key combination, or key sequence (currently just a key) callback - the function that should be called when the correct key is pressed It consists of a handleKeyDown function that checks if the correct key is being pressed by comparing shortcut to event.key , and runs the passed in function if so. A useEffect adds the event listener on the keydown event, and removes it if dismounted. There's no dependency array in the useEffect , so it will always fire. useShortcut.js import { useEffect } from 'react' export const useShortcut = ( shortcut , callback ) => { const handleKeyDown = ( event ) => { // Single key shortcuts (e.g. pressing a) if ( shortcut === event . key ) { return callback ( event ) } } useEffect ( ( ) => { window . addEventListener ( 'keydown' , handleKeyDown ) return ( ) => { window . removeEventListener ( 'keydown' , handleKeyDown ) } } ) } Now if you press A , the count will increment. Performance Optimization This will work every time, because the useEffect has no dependency array, and fires on every render. This is pretty inefficient, though. If I go to the Performance Monitor in Chrome DevTools ( Command + Shfit + P in DevTools, and search for \"Performance Monitor\") I can see 20 or more event listeners being added with every time the shortcut is run. In an attempt to reduce how often this is firing, I can use useCallback on the handleKeyDown function and pass it into the useEffect array. Note : Going forward, React shouldn't require so much finagling with useCallback and useMemo , but since you won't always have the option to use the latest and greatest, it's good to know how to work with this. useShortcut.js import { useCallback , useEffect } from 'react' export const useShortcut = ( shortcut , callback ) => { const handleKeyDown = useCallback ( ( event ) => { // Single key shortcuts (e.g. pressing a) if ( shortcut === event . key ) { return callback ( event ) } } , [ ] ) useEffect ( ( ) => { window . addEventListener ( 'keydown' , handleKeyDown ) return ( ) => { window . removeEventListener ( 'keydown' , handleKeyDown ) } } , [ handleKeyDown ] ) } I've wrapped handleKeyDown in useCallback in an attempt to memoize the function, and passed that memoized function into the dependency array of the useEffect . I can see in the Performance Monitor that this only adds one event listener per keydown event now instead of 30. Holding Onto Stale State This seems good at first - the shortcut is still working, and the Performance Monitor is looking better. However, this works because the setCount function is using a callback as the value ( setCount(prev => prev + 1) ), instead of updating the value directly ( setCount(count + 1) ) ensuring the previous count value is always up to date. In the real world, we can't always guarantee that every bit of state we're working with is a setState callback. If I make a shortcut that accesses the direct state value of count and attempts to modify it, like so: useShortcut ( 'w' , ( ) => { setCount ( count + count ) } ) The W shortcut will not be guaranteed to be accessing the latest count state. You can see what happens in the below example if you press A a few times to increase the count, then press W to add count + count If you increase the count to something like 3 , you'd expect running the W shortcut to return 6 . However, what you'll end up with is 0 . That's because the initial state of count gets passed into the function, and there's nothing in the useCallback dependency array, so it never updates with the new value. Accessing Current State One way to solve this is to ensure that the function passed in is always wrapped in a useCallback . const handleW = useCallback ( ( ) => setCount ( count + count ) , [ count ] ) useShortcut ( 'w' , handleW ) Then add callback to the dependency array of handleKeyDown in useShotcut . However, I'm not a fan of that approach because it requires that the user to always remember to memoize their function and pass in any state that might update. It should be easier to less prone to potential bugs to use a hook. I discovered this interesting pattern to create a ref to hold the callback, and use useLayoutEffect to to update the ref. I've used useLayoutEffect in the past for scrolling purposes, (for example, to make sure a reload of a page always starts at the top) but this is the first time I've seen it use in this way with refs. useShortcut.js import { useRef , useLayoutEffect , useCallback , useEffect } from 'react' export const useShortcut = ( shortcut , callback ) => { const callbackRef = useRef ( callback ) useLayoutEffect ( ( ) => { callbackRef . current = callback } ) const handleKeyDown = useCallback ( ( event ) => { if ( shortcut === event . key ) { return callbackRef . current ( event ) } } , [ ] ) useEffect ( ( ) => { window . addEventListener ( 'keydown' , handleKeyDown ) return ( ) => { window . removeEventListener ( 'keydown' , handleKeyDown ) } } , [ handleKeyDown ] ) } Using that code, I can see that it uses the correct and most up to date count state without forcing the consumer of the useShortcut hook to pass the callback in with useEffect . I can also see in the Performance Monitor that it's not adding tons of event listeners the way the original code was. I'd be interested to hear more opinions on this pattern, because it does seem to add a lot of boilerplate, but it does seem to make the hook more optimized and easier to use. Now that everything is working properly for a single keypress, we can move on to adding a combination shortcuts. Combination Keyboard Shortcuts with Modifiers So far, using if (shortcut === event.key) , we can make sure the key being pressed matches the shortcut and run it accordingly. But keyboard shortcuts are usually combinations, using the modifiers at the bottom left and right of the keyboard. There are four, and they each have an event property associated with them being pressed: ^ Control - event.ctrlKey \u2325 Option or Alt - event.altKey \u2318 Command or Windows - event.metaKey \u21e7 Shift - event.shiftKey If you're pressing Shift, event.shiftKey will return true . We want to enable the use of one or multiple modifiers with a key, like so: useShortcut ( 'Control+C' , ( ) => { setCount ( count + count ) } ) useShortcut ( 'Command+Shift+X' , ( ) => { setCount ( count + count ) } ) I decided to solve this by making an Object there the string of the modifier is mapped to the modifier event. If your shortcut has a + , and any of those modifiers are pressed along with the key, run the shortcut. useShortcut.js import { useRef , useLayoutEffect , useCallback , useEffect } from 'react' export const useShortcut = ( shortcut , callback ) => { const callbackRef = useRef ( callback ) useLayoutEffect ( ( ) => { callbackRef . current = callback } ) const handleKeyDown = useCallback ( ( event ) => { const modifierMap = { Control : event . ctrlKey , Alt : event . altKey , Command : event . metaKey , Shift : event . shiftKey , } if ( shortcut . includes ( '+' ) ) { const keyArray = shortcut . split ( '+' ) // If the first key is a modifier, handle combinations if ( Object . keys ( modifierMap ) . includes ( keyArray [ 0 ] ) ) { const finalKey = keyArray . pop ( ) // Run handler if the modifier(s) + key have both been pressed if ( keyArray . every ( ( k ) => modifierMap [ k ] ) && finalKey === event . key ) { return callbackRef . current ( event ) } } } if ( shortcut === event . key ) { return callbackRef . current ( event ) } } , [ ] ) // ... } Now pressing one or more modifiers along with the key will run the shortcut. Note : There are some issues with the Alt key, which I discuss in the conclusion. Shortcuts and Text Inputs Something that will come up while creating shortcuts in the real world is deciding when and where you want them to be available. If you have a shortcut that saves the current page you're working on, maybe by pressing S , you don't want that shortcut to run while the user is typing into a text box. I've added an options property to the useShortcut hook, with a default setting of disableTextInputs: true . If the shortcut you're creating is explicitly for use while typing, you can disable it. I've disabled it for HTMLTextAreaElement , HTMLInputElement where type = text , and contenteditable elements. useShortcut.js export const useShortcut = ( shortcut , callback , options = { disableTextInputs : true } ) => { const callbackRef = useRef ( callback ) useLayoutEffect ( ( ) => { callbackRef . current = callback } ) const handleKeyDown = useCallback ( ( event ) => { const isTextInput = event . target instanceof HTMLTextAreaElement || ( event . target instanceof HTMLInputElement && ( ! event . target . type || event . target . type === 'text' ) ) || event . target . isContentEditable // Don't enable shortcuts in inputs unless explicitly declared if ( options . disableTextInputs && isTextInput ) { return event . stopPropagation ( ) } // ... } , [ ] ) // ... } There are other ways to handle this, like checking if tagName is \"INPUT\" , but I prefer ensuring it's a text-type input, because you might have a shortcut that works with other types of inputs, so I think this is a good solution. Key Sequences The last thing I want to handle is a sequence of characters, such as A + B + C all pressed in succession. For my example, I used the Konami Code, which is \"up up down down left right left right b a\" pressed in succession. const handleKonamiCode = ( ) => { /* ... */ } useShortcut ( ` ArrowUp+ArrowUp+",
            "b+a ` , handleKonamiCode ) In order to set this up, I'm going to create some state to hold onto any matching combination of keys, called keyCombo . After splitting the shortcut string by + and putting it into an array, you can just keep adding each matching key to the keyCombo array. If it's the last one in the sequence, run the callback. If it doesn't match the sequence, clear the queue. useShortcut.js import { useCallback , useRef , useLayoutEffect , useState , useEffect , } from 'react' export const useShortcut = ( shortcut , callback , options = { disableTextInputs : true } ) => { const callbackRef = useRef ( callback ) const [ keyCombo , setKeyCombo ] = useState ( [ ] ) // ... const handleKeyDown = useCallback ( ( event ) => { // ... // Handle combined modifier key shortcuts (e.g. pressing Control + D) if ( shortcut . includes ( '+' ) ) { const keyArray = shortcut . split ( '+' ) // If the first key is a modifier, handle combinations if ( Object . keys ( modifierMap ) . includes ( keyArray [ 0 ] ) ) { const finalKey = keyArray . pop ( ) // Run handler if the modifier(s) + key have both been pressed if ( keyArray . every ( ( k ) => modifierMap [ k ] ) && finalKey === event . key ) { return callbackRef . current ( event ) } } else { // If the shortcut doesn't begin with a modifier, it's a sequence if ( keyArray [ keyCombo . length ] === event . key ) { // Handle final key in the sequence if ( keyArray [ keyArray . length - 1 ] === event . key && keyCombo . length === keyArray . length - 1 ) { // Run handler if the sequence is complete, then reset it callbackRef . current ( event ) return setKeyCombo ( [ ] ) } // Add to the sequence return setKeyCombo ( ( prevCombo ) => [ ... prevCombo , event . key ] ) } if ( keyCombo . length > 0 ) { // Reset key combo if it doesn't match the sequence return setKeyCombo ( [ ] ) } } } // ... } , [ keyCombo . length ] ) // ... } , [ handleKeyDown ] ) } I also added the keyCombo length to the dependency array of handleKeyPress since the function depends on it. Pressing a combination of keys will run the shortcut now. Conclusion Here is our completed useShortcut hook: (I also added a line to ignore if event.repeat is true, meaning a key is just being held down) useShortcut.js import { useCallback , useRef , useLayoutEffect , useState , useEffect } from 'react' export const useShortcut = ( shortcut , callback , options = { disableTextInputs : true } ) => { const callbackRef = useRef ( callback ) const [ keyCombo , setKeyCombo ] = useState ( [ ] ) useLayoutEffect ( ( ) => { callbackRef . current = callback } ) const handleKeyDown = useCallback ( ( event ) => { const isTextInput = event . target instanceof HTMLTextAreaElement || ( event . target instanceof HTMLInputElement && ( ! event . target . type || event . target . type === 'text' ) ) || event . target . isContentEditable const modifierMap = { Control : event . ctrlKey , Alt : event . altKey , Command : event . metaKey , Shift : event . shiftKey , } // Cancel shortcut if key is being held down if ( event . repeat ) { return null } // Don't enable shortcuts in inputs unless explicitly declared if ( options . disableTextInputs && isTextInput ) { return event . stopPropagation ( ) } // Handle combined modifier key shortcuts (e.g. pressing Control + D) if ( shortcut . includes ( '+' ) ) { const keyArray = shortcut . split ( '+' ) // If the first key is a modifier, handle combinations if ( Object . keys ( modifierMap ) . includes ( keyArray [ 0 ] ) ) { const finalKey = keyArray . pop ( ) // Run handler if the modifier(s) + key have both been pressed if ( keyArray . every ( ( k ) => modifierMap [ k ] ) && finalKey === event . key ) { return callbackRef . current ( event ) } } else { // If the shortcut doesn't begin with a modifier, it's a sequence if ( keyArray [ keyCombo . length ] === event . key ) { // Handle final key in the sequence if ( keyArray [ keyArray . length - 1 ] === event . key && keyCombo . length === keyArray . length - 1 ) { // Run handler if the sequence is complete, then reset it callbackRef . current ( event ) return setKeyCombo ( [ ] ) } // Add to the sequence return setKeyCombo ( ( prevCombo ) => [ ... prevCombo , event . key ] ) } if ( keyCombo . length > 0 ) { // Reset key combo if it doesn't match the sequence return setKeyCombo ( [ ] ) } } } // Single key shortcuts (e.g. pressing D) if ( shortcut === event . key ) { return callbackRef . current ( event ) } } , [ keyCombo . length ] ) useEffect ( ( ) => { window . addEventListener ( 'keydown' , handleKeyDown ) return ( ) => { window . removeEventListener ( 'keydown' , handleKeyDown ) } } , [ handleKeyDown ] ) } Once again, you can play around with the demo or the sandbox . There is still more that can be done here - for example, handling an Alt key can be tricky becuause pressing Alt + C will actually produce \"\u00e7\" (not \"C\") as both the output and event.key value. Some overlapping shortcuts on the same page might have issues. Overall, this should give you a good idea of how to work with a custom hook, avoid bugs (like holding onto stale state), improve caching (with useCallback ) and set up various types of keyboard events. Thanks for reading! I'd be happy to hear any additional thoughts about shortcuts and hooks you might have. About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: October 19, 2024 Category: Technical Tags javascript react hooks caching tutorial Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/setting-up-a-brand-new-mac-for-development/",
        "title": "How to Set up a Mac for Development | Tania Rascia's Personal Website",
        "headings": [
            "How to Set up a Mac for Development",
            "Getting Started",
            "Homebrew",
            "Install Apps",
            "Shell",
            "Shortcuts",
            "Node.js",
            "Install",
            "Update",
            "Change version",
            "Git",
            "SSH",
            "Generate SSH key",
            "Config",
            "macOS Settings",
            "Sidebar",
            "General",
            "Dock",
            "Keyboard",
            "Security and Privacy",
            "Sharing",
            "Users & Groups",
            "Defaults",
            "Application Settings",
            "Chrome",
            "Visual Studio Code",
            "Rectangle",
            "iTerm2",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:16.180427",
        "content": [
            "How to Set up a Mac for Development | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me How to Set up a Mac for Development Last Updated: 10/6/2024 I have to set up a MacBook Pro fairly often - when starting a new job and when buying a new personal computer. I created this article back in 2015 when I got my first Mac and have been updating it ever since with whatever I need as my job evolves. I'm primarily a full-stack web developer, so most of my needs will revolve around JavaScript/Node.js. Currently, this article has been updated to work for macOS 15 Sequoia. Getting Started The setup assistant will launch once you turn the computer on. Enter your language, time zone, Apple ID, and so on. The first thing you should do is update macOS to get the latest security updates and patches. Install apps via Homebrew Shell setup with zsh Set up Node via nvm Set up git config Set up SSH keys and config macOS settings Application settings Homebrew Install the Homebrew package manager. This will allow you to install almost any app from the command line. /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ) \" Make sure everything is up to date. brew update Install Apps Here are a few shell programs I always use: Shell Program Purpose git Version control Here are some the applications I always install (GUI apps use the --cask flag in Homebrew): Do not install Node.js through Homebrew. Use nvm (below). Application Purpose Visual Studio Code text editor Google Chrome web browser Firefox web browser Rectangle window resizing iTerm2 terminal Docker development Discord communication Slack communication Spotify music Postgres database Postman API tool Obsidian Notes Todoist Todos App installation ## Shell Programs brew install git # GUI programs brew install --cask \\ visual-studio-code \\ google-chrome \\ firefox \\ rectangle \\ iterm2 \\ docker \\ discord \\ slack \\ spotify \\ postgres \\ obsidian \\ todoist \\ Shell Catalina comes with zsh as the default shell. Install Oh My Zsh for sensible defaults. sh -c \" $( curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh ) \" Shortcuts You can add shortcuts to your shell by going to ~/.zshrc and using the alias keyword. Using an M1 Mac, you might at some point need to switch between the Apple Silicon (ARM64) and AMD64 architecture. You can add these aliases to switch between them easily. alias x86 = \"env /usr/bin/arch -x86_64 /bin/zsh --login\" alias arm = \"env /usr/bin/arch -arm64 /bin/zsh --login\" Run uname -m to see arm64 or x86_64 to see the hardware that is currently running. Node.js Use Node Version Manager (nvm) to install Node.js. This allows you to easily switch between Node versions, which is essential. curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash Install Install the latest version. nvm install node Restart terminal and run the final command. nvm use node Confirm that you are using the latest version of Node and npm. node -v npm -v Update For later, here's how to update nvm. nvm install node --reinstall-packages-from = node Change version Here's how to switch to another version and use it. nvm install xx.xx nvm use xx.xx And to set the default: nvm alias default xx.xx Git The first thing you should do with Git is set your global configuration . touch ~/.gitconfig Input your config and create some aliases. .gitconfig [ user ] name = Your Name",
            "IdentityFile ~/.ssh/key.pem Now just run the alias to connect. ssh myssh macOS Settings I don't like a lot of the Apple defaults so here are the things I always change. Sidebar To get the Home folder in the finder, press CMD + SHIFT + H and drag the home folder to the sidebar. General Make Google Chrome default browser Dock Automatically hide and show Dock Show indicators for open applications Keyboard Key Repeat -> Fast Delay Until Repeat -> Short Disable \"Correct spelling automatically\" Disable \"Capitalize words automatically\" Disable \"Add period with double-space\" Disable \"Use smart quotes and dashes\" Security and Privacy Allow apps downloaded from App Store and identified developers Turn FileVault On (makes sure SSD is securely encrypted) Sharing Change computer name Make sure all file sharing is disabled Users & Groups Add \"Rectangle\" to Login items Defaults A few more commands to change some defaults. # Show Library folder chflags nohidden ~/Library # Show hidden files defaults write com.apple.finder AppleShowAllFiles YES # Show path bar defaults write com.apple.finder ShowPathbar -bool true # Show status bar defaults write com.apple.finder ShowStatusBar -bool true # Prevent left and right swipe through history in Chrome defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool false Application Settings Chrome Install uBlock Origin Install React DevTools Install Redux DevTools Install Duplicate Tab Shortcut Settings -> Set theme to \"Dark\" Visual Studio Code Press CMD + SHIFT + P and click \"Install code command in PATH\". Now you can use code {file} to open any file in VSCode. View Dotfiles for keyboard shortcuts and settings Extensions Install New Moon Theme Install GitLens Install Highlight Matching Tag Install ESLint Install Prettier Install Jest Install Jest Runner Rectangle Full Screen: CMD + SHIFT + ' (prevents messing with other commands) Left Half: CMD + OPTION + LEFT Right Half: CMD + OPTION + RIGHT iTerm2 For some reason, iTerm2 does not let you use \u2325 + \u2190 and \u2192 to tab through words in the terminal by default. I found this article to fix it: Use \u2325\u2190 and \u2325\u2192 to jump forwards / backwards Go to Profiles -> Keys: Change \u2325\u2190 via \"Send Escape Sequence\" with b Change \u2325\u2192 via \"Send Escape Sequence\" with f Conclusion That sums it up for my current preferences on setting up a MacBook Pro. I hope it helped speed up your process or gave you ideas for the next time you're setting one up. About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: February 17, 2020 Category: Technical Tags macOS reference Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/overview-of-css-concepts/",
        "title": "A Complete Guide to CSS Concepts and Fundamentals | Tania Rascia's Personal Website",
        "headings": [
            "A Complete Guide to CSS Concepts and Fundamentals",
            "HTML Fundamentals",
            "HTML Reference",
            "CSS Fundamentals",
            "CSS Syntax",
            "CSS Selectors",
            "CSS and JavaScript",
            "A space means something",
            "Selector Reference",
            "CSS Specificity",
            "Order",
            "Calculating specificity",
            "Important!",
            "Specificity hierarchy",
            "CSS Properties",
            "Spacing Out: Padding and Margins",
            "Padding vs. margin",
            "Box Model",
            "Border box vs. content box?",
            "Shorthand Properties",
            "Layouts: Display",
            "Display Reference",
            "Layouts: Positioning",
            "Normal flow",
            "Static",
            "Fixed",
            "Absolute and relative",
            "Positioning Reference",
            "Layouts: Flex",
            "History lesson",
            "Creating a flex container",
            "Alignment: create a navigation bar with flex",
            "Flex Container Reference",
            "Wrapping: Create a repeating grid",
            "Flex Property Reference",
            "Responsive: Media Queries",
            "Other Considerations",
            "When should I style ids, classes, or tags?",
            "What should I use for font size - px vs. em vs. rem?",
            "What about Sass? Or LESS?",
            "What about prefixes?",
            "What about CSS grid?",
            "BEM, OOCSS, SMACSS...how should I structure my CSS?",
            "What else?",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:16.336859",
        "content": [
            "A Complete Guide to CSS Concepts and Fundamentals | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me A Complete Guide to CSS Concepts and Fundamentals Speaking CSS is like speaking English, or any other spoken language - there are many words, but you only end up using a small subset of them on a daily basis. Just like reading a dictionary isn't an efficient way to learn a language, looking at a big list of properties isn't helpful to learn CSS. Some people think CSS is really hard and it's too much of a hassle to learn. Some people think that since it's not a programming language ( or is it? ), it's so easy that you don't even have to bother learning it. Ultimately, there's a lot to CSS, but it doesn't have to be overwhelming. If you learn a few key concepts, you should feel confident looking at or thinking of any design and turning it into reality. I'm going to go over some of the parts of CSS that are important on a daily basis, and give some of tips and tricks I've come to learn over the years. If you just want some hints on how to make your design look pretty or consistent, check out Design for Developers . I also think Web Design in 4 Minutes by Jeremy Thomas has an excellent, interactive introduction to the concepts of web design. Who is this article for? If you're a seasoned front end developer who already knows everything about CSS, please close this tab immediately and run as fast as you can to the nearest exit. If you've never heard of or used CSS before and don't know how to load CSS into an HTML page, this resource is also not for you. This article is for the middleground of people who have had to touch CSS a few times here and there but ultimately don't feel like they know what they're doing, or struggle with making basic layouts. Topics covered HTML 101 HTML Fundamentals CSS 101 CSS Syntax CSS Selectors CSS Specificity CSS Properties Working with CSS Spacing Out padding , margin , border Box Model content-box vs. border-box Shorthand Properties Layouts: Display inline , inline-block , block Layouts: Positioning static , fixed , absolute , relative Layouts: Flex flex containers ( flex display), flex items ( flex property) Responsive: Media Queries min-width , max-width Other Considerations HTML Fundamentals Just as a recap, we'll be talking about how CSS applies to HTML a lot, so make sure you're familiar with what everything is referring to in HTML. Tag - element name ( example: a ) Attribute - HTML modifiers ( example: href ) Value - value applied to an attribute ( example: http://tania.dev ) Element - everything within the HTML tag - attributes, values, and content. Example: < tag attribute = \" value \" > element contents </ tag > A real example: < a href = \" http://tania.dev \" > Tania's WebRing </ a > This will link to my awesome WebRing. HTML Reference Syntax Example Tag a , img , h1 Attribute href , src , alt Value http://tania.dev , avatar.png , Some alt text Element <img src=\"avatar.png\"> Now we can move on to CSS. CSS Fundamentals I'm just going to go over some of the basics of CSS - syntax, selectors, and specificity. CSS Syntax There are three main parts of CSS - selectors, properties, and values. Selectors - the element(s) being selected Properties - the aspect of the element being styled Values - the style being applied Example: selector { property : value ; } A real example: h1 { color : blue ; } This will make all h1 elements blue. CSS Selectors From least specific to most specific (more about that below), here are the main types of selectors: Universal selector - selects all elements Type selector - targets element(s) by HTML tag (includes pseudo elements ) Class selector , Attribute selector - targets element(s) by class or attribute, respectively (includes pseudo classes ) ID selector - targets an element by id * { /* Universal selector */ } tag { /* Type selector */ } tag::before { /* Type selector (psuedo element) */ } .class { /* Class selector */ } .class:hover { /* Class selector (pseudo class) */ } [attr] { /* Attribute selector */ } #id { /* ID selector */ } Pseudo elements have two colons ( :: , or ::before ) and pseudo classes have one colon ( : , or :hover ). CSS and JavaScript Note that even if you don't care much about CSS, learning about selectors will help you write (vanilla) JavaScript, as the DOM selectors in a JavaScript document query are the same. This query to get all elements that match a selector: .js document . querySelectorAll ( 'article h2' ) Targets all the same elements as this CSS to style all elements that match a selector: .css article h2 { } Note : All selectors may target one or more elements except IDs, which can only apply to a single element. A space means something Do you know the difference between these two? .foo.bar .foo .bar The first one targets a foo and bar on the same element. .foo.bar example .foo.bar { /* without a space */ } < div class = \" foo bar \" > I'm targeted </ div > The second one targets a bar that is a descendent of a foo . .foo .bar example .foo .bar { /* with a space */ } < div class = \" foo \" > < div class = \" bar \" > I'm targeted </ div > </ div > There are other selectors that can be used instead of a space to modify the selector, such as > , + , and ~ . These all have different meanings. They are not used incredibly often so you can learn them as needed. Selector Reference Selector Targets Example Universal selector All elements * Type selector Tags, pseudo elements h1 , div , li::before Class selector Classes, pseudo classes .page-header , .page-content , .list-item:hover Attribute selector Attributes [alt] , [type=\"text\"] , [lang=\"en\"] ID selector IDs #toggle , #getting-started , #about CSS Specificity What does \"specificity\" mean in CSS? Order First, all things being equal, the order in which you use two selectors in the stylesheet matters. So if we have a stylesheet with two classes: Comparing two selectors weighted equally .foo { color : blue ; } .bar { color : red ; } and you have both of those classes on the same element: An example of one element using both selectors < div class = \" foo bar \" > What color am I? </ div > ...then the one closest to the bottom wins. So in this case, the element's color is red, because .bar appears closest to the bottom of the stylesheet. Calculating specificity CSS uses a number scale to determine specificity. You can also use this specificity calculator to see how specific an element is. As we know, there are three sections: ID , Class , and Type . In the scale, all are represented by 0 initially. ID Class Type 0 0 0 Any time your selector contains one of the selectors, you'll increase that bucket by 1. Add a type selector. Only a type selector h1 { /* 001 */ } ID Class Type 0 0 1 Add a class selector. Type selector plus class selector .container h1 { /* 011 */ } ID Class Type 0 1 1 Add an ID selector. Type, class, and ID selector #landing-page .container h1 { /* 111 */ } ID Class Type 1 1 1 You can think of this scale exactly the same as a base-10 number system. If just a tag is 1 (one), and a class and type is 11 (eleven), and an id, class, and tag is 111 (one-hundred and one), which one is the biggest? In this case, 111 is the biggest and therefore the most specific. If you had more than 10 elements in a given bucket, like 1 id, 15 classes, and 30 types, this analogy doesn't work, but you could relate it to semantic numbering systems as well - it would be 1.15.30 . However, if you're using that many selectors, something has most likely gone horribly wrong. This means a class is an order of magnitude more specific than a type, and an id is an order of magnitude more specific than a class. In other words, if you had two ids and 0 classes vs. 1 id and 20 classes, the two ids would win. For example: This selector is more specific: ( 200 , or two-hundred) Two ID selectors #landing-page #about-section { /* 200 */ } ID Class Type 2 0 0 This selector is less specific: ( 140 , or one-hundred forty) An ID selector and many class selectors #landing-page .foo.bar.baz.box { /* 140 */ } ID Class Type 1 4 0 Inline styles An inline style is stronger than any combination of id, class, or type. Inline styles on an element < div style = \" color : red ; \" > I'm red! No selector can override me! </ div > Important! Except an !important keyword on a property can override even that... Important keyword overriding inline styles on an element div { color : blue !important ; } < div style = \" color : red ; \" > I've been overridden! I'm blue now! </ div > Please, make very, very sparing use of !important . It becomes really hard to override. !important should only be used when absolutely necessary, like styling some third party you have no control over that is using inline styles, and in a few cases with JavaScript toggling display. To summarize, each level of hierarchy from type to !important is an order of magnitude stronger than the previous one. While !important is the strongest specificity modifier, an !important can be overridden by another !important that is otherwise higher (for example, !important + ID is stronger than !important plus class). Specificity hierarchy From least specific to most specific: Selector Example Specificity Type selector h1 0 0 0 1 Class, attribute selectors .class , [type=\"text\"] 0 0 1 0 ID selector #contact 0 1 0 0 Inline style <div style=\"background: purple\"> 1 0 0 0 !important keyword div { color: green !important } Overrides all CSS Properties Here's a list of all properties that I think are absolutely essential to knowing CSS. The equivalent of knowing the most basic verbs and nouns in English that you can get by with. The minimum to be able to do anything: padding , margin , border background color , font-family , font-weight , font-size , line-height width , height , max-width , max-height Layout essentials: position , z-index , top , right , bottom , left display , flex , align-items , justify-content @media Good to know, but not quite as essential as the rest: grid , grid-template-columns , grid-template-rows transform , transition We'll go into these more in a moment. Now we should have enough of the basics down to discuss some applications of the knowledge. Spacing Out: Padding and Margins All of your spacing needs will be covered by two properties: padding and margin . Padding is used to pad the inside of an element ( inside of the border ) Margin is used to separate elements ( outside of the border ) In Developer Tools, content is represented by blue, padding is represented by green and margins are represented by orange. The order of nesting for an element is as follows: Element content -> padding -> border -> margin So if I were to make an element that was a square with padding and margins, it would look like this: .square { border : 1px solid gray ; padding : 10px ; margin : 10px ; height : 50px ; width : 50px ; } A few important notes: Margin is always transparent; padding can have a background color Margins collapse into each other; padding stacks on top of each other Margin can have negative values; padding cannot have negative values Padding adds to the area of an element that can be clicked; margin does not Padding (and border) add to the total size of an element; margin does not What this means is that margins overlap each other, and padding never will. This comes up a lot in formatting of headings and paragraphs, for example. Using an example of an h2 with a 10px bottom margin and a p with a 10px top margin, how much of a margin will separate the two elements? < h2 style = \" margin-bottom : 10px ; \" > Heading </ h2 > < p style = \" margin-top : 10px ; \" > Paragraph </ p > We'll see that there is a total 10px margin between them, not 20px . To use a real example, in this example MVC todo app I made, each todo item is padded, and they're separated from each other by margins. Padding vs. margin Trait Margin Padding Background color Always transparent Set by element Collapse or stack Collapse Stack Negative values Allowed Not allowed Clickable No Yes Box Model Box-sizing ! It means one thing: do padding and borders count as part of the element's size, or not? Border box says yes! Borders and padding are part of an element's size! Content box says no! Borders and padding are not part of an element's size! My recommendation? Set box-sizing to border-box on everything ( * ). Always. Don't even think about it! On the rare occasion something needs to be content-box , you can override it. This is one of the few things IE got right - making border-box the default while the rest of the browsers use content-box as the default. Border box vs. content box? Let's use our square example above. With content-box applied, the element's total size is 72px * 72px : Content box 50px for content",
            "= 50px square If you're giving an element a height and width of 50px each, would you prefer the element to be 50px or 72px ? The most likely answer is that you want the height and width to match the size of the element. This will become very important when creating layouts, especially flex/grids that are set by percent. You can apply border-box to all elements like this: * { box-sizing : border-box ; } (Or this way if you have a specific need for content-box somewhere.) Shorthand Properties You see me use padding: 5px and margin: 5px . The padding property, for example, is actually a shorthand for four individual properties: /* Shorthand property */ div { padding : 5px ; } /* Individual properties */ div { padding-top : 5px ; padding-right : 5px ; padding-bottom : 5px ; padding-left : 5px ; } Usually, you won't have to declare each side separately. In design, we like symmetry, so if you ever end up with a different value for all four sides, something has probably gone quite wrong and you might want to rethink your strategy. one value applies to all four sides ( padding: 5px ) two values apply to vertical (top and bottom) and horizontal (left and right) respectively ( padding: 10px 0 ) four values are applied clockwise from top to left ( padding: 1px 2px 3px 4px ) This applies to both padding and margin . The most common usage of an individual side property is when you're overriding something. For example, an element exists with padding: 5px , and you want it to have a different padding bottom value. The next most common shorthand applies to border . You will most commonly see border written like this: div { border : border-width border-style border-color ; } These can be written out individually as well. div { border : 1px solid black ; } /* Can also be written individually */ div { border-color : black ; border-width : 1px ; border-style : solid ; } And just like padding and margin , each of these border modifiers has its own side property. div { border-bottom-color : green ; border-bottom-width : 2px ; border-bottom-style : dashed ; } So actually when you write border: 1px solid black you're writing shorthand for 12 properties combined. Layouts: Display There are many display properties ( see this list ), but I think the most used and important to know are block , inline , inline-block , flex and none . Most elements by default are block , inline , or inline-block . The default block element is a div , and the default inline element is a span . Examples of default elements: Inline : span , strong , em , img Inline-block : button , select , (Chrome only: textarea , input ) Block : div , p , nav , section There a few other obvious, specific ones, such as table elements having the table display, and li having the list-item display, but you will rarely decide to make some other element have that display type. Inline Inline elements are usually text formatting based: b or strong , which make text bold, or i and em which make text italic. They are on the same line - they do not create a new line. Inline elements are usually nested within block elements. Horizontal and vertical padding and margins are applied as expected, but vertical margins are not applied at all, and vertical padding is ignored by other elements. Inline element behavior content content... < span > span </ span > ..content content span { /* inline by default */ padding : 15px ; margin : 15px ; } To be safe, inline elements should only be used for text formatting. Inline block Inline-block elements are like inline elements, except they can have vertical and horizontal padding and margins. They also appear next to each other horizontally by default, and do not stack on new lines. span { display : inline-block ; padding : 15px ; margin : 15px ; } Block Block elements span the full width of their containing element, and stack on top of each other in new lines of the document. Block element behavior content content... < div > div </ div > ..content content None An element with none applied will not appear in the document at all. This is most commonly used for hiding/displaying content for mobile. Display Reference Display Behavior inline used primarily for text formatting, appear next to each other horizontally inline-block appear next to each other horizontally with vertical padding and margins applied block spans the full width of the container, stack vertically none does not appear in the document Layouts: Positioning The position property, while important, is not what you should be using for the majority of layout related decisions. Changing position from it's default value ( static ) should be reserved for a few specific situations. There are three that are mainly used: fixed , absolute , and relative . A positioned element is affected by top , left , right , bottom and z-index . Normal flow If you do not modify the position of any element, everything pertains to the Normal flow of the document. All this means is that: block level elements will take up the full width of their container , and the height of their content block level elements will stack on top of each other vertically, from top to bottom inline elements are as tall and wide as their content all elements are aware of each other, and margins will collapse Static The default state of position is static . It means your element stays in the normal flow of the document. If you have three static div s next to each other, they will all be aware of each other and stack on top of each other. < div > div </ div > < div > div </ div > < div > div </ div > div { border : 1px solid black ; padding : 15px ; margin : 15px ; } static elements are not positioned, and therefore not affected by top , left , right , bottom , or z-index . Note : Just because elements have a static position does not always mean they will stack each other vertically. The display property might modify this, with inline-block , grid , or flex , but they will still be part of the regular document flow and other elements will be aware of them. Fixed A fixed element is the easiest position to understand: it is always visible and positioned according to the viewport. A few common uses of fixed positioning: a stick-to-top navigation bar a back to top button in the bottom right of the screen a popup modal that is in the center of the viewport nav { position : fixed ; } A few things to know about fixed elements: their position on the screen is determined by top , left , right , and bottom properties. top: 0 means it will stick to the top of the viewport, and top: 10px means it will be 10px from the top of the viewport other elements are not aware of the existence of a fixed element. This generally means you must account for the space they would occupy by adding margins to the elements around them. fixed elements are no longer part of the flow and do not have a containing element, and therefore do not expand to fill their container like a normal (block) element would. This means if all we do is set our nav to fixed with no other properties, it will not expand the full width of the viewport. < nav > nav </ nav > < div > div </ div > < div > div </ div > div { border : 1px solid black ; padding : 15px ; margin : 15px ; background : white ; } nav { position : fixed ; background : gray ; } So we can update it to be full width, and stick to the top and left of the viewport: nav { position : fixed ; top : 0 ; left : 0 ; padding : 20px ; width : 100% ; background : gray ; z-index : 2 ; } We're adding the z-index property, which affects the z-axis of the element. Since we intend this element to always be completely visible, we give it a z-index greater than 0 to ensure it's always \"above\" any element in our document. As we can see, there's one last issue, which is that the nav is overlapping the content. As mentioned previously, you must add space (margins) to static elements to make space for the fixed element. Simply adding a margin-bottom to the nav won't have any effect. < nav > nav </ nav > < section > < div > div </ div > < div > div </ div > </ section > section { margin-top : 80px ; } So now we have that all taken care of and fixed positioning should make sense. Absolute and relative absolute and relative positions go hand in hand. Take everything you just learned about fixed elements and apply them to absolute elements. They behave almost exactly the same: other elements don't know about absolute elements, they're affected by the directional properties and z-index . The difference is instead of being positioned relative to the viewport (browser window), they're positioned relative to the nearest element that is not static - so a fixed , absolute , or relative element. relative elements, on the other hand, behave almost exactly the same as a static element - they are part of the document flow, and simply setting relative to an element will not change its appearance at all. The difference is a relative element can use the directional properties - top , left , right , and bottom . However, the most common usage of relative and absolute is that a relative element is treated as static , but as an anchor point for some other absolute element. I'll make an example with a section (red) that has a nested div (blue). < section > section < div > div </ div > </ section > With no positioning applied, the div is contained inside of the section . Now imagine I have a bunch of card elements that are always 100px tall, regardless of the content contained within, and I want a button to always exist at the same spot on the bottom right. Using relative and absolute , the div will always be in the same spot on any card. section { position : relative ; height : 100px ; } div { position : absolute ; bottom : 15px ; right : 15px ; } To summarize, use relative when you want something else to be anchored to an element but you don't want that element itself to move or be affected at all, and use absolute on the element to be anchored. A common usage of this is card-like elements. This card element is an example of absolute coming in handy to make sure they're always the same size but the buttons line up. Positioning Reference Position Behavior In Document Flow static default behavior; elements stack in order and are aware of each other Yes relative positioned relative to its original position in the flow Yes fixed positioned relative to the viewport No absolute positioned relative to closest non-static ( fixed , relative , absolute ) element No Layouts: Flex The block , inline-block , and inline display types all apply to the element itself. Flexbox is different, because it applies to elements nested within the one that has display: flex . There are many resources that go deep into Flexbox and everything it's capable of, but I'm just going to tell you the basic stuff you can always do to easily make layouts. History lesson In the beginning, HTML documents were basically the same as MS Word documents: you had headings, paragraphs, and the occasional image. People started wanting more advanced layouts, so they began using tables to create their layouts. Since the purpose of tables was (and is) only to display tabular data, the HTML people wrote to create layouts became messier and messier. Eventually, someone discovered that they could use the float property to move things to the left and right of the page, instead of tables. This made the markup a little cleaner and easier to understand, but again, this was another attempt to mutate something for a purpose it was never designed to do. CSS floats were (and are) for \"floating\" images in an article to the left or right (like you might see in a magazine), not for creating a layout. Nonetheless, for years we were stuck with the float property to create some semblance of a unique layout without using tables. Now we have Flexbox and CSS grid for creating layouts, and we basically never have to touch float except for its rare, actual purpose. This doesn't apply if you have to support older versions of Internet Explorer, but if you do, there are more than enough resources to understand how floats were used during this time. Creating a flex container We already know that a bunch of default block elements will stack each other: Stacked elements < section > < div > div </ div > < div > div </ div > < div > div </ div > </ section > So how do we get elements to be side-by-side? We can make the outer container a flex container. Elements in a default flex container < section class = \" flex-container \" > < div > div </ div > < div > div </ div > < div > div </ div > </ section > .flex-container { display : flex ; } And just like that, all the inner elements are now stacked horizontally in a row. By default, a flex container is set to flex-direction: row . Note that only the first layer of elements will be flex items - elements nested further within them will behave normally. You can also update it to flex-direction: column and the items will be stacked vertically, as they were originally. Here are a few cool things flex can do: vertically align elements with ease space items apart or group them together easily create repeating grids Alignment: create a navigation bar with flex Let's make a practical example to demonstrate some of what flex is capable of: a navigation bar. Here's what we want it to look like: brand name to the left nav links to the right all items vertically centered navbar.html < nav > < div > Brand name </ div > < div > < a href = \" #! \" > About </ a > < a href = \" #! \" > Contact </ a > </ div > </ nav > navbar.css nav { background : blue ; height : 80px ; } Without any regard to layout applied, here's how it looks. We'll make the navbar flex, so the brand name and nav links will be horizontal. nav { display : flex ; } Now we want everything to be vertically aligned. With align-items: center , we can vertically align items within a flex container. nav { display : flex ; align-items : center ; } Now we want the brand and links to be on opposite ends of the navbar. With justify-content: space-between , we can tell the items in the flex container to be spaced apart as far as possible. nav { display : flex ; align-items : center ; justify-content : space-between ; } Then just add a little padding and you have an acceptable navbar. I believe without knowing anything else about flex, you can get pretty far with just those properties. When thinking about any of the other values that can be applied to flex alignment, just think about the navigation bar. The brand and group of links are two items in a flex row. align-items refers to the vertical alignment : flex-start would be the top, flex-end would be the bottom, and center is vertically aligned. justify-content refers to the horizontal spacing : start would be all items to the left, end would be all items to the right, center is everything in the middle, and space-between is everything equally spaced apart. Note : Flex is also capable of reversing rows and columns. In addition to flex-direction: row , and flex-direction: column , there is also row-reverse and column-reverse . This would reverse the expectation of align-items and justify-content as well. For example, justify-content: start would be on the right of a row-reverse flex container. Further reading : Flexbox Froggy is a game for learning and practicing Flexbox that might come in handy. Flex Container Reference Property Values flex-direction row , column , row-reverse , column-reverse flex-wrap wrap , nowrap align-items flex-start , flex-end , center , stretch , baseline justify-content start , center , end , space-between , space-around , space-evenly Wrapping: Create a repeating grid Often, you might have a bunch of cards or images in a gallery that should be in a repeating grid. By default, with a flex container, the horizontal items will continue forever horizontally. < section class = \" flex-container \" > < div > div </ div > < div > div </ div > ... </ section > .flex-container { display : flex ; } We can make the grid repeat onto as many lines as necessary with flex-wrap . .flex-container { display : flex ; flex-wrap : wrap ; } This is great. But wait...it only works when the elements have no content. What if I fill them with a lot of text? Now this seems pretty useless. But with a tiny bit of flex magic, we can transform it back to a grid: div { flex : 1 ; } So what does flex: 1 do? It tells all flex items in a container, if they all have it applied, to automatically have an equal height and width. flex is another shorthand for three properties: flex-grow , flex-shrink , and flex-basis . .element { flex : 1 ; } /* is the same as */ .element { flex-grow : 1 ; flex-shrink : 1 ; flex-basis : 0% ; } /* flex shorthand */ .element { flex : flex-grow flex-shrink flex-basis ; } Two flex elements set to flex: 1 will both be 50% of the width of the container. Three will both be 33.3333% of the width of the container, and so on. But this is still kind of random. Keep adding more divs, and once it decides that no more can fit, and to wrap to the next line (if flex-wrap is set). Then the element that gets wrapped will now take up 100% of the row. What if you always want each element to take up 1/3 of the available horizontal space, regardless of how many flex items there are and what content they contain? You can set the flex-basis only, to the width you desire. div { flex : 0 0 33.3333% ; } Remember the Box Model, from earlier? If you have any padding on your flex items, you must have box-sizing: border-box for the percentage to be calculated correctly. If that's taken care of, it will correctly calculate each flex item to the proper 33.33333% width of the screen. But there is one more consideration - if you want gutters in your grid, you'll use margins to separate each item. Since the margins are calculated separately, you'll need to subtract the outer margins from the flex-basis . In this example, there's an extra 10px margin on both sides, so we'll subtract 20px . div { padding : 15px ; margin : 10px ; flex : 0 0 calc ( 33.3333% - 20px ) ; } You can easily make simple grids by either setting the flex-basis (setting one to 25% and one to 75%, for example) or with varying flex-grow / flex-shrink combinations ( flex: 1 on one element and flex: 2 on another element would result in a 33.3-% / 66.6-% split, respectively). Flex Property Reference Property Description flex-grow Determines how much a flex item should grow if there's space available flex-shrink Determines how much a flex item should shrink if there's not space available flex-basis Defines initial size of flex item Finally, there is also an order property, in which you can rearrange the order of flex items. Responsive: Media Queries Use media queries to make your websites responsive, or adaptive to multiple screen sizes. With media queries, you tell CSS to only apply on screen sizes below a certain width (with max-width queries) or above a certain width (with min-width queries). @media screen and ( min-width : 800px ) { /* applies styles to any device screen sizes above 800px wide */ } @media screen and ( max-width : 800px ) { /* applies styles to any device screen sizes below 800px wide */ } If you've ever heard the term mobile-first , this refers to building a website for mobile first, and creating min-width media queries as necessary as the screen sizes go up. /* Mobile first styles go here */ @media screen and ( min-width : 800px ) { /* Desktop styles go here */ } It is much easier to design a website mobile-first and scale up as needed, than trying to take a website that is only optimized for desktop and making it mobile-friendly with min-width media queries. If you're doing it from scratch, I would recommend starting mobile first and using min-width queries, but if you have to quickly make a desktop site work for mobile, it's easier and faster to add max-width queries here and there as needed. All CSS frameworks deal with these different queries, or responsive breakpoints, slightly differently. If we look at Bootstrap's responsive breakpoints , we can see they have five breakpoints, from extra small to extra large. Personally, I find that having one breakpoint (no breakpoint for mobile, and one for desktop) or two breakpoints (no breakpoint for mobile, one for tablet, and one for desktop) takes care of most of my responsive needs. Note that @media can be nested within a selector. In this example, an h1 has font size of 28px by default, but 32px on larger screen sizes. h1 { font-size : 28px ; @media screen and ( min-width : 800px ) { font-size : 32px ; } } Other Considerations This article is getting incredibly long, and there's still plenty I haven't covered. Here's a few quick answers and additional resources to the holes in my attempt to cover everything at once. To get an idea of how I generally like to style my CSS, take a look at Primitive CSS , the CSS/Sass framework I designed a few years ago, which contains a clean Sass setup and sensible defaults. Creating your own CSS framework and grid is a fun, challenging way to really learn CSS, and I highly recommend it! When should I style ids, classes, or tags? My rules are as follows: IDs are exclusively used for JavaScript purposes. To easily target an individual element with JavaScript, you can use an ID, and know that it has no affect on the style. If you wish, you could also \"scope\" sections of content by nesting everything in an ID, though I don't personally do that. For tags, never style elements like main , article , div , section , aside , etc. You should always feel secure that these elements will be unstyled and only denote the type of content they contain. If you wish to add styling to them, create classes like .container . I usually give some default styling to h1 through h5 , p , ul , ol , li , a , and table . For most other styling, I use classes. Try to make classes \"semantic\" by describing what they are, not what they do. For example, having a class called .app-sidebar would be acceptable, but having .bg-white , .blue-border , .large-text ultimately becomes difficult to maintain. (A few helper classes, such as the Bootstrap spacing utilities can come in handy). Further reading : The Difference Between ID and Class What should I use for font size - px vs. em vs. rem? I use pixels ( px ) on borders, and rem on all font sizes, padding, and margins. I don't use em at all, as using it has more possible unintended consequences on nested elements (although I used px on all examples throughout this resource for simplicity and familiarity). Further reading : Responsive Typography: rem, em, and px , Comprehensive Guide: When to Use Em vs Rem What about Sass? Or LESS? I prefer to use Sass for all CSS preprocessing, much like the popular CSS framework, Bootstrap . It also works fantastically out-of-the-box with the JavaScript framework, Vue . LESS is generally less popular and I don't prefer it, but Ant Design and Semantic UI do. You can also use tools like PostCSS to compile the latest CSS to something most browsers can understand (much like Babel with ES6). Further reading : Learn Sass Now: A Guide to Installing and Understanding Sass What about prefixes? Browsers have been known to have inconsistencies with each other regarding CSS, and you might see -webkit , -moz , -ms , and -o prefixes for various properties that might not work on all browsers, or may have been experimental in some earlier browsers, like so: .flex { display : -webkit-box ; display : -moz-box ; display : -ms-flexbox ; display : -webkit-flex ; display : flex ; } Use something like Autoprefixer with Webpack , Gulp or Grunt , whatever you may be using for bundling or task running. You should never have to write out or remember prefixes. What about CSS grid? I'll be honest, almost every time I create something in CSS grid, I end up converting it to Flexbox because I find it easier to work with and more intuitive. I didn't cover grid in this article because it's too big of a subject to just tack on at the end. See the further reading for many examples you can play around with. Further reading : Grid by Example - the examples BEM, OOCSS, SMACSS...how should I structure my CSS? A lot of people have come up with a lot of solutions on how to structure your CSS - BEM , OOCSS , SMACSS ...BEM (Block-Element-Modifier) seems to be one of the more popular and prevailing. I personally prefer not to use any of these in specific (and I don't like using underlines in CSS at all). What else? Use numbers (as percents) on line-height . I prefer line-height: 1.2 for headings, and line-height: 1.6 for font (using the Golden Ratio ). You can use the pseudo class/function :not() to target every element that doesn't match what you input. Here's a useful one for ensuring all headings, except for the first one in a section, have some extra spacing. h1:not(:first-child),",
            "h3:not(:first-child) { margin-top : 2.5rem ; } Always have a .container element handy, that looks something like this ( max-width and padding can be changed up to whatever you want). .container { max-width : 1200px ; padding : 0 15px ; margin-left : auto ; margin-right : auto ; } This will make your content pretty responsive by default. You'll have padding around the content on mobile, and the content won't expand too far on desktop screens, and will be horizontally centered (this is what happens when auto is applied to both margins). Don't spread text out too wide. Think about a page in a book; you wouldn't want one page to be too wide, or reading it is oddly stressful. I like to make a small container for text-only, to ensure articles and text aren't too wide. .small-container { max-width : 800px ; padding : 0 15px ; margin-left : auto ; margin-right : auto ; } Use max-width: 100% and height: auto for responsive images. This way, the image will retain it's original aspect ratio, but resize according to the width of its container. img.responsive-image { max-width : 100% ; height : auto ; } Finally, I didn't get into transitions and animations, but I think those are overall less important than the concepts I laid out here today. Conclusion I hope this was a useful introduction to all things CSS, from the fundamentals of selectors and specificity, to layouts and positioning. No matter how much you read about and study CSS, I don't think it can feel natural without a lot of practice. I recommend looking at some designs of websites you like and trying to replicate them without looking at the source code. About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: December 02, 2019 Category: Technical Tags css design Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/react-architecture-directory-structure/",
        "title": "How to Structure and Organize a React Application | Tania Rascia's Personal Website",
        "headings": [
            "How to Structure and Organize a React Application",
            "Directory Structure",
            "Aliases",
            "Components",
            "Services",
            "Store",
            "Utils",
            "Views",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:16.937716",
        "content": [
            "How to Structure and Organize a React Application | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me How to Structure and Organize a React Application There is no consensus on the right way to organize a React application. React gives you a lot of freedom, but with that freedom comes the responsibility of deciding on your own architecture. Often the case is that whoever sets up the application in the beginning throws almost everything in a components folder, or maybe components and containers if they used Redux, but I propose there's a better way. I like to be deliberate about how I organize my applications so they're easy to use, understand, and extend. I'm going to show you what I consider to be an intuitive and scalable system for large-scale production React applications. The main concept I think is important is to make the architecture focused on feature as opposed to type , organizing only shared components on a global level and modularized all the other related entities together in the localized view. Tech assumptions Since this article will be opinionated, I'll make some assumptions about what technology the project will be using: Application - React (Hooks) Global state management - Redux , Redux Toolkit Routing - React Router Styles - Styled Components Testing - Jest , React Testing Library I don't have a very strong opinion about the styling, whether Styled Components or CSS modules or a custom Sass setup is ideal, but I think Styled Components is probably one of the best options for keeping your styles modular. I'm also going to assume the tests are alongside the code, as opposed to in a top-level tests folder. I can go either way with this one, but in order for an example to work, and in the real world, decisions need to be made. Everything here can still apply if you're using vanilla Redux instead of Redux Toolkit. I would recommend setting up your Redux as feature slices either way. I'm also ambivalent about Storybook , but I'll include what it would look like with those files if you choose to use it in your project. For the sake of the example, I'll use a \"Library App\" example, that has a page for listing books, a page for listing authors, and has an authentication system. Directory Structure The top level directory structure will be as follows: assets - global static assets such as images, svgs, company logo, etc. components - global shared/reusable components, such as layout (wrappers, navigation), form components, buttons services - JavaScript modules store - Global Redux store utils - Utilities, helpers, constants, and the like views - Can also be called \"pages\", the majority of the app would be contained here I like keeping familiar conventions wherever possible, so src contains everything, index.js is the entry point, and App.js sets up the auth and routing. .",
            "\u2514\u2500\u2500 App.js I can see some additional folders you might have, such as types if it's a TypeScript project, middleware if necessary, maybe context for Context , etc. Aliases I would set up the system to use aliases, so anything within the components folder could be imported as @components , assets as @assets , etc. If you have a custom Webpack, this is done through the resolve configuration. module . exports = { resolve : { extensions : [ 'js' , 'ts' ] , alias : { '@' : path . resolve ( __dirname , 'src' ) , '@assets' : path . resolve ( __dirname , 'src/assets' ) , '@components' : path . resolve ( __dirname , 'src/components' ) , // ...etc } , } , } It just makes it a lot easier to import from anywhere within the project and move files around without changing imports, and you never end up with something like ../../../../../components/ . Components Within the components folder, I would group by type - forms , tables , buttons , layout , etc. The specifics will vary by your specific app. In this example, I'm assuming you're either creating your own form system, or creating your own bindings to an existing form system (for example, combining Formik and Material UI). In this case, you'd create a folder for each component ( TextField , Select , Radio , Dropdown , etc.), and inside would be a file for the component itself, the styles, the tests, and the Storybook if it's being used. Component.js - The actual React component Component.styles.js - The Styled Components file for the component Component.test.js - The tests Component.stories.js - The Storybook file To me, this makes a lot more sense than having one folder that contains the files for ALL components, one folder that contains all the tests, and one folder that contains all the Storybook files, etc. Everything related is grouped together and easy to find. .",
            "\u2514\u2500\u2500 NavBar.stories.js You'll notice there's an index.js file in the components/forms directory. It is often rightfully suggested to avoid using index.js files as they're not explicit, but in this case it makes sense - it will end up being an index of all the forms and look something like this: src/components/forms/index.js import { TextField } from './TextField/TextField' import { Select } from './Select/Select' import { Radio } from './Radio/Radio' export { TextField , Select , Radio } Then when you need to use one or more of the components, you can easily import them all at once. import { TextField , Select , Radio } from '@components/forms' I would recommend this approach more than making an index.js inside of every folder within forms , so now you just have one index.js that actually indexes the entire directory, as opposed to ten index.js files just to make imports easier for each individual file. Services The services directory is less essential than components , but if you're making a plain JavaScript module that the rest of the application is using, it can be handy. A common contrived example is a LocalStorage module, which might look like this: .",
            "\u2514\u2500\u2500 LoginForm.test.js Keeping everything within folders might seem annoying if you've never set up your project that way - you can always keep it more flat, or move tests to its own directory that mimics the rest of the app. Conclusion This is my proposal for a sytem for React organization that scales well for a large production app, and handles testing and styling as well as keeping everything together in a feature focused way. It's more nested than the traditional structure of everything being in components and containers , but that system is a bit more dated due to Redux being much easier to implement with Hooks, and \"smart\" containers and \"dumb\" components no longer being necessary. It's easy to look at this system and understand everything that is needed for your app and where to go to work on a specific section, or a component that affects the app globally. This system may not make sense for every type of app, but it has worked for me. I'd love to hear any comments about ways this system can be improved, or other systems that have merit. About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: June 23, 2021 Category: Technical Tags javascript react Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/sokoban-game",
        "title": "Writing a Sokoban Puzzle Game in JavaScript | Tania Rascia's Personal Website",
        "headings": [
            "Writing a Sokoban Puzzle Game in JavaScript",
            "Map and entities",
            "Game logic",
            "Moving",
            "Rendering",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:17.226919",
        "content": [
            "Writing a Sokoban Puzzle Game in JavaScript | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me Writing a Sokoban Puzzle Game in JavaScript So the other day, I made an implementation of a Sokoban puzzle game in JavaScript. Here's the source code and here's the demo . The game consists of a wall, a playable character, blocks, and spots on the ground that are storage locations. The aim of the game is to push all the blocks into all the storage locations. It can be challenging because it's easy to end up in a state where a block can no longer be moved and now you have to restart the game. Here's the one I made: The original game has slightly better graphics: In my version, the big blue dot is the character, the pink dots are the storage locations, and the orange blocks are the crates. I wrote it up on the fly over the course of a few hours. Making little games is a lot different than what I usually do at work, so I found it to be a fun, achievable challenge. Fortunately with some previous projects ( Snek and Chip8 ) I had some experience with the concept of plotting out coordinates. Map and entities The first thing I did was build out the map, which is a two-dimensional array where each row corresponds to a y coordinate and each column corresponds to an x coordinate. const map = [ [ 'y0 x0' , 'y0 x1' , 'y0 x2' , 'y0 x3' ] , [ 'y1 x0' , 'y1 x1' , 'y1 x2' , 'y1 x3' ] , // ...etc ] So accessing map[0][0] would be y0 x0 and map[1][3] would be y1 x3 . From there, it's easy to make a map based on an existing Sokoban level where each coordinate is an entity in the game - terrain, player, etc. Entities const EMPTY = 'empty' const WALL = 'wall' const BLOCK = 'block' const SUCCESS_BLOCK = 'success_block' const VOID = 'void' const PLAYER = 'player' Map const map = [ [ EMPTY , EMPTY , WALL , WALL , WALL , WALL , WALL , EMPTY ] , [ WALL , WALL , WALL , EMPTY , EMPTY , EMPTY , WALL , EMPTY ] , [ WALL , VOID , PLAYER , BLOCK , EMPTY , EMPTY , WALL , EMPTY ] , // ...etc With that data, I can map each entity to a color and render it to the screen on an HTML5 canvas. So now I have a map that looks right, but it doesn't do anything yet. Game logic There aren't too many actions to worry about. The player can move orthogonally - up, down, left, and right - and there are a few things to consider: The PLAYER and BLOCK cannot move through a WALL The PLAYER and BLOCK can move through an EMPTY space or a VOID space (storage location) The player can push a BLOCK A BLOCK becomes a SUCCESS_BLOCK when it's on top of a VOID . And that's literally it. I also coded one more thing in that's not part of the original game, but it made sense to me: A BLOCK can push all other BLOCK pieces When the player pushes a block that's next to other blocks, all the blocks will move until it collides with a wall. In order to do this I just need to know the entities adjacent to the player, and the entities adjacent to a block if a player is pushing a block. If a player is pushing multiple blocks, I'll have to recursively count how many there are. Moving Therefore, the first thing we need to do any time a change happens is find the player's current coordinates, and what type of entity is above, below, to the left, and to the right of them. function findPlayerCoords ( ) { const y = map . findIndex ( row => row . includes ( PLAYER ) ) const x = map [ y ] . indexOf ( PLAYER ) return { x , y , above : map [ y - 1 ] [ x ] , below : map [ y + 1 ] [ x ] , sideLeft : map [ y ] [ x - 1 ] , sideRight : map [ y ] [ x + 1 ] , } } Now that you have the player and adjacent coordinates, every action will be a move action. If the player is trying to move through a traversible cell (empty or void), just move the player. If the player is trying to push a block, move the player and block. If the adjacent unit is a wall, do nothing. function move ( playerCoords , direction ) { if ( isTraversible ( adjacentCell [ direction ] ) ) { movePlayer ( playerCoords , direction ) } if ( isBlock ( adjacentCell [ direction ] ) ) { movePlayerAndBlocks ( playerCoords , direction ) } } Using the initial game state, you can figure out what should be there. As long as I pass the direction to the function, I can set the new coordinates - adding or removing a y will be up and down, adding or removing an x will be left or right. function movePlayer ( playerCoords , direction ) { // Replace previous spot with initial board state (void or empty) map [ playerCoords . y ] [ playerCoords . x ] = isVoid ( levelOneMap [ playerCoords . y ] [ playerCoords . x ] ) ? VOID : EMPTY // Move player map [ getY ( playerCoords . y , direction , 1 ) ] [ getX ( playerCoords . x , direction , 1 ) ] = PLAYER } If the player is moving a block, I wrote a little recursive function to check how many blocks are in a row, and once it has that count, it will check what the adjacent entity is, move the block if possible, and move the player if the block moved. function countBlocks ( blockCount , y , x , direction , board ) { if ( isBlock ( board [ y ] [ x ] ) ) { blockCount ++ return countBlocks ( blockCount , getY ( y , direction ) , getX ( x , direction ) , direction , board ) } else { return blockCount } } const blocksInARow = countBlocks ( 1 , newBlockY , newBlockX , direction , map ) Then, if the block can be moved, it will just either move it or move it and transform it into a success block, if it's over a storage location, followed by moving the player. map [ newBoxY ] [ newBoxX ] = isVoid ( levelOneMap [ newBoxY ] [ newBoxX ] ) ? SUCCESS_BLOCK : BLOCK movePlayer ( playerCoords , direction ) Rendering It's easy to keep track of the entire game in a 2D array and render the update game to the screen with each movement. The game tick is incredibly simple - any time a keydown event happens for up, down, left, right (or w, a, s, d for intense gamers) the move() function will be called, which uses the player index and adjacent cell types to determine what the new, updated state of the game should be. After the change, the render() function is called, which just paints the entire board with the updated state. const sokoban = new Sokoban ( ) sokoban . render ( ) // re-render document . addEventListener ( 'keydown' , event => { const playerCoords = sokoban . findPlayerCoords ( ) switch ( event . key ) { case keys . up : case keys . w : sokoban . move ( playerCoords , directions . up ) break case keys . down : case keys . s : sokoban . move ( playerCoords , directions . down ) break case keys . left : case keys . a : sokoban . move ( playerCoords , directions . left ) break case keys . right : case keys . d : sokoban . move ( playerCoords , directions . right ) break default : } sokoban . render ( ) } ) The render function just maps through each coordinate and creates a rectangle or circle with the right color. function render ( ) { map . forEach ( ( row , y ) => { row . forEach ( ( cell , x ) => { paintCell ( context , cell , x , y ) } ) } ) } Basically all rendering in the HTML canvas made a path for the outline (stroke), and a path for the inside (fill). Since one pixel per coordinate would be a pretty tiny game, I multiplied each value by a multipler , which was 75 pixels in this case. function paintCell ( context , cell , x , y ) { // Create the fill context . beginPath ( ) context . rect ( x * multiplier + 5 , y * multiplier + 5 , multiplier - 10 , multiplier - 10 ) context . fillStyle = colors [ cell ] . fill",
            "context . stroke ( ) } The render function also checks for a win condition (all storage locations are now success blocks) and shows \"A winner is you!\" if you win. Conclusion This was a fun little game to make. I organized the files like this: Constants for entity data, map data, mapping colors to entities, and key data. Utility functions for checking what type of entity exists at a particular coordinate, and determining what the new coordinates should be for the player. Sokoban class for maintaining game state, logic, and rendering. Script for initializing the instance of the app and handling key events. I found it easier to code than to solve. \ud83d\ude06 Hope you enjoyed reading about this and feel inspired to make your own little games and projects. About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: July 26, 2021 Category: Technical Tags javascript games Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/getting-started-with-vue/",
        "title": "How to Use Vue, the JavaScript Framework | Tania Rascia's Personal Website",
        "headings": [
            "How to Use Vue, the JavaScript Framework",
            "What is Vue?",
            "Setup and Installation",
            "Static HTML File",
            "Vue CLI",
            "Vue DevTools",
            "Getting Started",
            "Entry point",
            "Anatomy of a Vue file",
            "Creating a Component",
            "Loops",
            "Working with Forms",
            "Event listeners",
            "Methods",
            "Emitting events to the parent",
            "Retrieving events from the child",
            "Basic form validation",
            "Computed properties",
            "Conditonals",
            "Adding a reference",
            "Deleting Items",
            "Editing Items",
            "Making Asynchronous REST API Calls",
            "Lifecycle methods",
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "Deploying a Build to GitHub Pages",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:17.459828",
        "content": [
            "How to Use Vue, the JavaScript Framework | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me How to Use Vue, the JavaScript Framework We're in a golden era of JavaScript libraries and frameworks. More and more companies are building out full, dynamic web apps in addition to - or in lieu of - traditional desktop applications. This means things are constantly changing and frameworks are going in and out of vogue, but the core concepts of what we're trying to accomplish remain similar. Previously, I wrote a Getting Started with React guide that helped out a lot of beginner and intermediate developers. Vue.js is going toe-to-toe with React for popularity among JavaScript developers, so I'd like to offer the same straightforward and concise introduction for those who'd like to learn Vue as well. Let's get started! Prerequisites Knowledge of HTML & CSS Knowledge of basic JavaScript Familiarity of ES6+ features and syntax Node.js and npm (or yarn) installed globally Familiarity with REST APIs would be helpful, but we'll go over it. Goals We're going to create a small application with Vue. The app will be a simple employee database and we'll learn: How to set up Vue The anatomy of a Vue file How to work with data, methods, conditional statements, and events in Vue How to create, update, view, and delete users (employees) from the system How to make API calls for each of the above actions How to use tables, forms , and form validation How to host a Vue build on GitHub pages I've created a live demo and put the source up on GitHub. View demo View source (You can also view the demo on CodeSandbox .) What is Vue? Vue (or Vue.js) is an open-source front-end JavaScript framework Vue is the view layer of an MVC application (Model View Controller) Vue is currently one of the most popular JavaScript libraries/frameworks Unlike other popular JavaScript projects, Vue is not backed by a large corporation like React (Facebook) or Angular (Google). Vue was originally written by Evan You and the open-source community. Setup and Installation There are two main ways to set up Vue - in a Node project, or directly injected into a static HTML file. I'd first like to take a look at setting up Vue in an HTML file, as it's the simplest setup and introduction. Those who have only ever used a library like jQuery will be most familiar with this method. If you've already used React or another JavaScript framework, feel free to skip to the next section. We can just create a basic HTML file and add a link to a Vue CDN in the head, and create a <div> with an id of app . Static HTML File index.html <! DOCTYPE html > < html lang = \" en \" > < head > < meta charset = \" utf-8 \" /> < meta http-equiv = \" X-UA-Compatible \" content = \" IE=edge \" /> < meta name = \" viewport \" content = \" width=device-width,initial-scale=1.0 \" /> < script src = \" https://cdn.jsdelivr.net/npm/vue/dist/vue.js \" > </ script > < title > Vue App </ title > </ head > < body > < div id = \" app \" > </ div > </ body > </ html > We can create a simple \"Hello World\" with Vue. Using double brackets, we'll render message in app . In the <script> tag, we'll link the data and the DOM. We create a new Vue , and the message property on data will be rendered. index.html < html lang = \" en \" > < head > < meta charset = \" utf-8 \" /> < meta http-equiv = \" X-UA-Compatible \" content = \" IE=edge \" /> < meta name = \" viewport \" content = \" width=device-width,initial-scale=1.0 \" /> < script src = \" https://cdn.jsdelivr.net/npm/vue/dist/vue.js \" > </ script > < title > Vue App </ title > </ head > < body > < div id = \" app \" > {{message}} </ div > < script > const App = new Vue ( { el : '#app' , data : { message : 'Hello Vue!' , } , } ) </ script > </ body > </ html > We can see the data render. At this point, it's not very impressive, and it's what you'll learn in the introduction of the documentation , but it drives home the important point that Vue is just JavaScript, and there's no need to get nervous about Node, Babel, Webpack, and so on. Vue CLI More often, you won't be injecting Vue into a static HTML file, but you'll be taking advantage of the Node ecosystem. The easiest way we can do this is vue Vue CLI , or the Vue Command Line Interface. As mentioned in the prerequisites, you should be familiar with Node and npm/yarn and how to work with local and global packages. First, we'll install Vue CLI. # install with npm npm i -g @vue/cli @vue/cli-service-global # install with yarn yarn global add @vue/cli @vue/cli-service-global Now that we have Vue CLI installed globally, we can use the vue command anywhere. We'll use vue create to start a new project. vue create is the equivalent to create-react-app . vue create vue-app You'll be given an option to do default or manual, and we can just select default. Vue CLI v3.7.0",
            "Manually select features Once that's done, you can move to the new app that's been created and serve to run the dev server. cd vue-app npm run serve # or yarn serve Once that's done, you can navigate to http://localhost:8080/ to see the default page. At this point, you're all set up and ready to go with Vue. If you're using Visual Studio Code, install the Vetur plugin for syntax highlighting, formatting, and so on. Vue DevTools One final thing to have in your toolbelt while working with Vue is Vue DevTools. It's an add-on to regular DeveloperTools which will show you all the information about your components - their state, methods, etc. Vue DevTools on Chrome Vue DevTools on FireFox Getting Started Congrats, you're all set up! You have a new Vue boilerplate app. In the project files, you have a public folder which contains index.html , and an src folder with main.js as the entry point. We're introduced to .vue files, with the HelloWorld.vue and App.vue components. Entry point In main.js , we're bringing in Vue and rendering the App to our app div in index.html . This file won't need to change. src/main.js import Vue from 'vue' import App from './App.vue' Vue . config . productionTip = false new Vue ( { render : ( h ) => h ( App ) , } ) . $mount ( '#app' ) Anatomy of a Vue file Anything else we make will be a .vue file, which always consists of three things: <template> <script> <style> And looks like this: example.vue < template > </ template > < script > export default { name : 'component-name' , } </ script > < style scoped > </ style > This may seem strange to you, as it did to me at first. I originally learned front end coding with a focus on separation of concerns for HTML, CSS, and JavaScript, and here we have all three together. Yet JavaScript and the way we design apps has evolved, and keeping our styles and view and component coupled together is generally considered an advantage and improves maintainability. The data and logic for the component goes in the <script> tag, but only name is required. The <style> tag is just CSS. We have the advantage of being able to scope the CSS so it only applies to this component and not globally with the scoped attribute. Now let's start actually building this app. As always, this tutorial is about functionality, not styles, so I'm just going to link to Primitive UI in the index.html file to add some easy default styles. < link rel = \" stylesheet \" href = \" https://unpkg.com/primitive-ui/dist/css/main.css \" /> Creating a Component Create a file called EmployeeTable.vue in src/components . We're going to create a table with some static data in here. src/components/EmployeeTable.vue < template > < div id = \" employee-table \" > < table > < thead > < tr > < th > Employee name </ th > < th > Employee email </ th > </ tr > </ thead > < tbody > < tr > < td > Richard Hendricks </ td > < td > richard@piedpiper.com </ td > </ tr > < tr > < td > Bertram Gilfoyle </ td > < td > gilfoyle@piedpiper.com </ td > </ tr > < tr > < td > Dinesh Chugtai </ td > < td > dinesh@piedpiper.com </ td > </ tr > </ tbody > </ table > </ div > </ template > < script > export default { name : 'employee-table' , } </ script > < style scoped > </ style > In Vue, the convention is that the filename and import will be in PascalCase, such as EmployeeTable , but when used in a template, this will translate to kebab-case, <employee-table> . This uses the proper conventions for JavaScript and HTML respectively. I'm wrapping the template in a div which isn't strictly necessary, but a template can only have one root child element, so this makes it easy to add additional elements going forward. We're exporting EmployeeTable and importing it into App.vue . In our import , we can use @ to reference the src folder. App.vue knows which components it can use via the components property. All imported components must be added there. I've also added in some global styles. src/App.vue < template > < div id = \" app \" class = \" small-container \" > < h1 > Employees </ h1 > < employee-table /> </ div > </ template > < script > import EmployeeTable from '@/components/EmployeeTable.vue' export default { name : 'app' , components : { EmployeeTable , } , } </ script > < style > button { background : #009435 ; border : 1px solid #009435 ; } .small-container { max-width : 680px ; } </ style > So here's what we have so far. We want to refactor this already to use data in the form of arrays and object as opposed to hard coding all our values into the table. So let's add a data() method, and return an employees array. We're also going to add IDs to each one to make them uniquely identifiable. App.vue import EmployeeTable from '@/components/EmployeeTable.vue' export default { name : 'app' , components : { EmployeeTable , } , data ( ) { return { employees : [ { id : 1 , name : 'Richard Hendricks' , email : 'richard@piedpiper.com' , } , { id : 2 , name : 'Bertram Gilfoyle' , email : 'gilfoyle@piedpiper.com' , } , { id : 3 , name : 'Dinesh Chugtai' , email : 'dinesh@piedpiper.com' , } , ] , } } , } Data is like React state. Now we have this data on App.vue , but we want to pass it to EmployeeTable . We can do that by passing the data down as a property. An attribute that begins with a colon : will allow you to pass data. The more verbose version would be v-bind . In this case we'll pass our employees array. < employee-table :employees = \" employees \" /> <!-- this is the same thing --> < employee-table v-bind: employees = \" employees \" /> Now on the EmployeeTable side, we want to retrieve that data, so we tell the component that it will receive props, in this case an Array . EmployeeTable.vue export default { name : 'employee-table' , props : { employees : Array , } , } You might also see an array of strings instead of each value and type for props, like props: [ 'employees' ] , which also works but is less explicit. Loops Now that we have the data, we want to loop through the data and display the DOM nodes accordingly. We'll do this with the v-for attribute. Now that we can retrieve employees in EmployeeTable , we'll display one table row per employee. EmployeeTable.vue < template > < div id = \" employee-table \" > < table > <!-- ...thead... --> < tbody > < tr v-for = \" employee in employees \" :key = \" employee.id \" > < td > {{ employee.name }} </ td > < td > {{ employee.email }} </ td > </ tr > </ tbody > </ table > </ div > </ template > Vue (like React) has a requirement for uniquely identifying any element in an array, so we'll use :key on the table row and set it to a unique value. Now our table hasn't changed from a view perspective, but it is now set up to work with data more efficiently. Working with Forms Now we're successfully accomplishing the \"Read\" portion of a CRUD app, but the next most important thing to do is add the ability to create a new employee. We're going to create an add employee form. Make EmployeeForm.vue and set it up a field to enter name, email, and a button to submit. I'll go ahead and create an employee data property with name and email on it. src/components/EmployeeForm.vue < template > < div id = \" employee-form \" > < form > < label > Employee name </ label > < input type = \" text \" /> < label > Employee Email </ label > < input type = \" text \" /> < button > Add Employee </ button > </ form > </ div > </ template > < script > export default { name : 'employee-form' , data ( ) { return { employee : { name : '' , email : '' , } , } } , } </ script > < style scoped > form { margin-bottom : 2rem ; } </ style > We'll also need to add this to App.vue src/components/App.vue < template > < div id = \" app \" class = \" small-container \" > < h1 > Employees </ h1 > < employee-form /> < employee-table :employees = \" employees \" /> </ div > </ template > < script > import EmployeeTable from '@/components/EmployeeTable.vue' import EmployeeForm from '@/components/EmployeeForm.vue' export default { name : 'app' , components : { EmployeeTable , EmployeeForm , } , data : { // ... } , } </ script > Now we have to figure out how to get the data that we're writing in the input into Vue's component state. To do that we'll use v-model . v-model is some built-in Vue syntactic sugar for updating an input value with an onchange event. EmployeeForm.vue < template > < div id = \" employee-form \" > < form > < label > Employee name </ label > < input v-model = \" employee.name \" type = \" text \" /> < label > Employee Email </ label > < input v-model = \" employee.email \" type = \" text \" /> < button > Add Employee </ button > </ form > </ div > </ template > Now that you've added this, you can see in Vue DevTools that the state of the component changes. We just need to submit these values and update the parent (App) state with the new employee object. Event listeners We want to do an onsubmit event on the form. We can do that with v-on:submit , or @submit for short. This convention will be the same for @click / v-on:click or any other similar event. The submit event also has a handy prevent we can add to it, which is the same as putting event.preventDefault() inside the submit function, since we won't be using the default GET/POST methods provided by forms. Let's add this to the form, and reference a handleSubmit method we'll make. EmployeeForm.vue < form @submit.prevent = \" handleSubmit \" > </ form > Methods Now we're going to create our first method on a component. Below data() , we can create a methods object, which will contain all the custom methods we create. Let's add handleSubmit there. EmployeeForm.vue export default { name : 'employee-form' , data ( ) { return { employee : { name : '' , email : '' , } , } } , methods : { handleSubmit ( ) { console . log ( 'testing handleSubmit' ) } , } , } Emitting events to the parent Now if you try to submit the form, you'll see the message logged in the console. We know the form submit method is working properly, so we can pass the data up to App now. We'll do this using $emit . Emit broadcasts a name of an event and data to its parent component, like so. this . $emit ( 'name-of-emitted-event' , dataToPass ) In our case, we'll create an event called add:employee , and pass this.employee . EmployeeForm.vue handleSubmit ( ) { this . $emit ( 'add:employee' , this . employee ) } The add:employee syntax (as opposed to add-employee or something else) is recommended in the Vue documentation Once you add this, click to add form button and go to Vue DevTools. You'll see a notification for a new event, and it will tell you the name, source, and payload, which in this case is an object we created. Retrieving events from the child Now employee-form is broadcasting its emitted event, but we need to capture the event and value in the parent to work with it. The first thing we need to do is make employee-form acknowledge and handle the emitted event, and invoke a new method. It will look like this: < component @name-of-emitted-event = \" methodToCallOnceEmitted \" > </ component > So let's add that to App.vue . App.vue < employee-form @add: employee = \" addEmployee \" /> Now we just have to create the addEmployee method on App.vue , which will modify the employees array by adding a new item to it. That will essentially look like this: App.vue methods : { addEmployee ( employee ) { this . employees = [ ... this . employees , employee ] } } Since I have to make an id as well, I'll just write some code to get the new employees ID based on number of items in the array. Note that in a real database, this ID would be uniquely generated or auto incremented. addEmployee ( employee ) { const lastId = this . employees . length > 0 ? this . employees [ this . employees . length - 1 ] . id : 0 ; const id = lastId + 1 ; const newEmployee = { ... employee , id } ; this . employees = [ ... this . employees , newEmployee ] ; } Now with this, you can add new employees. Note that the new employee will not persist, as it is front end only and not connected to a database. Basic form validation This technically works, but we can clean it up a little. We want to... Show a success message if everything went through Show an error message if something was missing Highlight the inputs that have invalid data Clear the inputs after the form is done submitting properly, and Focus on the first item in the input after successful submission Computed properties In Vue, we can use computed properties , which are functions that are automatically computed when something changes. This way we can avoid putting complex logic in the Vue template itself. I'm just going to put a basic check to make sure the field isn't empty for both fields. EmployeeForm.vue computed : { invalidName ( ) { return this . employee . name === '' } , invalidEmail ( ) { return this . employee . email === '' } , } , To set all this up, I'm going to add a submitting state, to check whether or not the form is currently being submitted, an error state if something went wrong, and a success state if it went through properly. EmployeeForm.vue data ( ) { return { submitting : false , error : false , success : false , employee : { name : '' , email : '' , } } } The submit function will first clear whether or not success or error have been set, the start submitting. It'll check our computed properties, and if either is true, an error will be set. If not, we can submit, and set all the states back to default. EmployeeForm.vue methods : { handleSubmit ( ) { this . submitting = true this . clearStatus ( ) if ( this . invalidName || this . invalidEmail ) { this . error = true return } this . $emit ( 'add:employee' , this . employee ) this . employee = { name : '' , email : '' , } this . error = false this . success = true this . submitting = false } , clearStatus ( ) { this . success = false this . error = false } } Since we want an error message and a success message, I'll set up the CSS for that. EmployeeForm.vue < style scoped > form { margin-bottom : 2rem ; } [class*='-message'] { font-weight : 500 ; } .error-message { color : #d33c40 ; } .success-message { color : #32a95d ; } </ style > Finally, we'll set up the form. If the form is submitting and one of the computed properties is invalid, we want to set a has-error class on the input. Using :class= ensures that the class will be treated as JavaScript instead of a plain string. We can make sure the statuses get cleared on focus and keypress events, and we have success and error messages displayed accordingly at the bottom. EmployeeForm.vue < form @submit.prevent = \" handleSubmit \" > < label > Employee name </ label > < input type = \" text \" :class = \" { ' has-error ' : submitting && invalidName } \" v-model = \" employee.name \" @focus = \" clearStatus \" @keypress = \" clearStatus \" /> < label > Employee Email </ label > < input type = \" text \" :class = \" { ' has-error ' : submitting && invalidEmail } \" v-model = \" employee.email \" @focus = \" clearStatus \" /> < p v-if = \" error && submitting \" class = \" error-message \" > \u2757Please fill out all required fields </ p > < p v-if = \" success \" class = \" success-message \" > \u2705 Employee successfully added </ p > < button > Add Employee </ button > </ form > Conditonals You'll notice a v-if property. This is a conditional in Vue . In this case, the <p> element will only be displayed if the condition is true. There is also a v-else-if , and v-else property, which work the same as their vanilla JS counterparts. Now that that's complete, we can see these conditionally rendered elements. Here's the error message on a missing field. And here's the success message. Adding a reference There's one more small improvement we can make. After submitting the form, it would be nice if the focus went back on the first item to make it easy to add many items without clicking around. We can do that with refs , which we can use to target a specific element. We can just add a ref to the first input... EmployeeForm.vue < input ref = \" first \" ... /> And focus that ref after submitting the form in handleSubmit . EmployeeForm.vue this . $emit ( 'add:employee' , this . employee ) this . $refs . first . focus ( ) Now after you submit the focus will automatically go to the first field in the form. The @keypress event to clearStatus we added to it before will ensure the success or error message goes away once you start typing. Our EmployeeForm file is complete, and you can view the source of the completed file in case you got lost along the way. Deleting Items Now that the form is done, we have to finish the other actions on the table - editing and deleting. We'll start with deleting, which is an easier operation. First, we'll update the table to have an \"Actions\" row, and add buttons for editing and deleting. EmployeeTable.vue < template > < div id = \" employee-table \" > < table > < thead > < tr > < th > Employee name </ th > < th > Employee email </ th > < th > Actions </ th > </ tr > </ thead > < tbody > < tr v-for = \" employee in employees \" :key = \" employee.id \" > < td > {{ employee.name }} </ td > < td > {{ employee.email }} </ td > < td > < button > Edit </ button > < button > Delete </ button > </ td > </ tr > </ tbody > </ table > </ div > </ template > < style scoped > button { margin : 0 0.5rem 0 0 ; } </ style > We'll emit an event like before, this time called deleteEmployee . We can pass the id of the employee as the payload. EmployeeTable.vue < button @click = \" $emit( ' delete:employee ' , employee.id) \" > Delete </ button > Back in App.vue , we have to tell employee-table to perform an action on delete-employee ... App.vue < employee-table :employees = \" employees \" @delete: employee = \" deleteEmployee \" /> And we'll filter the deleted row out. App.vue methods : { addEmployee ( employee ) { ... } , deleteEmployee ( id ) { this . employees = this . employees . filter ( employee => employee . id !== id ) } } Now you'll notice you can delete items. Let's just add a message in case there are no employees. EmployeeTable.vue < div id = \" employee-table \" > < p v-if = \" employees.length < 1 \" class = \" empty-table \" > No employees </ p > < table v-else > ... </ table > </ div > We can successfully add and delete employees now. Editing Items Editing is a little more complex than deleting. The setup from App.vue is simple though, so we'll do that first. Just add the edit:employee event that we'll be making: App.vue < employee-table :employees = \" employees \" @delete: employee = \" deleteEmployee \" @edit: employee = \" editEmployee \" /> And create the editEmployee method, which will take id and updatedEmployee parameters, map through the employees array, and update the correct employee. App.vue editEmployee ( id , updatedEmployee ) { this . employees = this . employees . map ( employee => employee . id === id ? updatedEmployee : employee ) } Simple enough. Now back in EmployeeTable.vue , we'll basically want to make an \"edit mode\" that is enabled when the button is pressed. EmployeeTable.vue < button @click = \" editMode(employee.id) \" > Edit </ button > We'll create an editing state that will get set to the id of the row that's currently being edited when editMode is enabled. EmployeeTable will have it's own local editEmployee method, which emits edit:employee to App if the fields aren't empty, and resets the editing state. EmployeeTable.vue data ( ) { return { editing : null , } } , methods : { editMode ( id ) { this . editing = id } , editEmployee ( employee ) { if ( employee . name === '' || employee . email === '' ) return this . $emit ( 'edit:employee' , employee . id , employee ) this . editing = null } } Here's the current state of our table row - we're just displaying the values. < tr v-for = \" employee in employees \" :key = \" employee.id \" > < td > {{ employee.name }} </ td > < td > {{ employee.email }} </ td > < td > < button @click = \" editMode(employee.id) \" > Edit </ button > < button @click = \" $emit( ' delete:employee ' , employee.id) \" > Delete </ button > </ td > </ tr > To make it editable, we'll check if editing === employee.id is true for a particular row, and display and input instead. We'll also add a cancel button that will cancel the editing by setting it to null. < tr v-for = \" employee in employees \" :key = \" employee.id \" > < td v-if = \" editing === employee.id \" > < input type = \" text \" v-model = \" employee.name \" /> </ td > < td v-else > {{employee.name}} </ td > < td v-if = \" editing === employee.id \" > < input type = \" text \" v-model = \" employee.email \" /> </ td > < td v-else > {{employee.email}} </ td > < td v-if = \" editing === employee.id \" > < button @click = \" editEmployee(employee) \" > Save </ button > < button class = \" muted-button \" @click = \" editing = null \" > Cancel </ button > </ td > < td v-else > < button @click = \" editMode(employee.id) \" > Edit </ button > < button @click = \" $emit( ' delete:employee ' , employee.id) \" > Delete </ button > </ td > </ tr > And now I can edit a single row at a time! Editing works, but you still can't cancel the state from updating with this code, even if the new values don't get sent to the API call. We'll create cancelEdit , and make the cancel button call @click=\"cancelEdit(employee)\" and remove .id from the edit button. We'll make a cached employee that we can return to. editMode ( employee ) { this . cachedEmployee = Object . assign ( { } , employee ) this . editing = employee . id } , cancelEdit ( employee ) { Object . assign ( employee , this . cachedEmployee ) this . editing = null ; } At this point, the app is technically complete, but a real production app will probably be making API calls to a back end database, so we'll make a mock version of that. If you'd like to view a completed version of the app before we get into the API calls, you can view this CodeSandbox demo ]. Making Asynchronous REST API Calls We're going to use JSON Placeholder to make fake API calls that will give us real responses. We can GET values (for example, visit https://jsonplaceholder.typicode.com/users to see the users JSON we'll be using), and we can make POST , PUT , and DELETE requests. These requests will not persist in a real database because they're for example purposes. If you're not familiar with REST, please read this article An asynchronous method with async/await will look something like this, using a try/catch block. We'll use the built-in Fetch API that Node and the browser have access to, however other options like Axios are available and popular. I just prefer to use Fetch because it's one less dependency to install for example purposes. async asynchronousMethod ( ) { try { const response = await fetch ( 'url' ) const data = await response . json ( ) // do something with `data` } catch ( error ) { // do something with `error` } } So at this point, I'll replace all our CRUD methods with async methods, and update the data via the API as well as the front end. Lifecycle methods With GET, we'll want to remove all the pre-populated data we have in the employees array, and replace it with the data from the API. We'll call that GET in the mounted lifecycle method . If you're familiar with React, you'll know about lifecycle methods already, and this is the Vue equivalent of componentDidMount . mounted tells our component to perform the action once the component is actually inserted to the DOM. This is a common way to display data from an API. (Some use the created lifecycle for this task.) App.vue export default { name : 'app' , components : { EmployeeTable , EmployeeForm , } , data ( ) { return { employees : [ ] , } } , mounted ( ) { this . getEmployees ( ) } , } So now we can update all our CRUD methods with their asynchronous API-call equivalents. GET Retrieve a resource. App.vue async getEmployees ( ) { try { const response = await fetch ( 'https://jsonplaceholder.typicode.com/users' ) const data = await response . json ( ) this . employees = data } catch ( error ) { console . error ( error ) } } POST Create a new resource (non-idempotent). App.vue async addEmployee ( employee ) { try { const response = await fetch ( 'https://jsonplaceholder.typicode.com/users' , { method : 'POST' , body : JSON . stringify ( employee ) , headers : { 'Content-type' : 'application/json; charset=UTF-8' } , } ) const data = await response . json ( ) this . employees = [ ... this . employees , data ] } catch ( error ) { console . error ( error ) } } PUT Update an exiting resource (idempotent). App.vue async editEmployee ( id , updatedEmployee ) { try { const response = await fetch ( ` https://jsonplaceholder.typicode.com/users/ ${ id } ` , { method : 'PUT' , body : JSON . stringify ( updatedEmployee ) , headers : { 'Content-type' : 'application/json; charset=UTF-8' } , } ) const data = await response . json ( ) this . employees = this . employees . map ( employee => ( employee . id === id ? data : employee ) ) } catch ( error ) { console . error ( error ) } } DELETE Remove an existing resource. App.vue async deleteEmployee ( id ) { try { await fetch ( ` https://jsonplaceholder.typicode.com/users/ ${ id } ` , { method : \"DELETE\" } ) ; this . employees = this . employees . filter ( employee => employee . id !== id ) ; } catch ( error ) { console . error ( error ) ; } } Okay, all API calls should be working properly, and we're getting data from JSON Placeholder instead of our own, static data. And the app is complete! You can check out the live demo or view the source . Deploying a Build to GitHub Pages You might want to deploy your newly completed app to GitHub pages, a static site host. Assuming you've already created a repository and committed to master, using the steps below... git remote add origin https://github.com/username/vue-app git add . git commit -m \"initial commit\" git push -u origin master You can commit the build with the following steps: Create a gh-pages branch. git checkout -b gh-pages Remove the dist directory from .gitignore . Create vue.config.js and add the publicPath of your GitHub vue.config.js module . exports = { publicPath : 'vue-app' , } Create a build, which will output the dist folder. npm run build # or yarn build Add the build, commit, and send it to gh-pages on GitHub. git add dist git commit -m \"gh-pages commit\" git subtree push --prefix dist origin gh-pages And within a minute or two, it should be all hosted! Conclusion Wow, that was a lot. We learned what Vue is, how to set up a Vue project via static HTML or Vue Cli, and how to make a complete CRUD app in Vue. We learned about Vue components, data, methods, computed methods, lifecycles, conditionals, events, form handling, and building. If you went through and did this whole tutorial, you should feel pretty good starting to build your own apps from scratch in Vue. From here, you might want to look into Vuex for state management (similar to React's Redux), and Vue Router for front-end routing (similar to React Router DOM). The great part about the Vue environment is that it's batteries optional, but official batteries also included should you need it. A lot of work went into creating this app and tutorial, and if you enjoyed it I hope you share it with anyone you think might benefit from it! If you see any mistakes, please let me know. View Source View Demo About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: May 16, 2019 Category: Technical Tags javascript vue tutorial frameworks Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/notes",
        "title": "Notes | Tania Rascia's Personal Website",
        "headings": [
            "Notes",
            "2024",
            "2023 into 2024",
            "2023",
            "2022 into 2023",
            "2022",
            "The Lore of Animorphs (an Ode)",
            "Tending to My Digital Garden",
            "Memories of Josh",
            "Redesign: Version 6.0",
            "Building a Musical Instrument with the Web Audio API and Svelte",
            "2021 into 2022",
            "2021",
            "Behind the Tutorials",
            "Redesign: Version 5.0",
            "2020 into 2021",
            "2020",
            "Building TakeNote, a Full-Stack Notes App for Developers",
            "Building My First PC",
            "Everyday Systems That Help Me",
            "Adding Comments to My Blog (via Utterances)",
            "Wildnerness Backpacking Gear List",
            "Making the Internet a Better Place",
            "2019",
            "2019 into 2020",
            "Developer Blogs to Follow (2019)",
            "The End of an Era: Migrating from WordPress to Gatsby",
            "Everything I Know as a Software Developer Without a Degree (2019)",
            "2018",
            "2018 into 2019",
            "Redesign: Version 4.0",
            "2017",
            "2017 into 2018",
            "Backpacking in Europe: Planning and Packing",
            "How I Made a Career Change into Web Development",
            "Web Developers and Bloggers I Follow (2017)",
            "The Beginning of the Next Phase",
            "Website Redesign: Version 2.0 (863 Commits Later)",
            "The Three Types of Can't",
            "2016 into 2017",
            "2016",
            "Productivity: How I Use Technology to Organize My Life",
            "2015",
            "From Cooking to Coding"
        ],
        "last_updated": "2024-10-23T01:36:17.965782",
        "content": []
    },
    {
        "url": "https://www.taniarascia.com/musical-instrument-web-audio-api",
        "title": "Building a Musical Instrument with the Web Audio API and Svelte | Tania Rascia's Personal Website",
        "headings": [
            "Building a Musical Instrument with the Web Audio API and Svelte",
            "Web Audio API",
            "Data Structure",
            "Frequencies",
            "Button layout",
            "Keyboard layout",
            "Pressing keys, playing notes",
            "Rendering",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:18.012152",
        "content": [
            "Building a Musical Instrument with the Web Audio API and Svelte | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me Building a Musical Instrument with the Web Audio API and Svelte It's been a while since I've written anything due to some personal concerns that I might write about later, but don't worry, I'm still around and I'm still coding. Recently, I went to Texas and bought a three-row diatonic button accordion. Diatonic accordions are popular for a lot of different types of folk music, which is generally learned by ear. This is good for me, because I don't really know how to read music anyway. The accordion has 34 buttons on the treble side and 12 buttons on the bass side. Unlike a piano accordion, which has the same logical, chromatic layout as a piano, the diatonic accordion just has a bunch of buttons and I didn't really know where to start. Also, every note is different whether you're pulling the bellows out or pushing them in, so there are actually 68 notes on the treble side (albeit some are repeated). Also, as I'm sure you might be aware, accordions are loud. Very loud. In order to not piss off my neighbors too much, and to learn how the layout of this box works, I decided to make a little web app. That web app is KeyboardAccordion.com , which like everything else I create in my free time is open source . I noticed that there are just enough keys on a computer keyboard to correspond to the accordion layout, and they're arranged in a similar pattern. With this, I can keep track of the notes, scales, and chords and start figuring out how to put it all together. Here's what one of the accordions looks like: I decided to make this app in Svelte, because I've used React and Vue professionally but have no experience with Svelte whatsoever and wanted to know what everyone loves about it. Web Audio API KeyboardAccordion.com only has one dependency, and that's Svelte. Everything else is done using plain JavaScript and the built-in browser Web Audio API . I'd never really used the Web Audio API before, so I figured out what I needed to to get this working. The first thing I did was create an AudioContext and attach a GainNode , which controls the volume. const audio = new ( window . AudioContext || window . webkitAudioContext ) ( ) const gainNode = audio . createGain ( ) gainNode . gain . value = 0.1 gainNode . connect ( audio . destination ) As I was figuring everything out, I was experimenting with making new AudioContext for every note because I was trying to fade out the sound, but then I kept realizing that after 50 notes, the app would stop working. Fifty is apparently the limit for the browser, so it's better to just make one AudioContext for the entire app. I'm using waves with the Audio API and not using any sort of audio sample, and I used the OscillatorNode to make each note. There are various types of waves you can use - square , triangle , sine , or sawtooth , which all have a different type of sound. I went with the sawtooth for this app because it worked out the best. Square makes an extremely loud, chiptune-esque sound like an NES which is kind of nice in its own way. Sine and triangle were a bit more subdued but if you don't fade the sound out properly, it makes a really unpleasant kind of cutting sound due to how your ear reacts when a wave gets cut off. Waveforms So for each note, I'd make an oscillator, set the wave type, set the frequency, and start it. Here's an example using 440 , which is a standard tuning for \"A\". const oscillator = audio . createOscillator ( ) oscillator . type = 'sawtooth' oscillator . connect ( gainNode ) oscillator . frequency . value = 440 oscillator . start ( ) If you do that, the note will just play until infinity, so you have to make sure you stop the oscillator when you want the note to end. oscillator . stop ( ) For me, this meant event listeners on the DOM that would listen for a keypress event to see if any button was pressed, and a keyup event to determine when any button was no longer being pressed. In Svelte, that's handled by putting event listeners on svelte:body . < svelte: body on: keypress = \" {handleKeyPressNote} \" on: keyup = \" {handleKeyUpNote} \" on: mouseup = \" {handleClearAllNotes} \" /> So that's really everything there is to the Web Audio API itself when it comes to setting up the app - creating an AudioContext , adding a Gain , and starting/stopping an Oscillator for each note. You could paste this into the console and it'll play a note. You'll have to either refresh or type oscillator.stop() to make it stop. const audio = new ( window . AudioContext || window . webkitAudioContext ) ( ) const gainNode = audio . createGain ( ) gainNode . gain . value = 0.1 gainNode . connect ( audio . destination ) const oscillator = audio . createOscillator ( ) oscillator . type = 'sawtooth' oscillator . connect ( gainNode ) oscillator . frequency . value = 440 oscillator . start ( ) Data Structure I had to figure out how I wanted to lay out the data structure for this application. First of all, if I'm going to be using the Web Audio API with frequencies directly, I had to collect all of them. Frequencies Here's a nice map of notes to frequencies with all 12 notes and 8-9 octaves for each note, so I can use A[4] to get the 440 frequency. tone export const tone = { C : [ 16.35 , 32.7 , 65.41 , 130.81 , 261.63 , 523.25 , 1046.5 , 2093.0 , 4186.01 ] , Db : [ 17.32 , 34.65 , 69.3 , 138.59 , 277.18 , 554.37 , 1108.73 , 2217.46 , 4434.92 ] , D : [ 18.35 , 36.71 , 73.42 , 146.83 , 293.66 , 587.33 , 1174.66 , 2349.32 , 4698.64 ] , Eb : [ 19.45 , 38.89 , 77.78 , 155.56 , 311.13 , 622.25 , 1244.51 , 2489.02 , 4978.03 ] , E : [ 20.6 , 41.2 , 82.41 , 164.81 , 329.63 , 659.26 , 1318.51 , 2637.02 ] , F : [ 21.83 , 43.65 , 87.31 , 174.61 , 349.23 , 698.46 , 1396.91 , 2793.83 ] , Gb : [ 23.12 , 46.25 , 92.5 , 185.0 , 369.99 , 739.99 , 1479.98 , 2959.96 ] , G : [ 24.5 , 49.0 , 98.0 , 196.0 , 392.0 , 783.99 , 1567.98 , 3135.96 ] , Ab : [ 25.96 , 51.91 , 103.83 , 207.65 , 415.3 , 830.61 , 1661.22 , 3322.44 ] , A : [ 27.5 , 55.0 , 110.0 , 220.0 , 440.0 , 880.0 , 1760.0 , 3520.0 ] , Bb : [ 29.14 , 58.27 , 116.54 , 233.08 , 466.16 , 932.33 , 1864.66 , 3729.31 ] , B : [ 30.87 , 61.74 , 123.47 , 246.94 , 493.88 , 987.77 , 1975.53 , 3951.07 ] , } Button layout Figuring out exactly how to arrange all the buttons into a data stucture took a couple of tries for me. The data that had to be captured was: The row on the accordion The column on the accordion The direction of the bellows (push or pull) The name and frequency of the note at that row, column, and direction This means that there are different combinations for all three sets of these things. I decided to make an id that corresponds to each possible combination, such as 1-1-pull being row 1 , column 1 , direction pull . This way, I could create an array that holds the data for any note that is currently being played. If you press the button to reverse the bellows, it would take all the currently playing notes and reverse them, thus changing 1-1-pull and 1-2-pull to 1-1-push and 1-2-push . So ultimately I had an object that contained the data for all three treble rows like so: layout const layout = { one : [ ] , two : [ ] , three : [ ] , } My particular accordion is tuned to FB\u266dEb, meaning the first row is tuned to F, the second row is tuned to B\u266d, and the third row is tuned to E\u266d. The example for the first row looks like this: layout const layout = { one : [ // Pull { id : '1-1-pull' , name : 'D\u266d' , frequency : tone . Db [ 4 ] } , { id : '1-2-pull' , name : 'G' , frequency : tone . G [ 3 ] } , { id : '1-3-pull' , name : 'B\u266d' , frequency : tone . Bb [ 3 ] } , { id : '1-4-pull' , name : 'D' , frequency : tone . D [ 4 ] } , { id : '1-5-pull' , name : 'E' , frequency : tone . E [ 4 ] } , { id : '1-6-pull' , name : 'G' , frequency : tone . G [ 4 ] } , { id : '1-7-pull' , name : 'B\u266d' , frequency : tone . Bb [ 4 ] } , { id : '1-8-pull' , name : 'D' , frequency : tone . D [ 5 ] } , { id : '1-9-pull' , name : 'E' , frequency : tone . E [ 5 ] } , { id : '1-10-pull' , name : 'G' , frequency : tone . G [ 5 ] } , // Push { id : '1-1-push' , name : 'B' , frequency : tone . B [ 3 ] } , { id : '1-2-push' , name : 'F' , frequency : tone . F [ 3 ] } , { id : '1-3-push' , name : 'A' , frequency : tone . A [ 3 ] } , { id : '1-4-push' , name : 'C' , frequency : tone . C [ 4 ] } , { id : '1-5-push' , name : 'F' , frequency : tone . F [ 4 ] } , { id : '1-6-push' , name : 'A' , frequency : tone . A [ 4 ] } , { id : '1-7-push' , name : 'C' , frequency : tone . C [ 5 ] } , { id : '1-8-push' , name : 'F' , frequency : tone . F [ 5 ] } , { id : '1-9-push' , name : 'A' , frequency : tone . A [ 5 ] } , { id : '1-10-push' , name : 'C' , frequency : tone . C [ 6 ] } , ] , two : [ // ...etc ] , } There are notes 1 through 10 in row one, and each one has a name and frequency associated with it. Repeating this for two and three, I now have all 68 notes on the treble side. Keyboard layout Now I had to map each key on the keyboard to a row and column of the accordion. Direction doesn't matter here, since z will correspond to both 01-01-push and 01-01-pull . keyMap export const keyMap = { z : { row : 1 , column : 1 } , x : { row : 1 , column : 2 } , c : { row : 1 , column : 3 } , v : { row : 1 , column : 4 } , b : { row : 1 , column : 5 } , n : { row : 1 , column : 6 } , m : { row : 1 , column : 7 } , ',' : { row : 1 , column : 8 } , '.' : { row : 1 , column : 9 } , '/' : { row : 1 , column : 10 } , a : { row : 2 , column : 1 } , s : { row : 2 , column : 2 } , d : { row : 2 , column : 3 } , f : { row : 2 , column : 4 } , g : { row : 2 , column : 5 } , // ...etc } Now I have all the keys from z to / , a to ' , and w to [ mapped out. Very auspicious that the computer keyboard and accordion keyboard are so similar. Pressing keys, playing notes As you might recall, I have an event listener on the entire page listening for the key press event. Any key press event that happens will go through this function. First, it has to check both lowercase and uppercase keys in case shift or caps lock are pressed, otherwise the keys won't work at all. Then, if you're pressing the button to toggle the bellows (which I made q ), it has to handle that separately. Otherwise, it will check the keyMap, and if one exists, it will find the corresponding id by checking the current direction and getting the row and column from the keymap. handleKeyPressNote let activeButtonIdMap = { } function handleKeyPressNote ( e ) { const key = ` ${ e . key } ` . toLowerCase ( ) || e . key // handle caps lock if ( key === toggleBellows ) { handleToggleBellows ( 'push' ) return } const buttonMapData = keyMap [ key ] if ( buttonMapData ) { const { row , column } = buttonMapData const id = ` ${ row } - ${ column } - ${ direction } ` if ( ! activeButtonIdMap [ id ] ) { const { oscillator } = playTone ( id ) activeButtonIdMap [ id ] = { oscillator , ... buttonIdMap [ id ] } } } } The way I'm tracking each currently playing note is putting them in the activeButtonIdMap object. In Svelte, in order to update a variable you just reassign it, so instead of what you might do in React with useState : React const [ activeButtonIdMap , setActiveButtonIdMap ] = useState ( { } ) const App = ( ) => { function handleKeyPressNote ( ) { setActiveButtonIdMap ( newButtonIdMap ) } } You have to declare it as a let and reassign it: Svelte let activeButtonIdMap = { } function handleKeyPressNote ( ) { activeButtonIdMap = newButtonIdMap } This was mostly easier, except when all I wanted to do was delete a key from the object. As far as I could tell, Svelte only rerenders when a variable is reassigned, so just mutating some value within wasn't enough and I had to clone it, mutate it, the reassign it. This is what I did in the handleKeyUpNote function. handleKeyUpNote function handleKeyUpNote ( e ) { const key = ` ${ e . key } ` . toLowerCase ( ) || e . key if ( key === toggleBellows ) { handleToggleBellows ( 'pull' ) return } const buttonMapData = keyMap [ key ] if ( buttonMapData ) { const { row , column } = buttonMapData const id = ` ${ row } - ${ column } - ${ direction } ` if ( activeButtonIdMap [ id ] ) { const { oscillator } = activeButtonIdMap [ id ] oscillator . stop ( ) // Must be reassigned in Svelte const newActiveButtonIdMap = { ... activeButtonIdMap } delete newActiveButtonIdMap [ id ] activeButtonIdMap = newActiveButtonIdMap } } } Maybe someone knows a better way to delete an item from an object in Svelte, but this is the best I could come up with. I also made a few functions that will play through the scales, starting with F , B\u266d and E\u266d being the main diatonic keys of the accordion, but there are more options. To play the scales, I simply looped through all the ids that correspond to the notes in the scale and used a JavaScript \"sleep\" command of 600ms between each note. Rendering Now that I have all the data structures set up and the JavaScript, I just need to render all the buttons. Svelte has #each blocks for looping logic, so I just looped through the three rows of buttons and rendered a circle for each button. < div class = \" accordion-layout \" > {#each rows as row} < div class = \" row {row} \" > {#each layout[row].filter(({ id }) => id.includes(direction)) as button} < div class = {`circle ${activeButtonIdMap[button.id] ? 'active' : ''} ${direction} `} id = {button.id} on: mousedown = {handleClickNote(button.id)} > {button.name} </ div > {/each} </ div > {/each} </ div > Each circle has its own mousedown event so you can click on them in addition to using the keyboard, but I didn't put the mouseup event on the circle itself. This is because if you move your mouse somewhere else before lifting it up, it won't correctly determine the mouseup and the note will play forever. And of course, I just used plain CSS because I don't usually feel like anything fancier is necessary for small projects. .circle { display : flex ; align-items : center ; justify-content : center ; border-radius : 50% ; height : 60px ; width : 60px ; margin-bottom : 10px ; background : linear-gradient ( to bottom , white , #e7e7e7 ) ; box-shadow : 0px 6px rgba ( 255 , 255 , 255 , 0.4 ) ; color : #222 ; font-weight : 600 ; cursor : pointer ; } .circle:hover { background : white ; box-shadow : 0px 6px rgba ( 255 , 255 , 255 , 0.3 ) ; cursor : pointer ; } .circle.pull:active,"
        ]
    },
    {
        "url": "https://www.taniarascia.com/rss.xml",
        "title": "Tania Rascia | RSS Feed",
        "headings": [],
        "last_updated": "2024-10-23T01:36:18.317543",
        "content": [
            "Tania Rascia | RSS Feed Software engineer and open-source creator. This is my digital garden. https://www.taniarascia.com GatsbyJS Sun, 20 Oct 2024 23:53:38 GMT Creating a Keyboard Shortcut Hook in React (Deep Dive) Recently I needed to add some keyboard shortcuts to an app I was working on. I wrote up some example code and decided to write this article\u2026 https://www.taniarascia.com/keyboard-shortcut-hook-react/ https://www.taniarascia.com/keyboard-shortcut-hook-react/ Sat, 19 Oct 2024 00:00:00 GMT <p>Recently I needed to add some keyboard shortcuts to an app I was working on. I wrote up some example code and decided to write this article about it. It goes into various types of shortcuts, caching, some potential bugs and pitfalls you might encounter, and more. \ud83d\udc47</p>",
            "<p>I made a custom React hook to handle keyboard shortcuts.</p>",
            "<p>I don't usually like using a contrived example like <code class=\"language-text\">count, setCount</code> and just increasing state, but in this case we just care about making sure the shortcut is working and accessing state properly, so I decided to make it simple. Here's a simple React app with a button that increments and displays the count, and an input.</p>",
            "<p>In an attempt to reduce how often this is firing, I can use <a href=\"https://react.dev/reference/react/useCallback\"><code class=\"language-text\">useCallback</code></a> on the <code class=\"language-text\">handleKeyDown</code> function and pass it into the <code class=\"language-text\">useEffect</code> array.</p>",
            "<p><strong>Note</strong>: Going forward, React <a href=\"https://blog.lama.dev/react-19-is-coming/\">shouldn't require so much finagling</a> with <code class=\"language-text\">useCallback</code> and <code class=\"language-text\">useMemo</code>, but since you won't always have the option to use the latest and greatest, it's good to know how to work with this.</p>",
            "<p>I discovered <a href=\"https://devtrium.com/posts/how-keyboard-shortcut#extracting-the-logic-into-a-reusable-custom-hook\">this interesting pattern</a> to create a ref to hold the callback, and use <a href=\"https://react.dev/reference/react/useLayoutEffect\"><code class=\"language-text\">useLayoutEffect</code></a> to to update the ref.</p>",
            "<p>I wrote two posts, one about where to set up <a href=\"/websockets-in-redux\">websockets</a> in a React/Redux application, and my final post for DigitalOcean, which was about the <a href=\"/graphql-type-system\">GraphQL type system</a>. Both bangers.</p>",
            "<p>I learned some stuff that I didn't get around to writing, but most of my coding has been on work projects during work hours. I've <a href=\"/digital-gardening\">written about burnout</a> in the past, and I think it really takes a few years to get over it. Writing thirty-five articles for DigitalOcean in particular burned me out, because I had to write in a very dry style that took the joy of writing out of it for me.</p>",
            "</span></p> hello@taniarascia.com How to Use WebSockets in a Redux Application At some point, you might work on a React/Redux application that requires the use of WebSockets, such as for chat or live updates on a\u2026 https://www.taniarascia.com/websockets-in-redux/ https://www.taniarascia.com/websockets-in-redux/ Wed, 15 Feb 2023 00:00:00 GMT <p>At some point, you might work on a React/Redux application that requires the use of WebSockets, such as for chat or live updates on a dashboard. It might be confusing at first to know where to put the WebSocket state and events relative to React components and Redux state.</p>",
            "<p>You can also see a working implementation of this method used in this minimal <a href=\"https://github.com/taniarascia/chat\">open-source chat application</a> I made with React/Redux, TypeScript, and Socket.io. I opted to just use the browser's WebSocket API for this article, though.</p>",
            "<li><a href=\"/redux-react-guide/\">Understanding Redux</a></li>",
            "<p>Now wherever you decide to call the connect and disconnect functions within the React component will have the desired effect.</p>",
            "<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>",
            "<p>One thing to note with this particular approach is that every tab will open a new WebSocket connection. I've done some poking around but I haven't come to a definitive conclusion on whether or not 1 tab = 1 connection is the best approach, or whether using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker\">SharedWorker API</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API\">BroadcastChannel API</a> is a better approach. I plan to follow up this article with one about sharing a connection across multiple tabs using these APIs.</p> hello@taniarascia.com Understanding the GraphQL Type System Introduction GraphQL is a modern solution for facilitating the communication between a front end and a data source. All of the details and\u2026 https://www.taniarascia.com/graphql-type-system/ https://www.taniarascia.com/graphql-type-system/ Fri, 27 Jan 2023 00:00:00 GMT <h3 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h3>",
            "<p>In this article, you will learn about GraphQL types: the five built-in <a href=\"https://graphql.org/learn/schema/#scalar-types\">scalar</a> types, <a href=\"https://graphql.org/learn/schema/#enumeration-types\">Enums</a>, the <a href=\"https://graphql.org/learn/schema/#lists-and-non-null\">List and Non-Null</a> wrapping types, <a href=\"https://graphql.org/learn/schema/#object-types-and-fields\">Object types</a>, and the abstract <a href=\"https://graphql.org/learn/schema/#interfaces\">Interface</a> and <a href=\"https://graphql.org/learn/schema/#union-types\">Union</a> types that work alongside them. You will review examples for each type and learn how to use them to build a complete GraphQL schema.</p>",
            "<p>To get the most out of this tutorial, you should have:</p>",
            "<p>Using the Fantasy Game API theme from other tutorials in the series, you might make an <code class=\"language-text\">enum</code> for the game characters' <code class=\"language-text\">Job</code> and <code class=\"language-text\">Species</code> with all the values the system will accept for them. An Enum is defined with the <code class=\"language-text\">enum</code> keyword, like so:</p>",
            "<p>In this tutorial, you learned about many of the types that define the <a href=\"https://graphql.org/learn/schema/#type-system\">GraphQL type system</a>. The most fundamental types are the scalar types, which are the values that act as the leaves on the schema tree, and consist of <code class=\"language-text\">Int</code>, <code class=\"language-text\">Float</code>, <code class=\"language-text\">String</code>, <code class=\"language-text\">Boolean</code>, <code class=\"language-text\">ID</code>, and any custom scalar that a GraphQL implementation decides to create. Enums are lists of valid constant values that can be used when you need more control over a response than simply declaring it as a <code class=\"language-text\">String</code>, and are also leaves on the schema tree. List and Non-Null types are known as type modifiers, or wrapping types, and they can define other types as collections or required, respectively. Objects are the branches of the schema tree, and almost everything in a GraphQL schema is a type of Object, including the <code class=\"language-text\">query</code>, <code class=\"language-text\">mutation</code>, and <code class=\"language-text\">subscription</code> entrypoints. Interface and Union types are abstract types that can be helpful in defining Objects.</p>",
            "<p>For further learning, you can practice creating and modifying a GraphQL schema by reading the <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-graphql-api-server-in-node-js\">How to Set Up a GraphQL API Server in Node.js</a> tutorial to have a working GraphQL server environment.</p> hello@taniarascia.com 2022 into 2023 Happy New Year, friends! Time to write another year in review. This will be the seventh time I've done this. Here are all the previous ones\u2026 https://www.taniarascia.com/2022-into-2023/ https://www.taniarascia.com/2022-into-2023/ Mon, 02 Jan 2023 00:00:00 GMT <p>Happy New Year, friends! Time to write another year in review. This will be the seventh time I've done this. Here are all the previous ones:</p>",
            "<h2 id=\"i-wrote-10-articles-11\" style=\"position:relative;\"><a href=\"#i-wrote-10-articles-11\" aria-label=\"i wrote 10 articles 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>I wrote 10 articles (11)</h2>",
            "<li><a href=\"https://www.taniarascia.com/schema-based-form-system/\">Creating a Schema-Based Form System</a> - I really like this article. One of my biggest philosophies when writing code is <a href=\"https://alexkondov.com/tao-of-react/#dont-hardcode-markup\">do not hardcode markup</a>. In this article, I create a form system in which you simply pass data, and the system takes care of all the types and validation and everything else. I've used a system like this to great success in production at multiple companies.</li>",
            "<li><a href=\"https://www.taniarascia.com/graphql-server-node/\">How To Set Up a GraphQL API Server in Node.js</a> - A follow up to <a href=\"https://www.taniarascia.com/introduction-to-graphql/\">An Introduction to GraphQL</a>, this article is more of a practical straightforward tutorial.</li>",
            "<li><a href=\"https://www.taniarascia.com/simplifying-drag-and-drop/\">Simplifying Drag and Drop</a> - A demo I made for working with React + Drag and Drop, and making it a little more pleasant to work with.</li>",
            "<li><a href=\"https://www.taniarascia.com/path-matching-in-react-router/\">Using Path Matching in React Router</a> - An article I made where (spoiler) at the end I realized I didn't need any of it.</li>",
            "<li><a href=\"https://www.taniarascia.com/how-to-test-useeffect-api-call/\">Testing API Calls in useEffect using React Testing Library and Jest</a> - Testing is probably what I'm weakest at, so once I figure something out after struggling with it, I like to write about it.</li>",
            "<li><a href=\"https://www.taniarascia.com/animorphs/\">An Ode to Animorphs</a> - If you're into sci-fi at all, set aside your preconceived notions and give this article a read! I just want to get people into Animorphs lore in 2023.</li>",
            "<p>This year I started writing a bit more about personal stuff - my friend, my childhood Animorphs obsession, burnout. It's been good practice for me to write in a format that isn't just an A-to-B tutorial. It's actually quite a struggle for me to focus and do reseach, which is why I haven't written so much of those types of posts, but we'll see what interests me in 2023.</p>",
            "<p>I think over the last few years, I've become much less of a \"known entity\" in the JavaScript/front end world. I write less, the topics I do write about tend to be more focused and advanced, and I don't participate much in online discussion. Unfortunately, that means my connections with other people dwindle, so I hope in 2023 I can make some more good, genuine, human connections through this website, and in the real world as well.</p>",
            "<p>I don't tend to have a very good memory for the details of most books after reading them, but Animorphs has stayed with me through the years. I'm sad that the TV show was so bad, and I have little hope for any good adaptation, but I find the world created around Animorphs to be fascinating, as well as the feelings that come along with all these stories. I wrote this article to share the backstory of this world with an audience who I don't expect to ever read the books.</p>",
            "<p>And there will always be a soft spot in my soul for a blue alien who falls in love with a human.</p> hello@taniarascia.com Testing API Calls With React Testing Library and Jest Ever since Hooks were released in React, we've been using the  hook to fetch data, whether directly or abstracted away behind Redux Thunks\u2026 https://www.taniarascia.com/how-to-test-useeffect-api-call/ https://www.taniarascia.com/how-to-test-useeffect-api-call/ Fri, 09 Dec 2022 00:00:00 GMT <p>Ever since Hooks were released in React, we've been using the <code class=\"language-text\">useEffect</code> hook to fetch data, whether directly or abstracted away behind Redux Thunks. Figuring out how to test those scenarios can be really frustrating at first, but fortunately it ends up not being very complicated. I'll show you how to test <code class=\"language-text\">useEffect</code> with both successful and failed API calls.</p>",
            "<li><a href=\"/crud-app-in-react-with-hooks/\">React Hooks</a></li>",
            "<li>Set up a very simple React app with testing using Jest and React Testing Library</li>",
            "<p>Feel free to skip this part if you want to get right to the good stuff. As I wrote this article, I decided to start with absolutely nothing to see what the bare minimum I could get away with. I wanted all the config files, setup, and modules to get a React environment up and running that outputs a running application and runs tests, with the most up-to-date versions of everything.</p>",
            "<p>I know Vite and Rome and Rollup and lord knows what else are all the rage right now - I'm just using a simple webpack setup because it still works and I care more about just showing the tests in this article. However, please leave a comment to enlighten me on some of the improvements they bring to the table!</p>",
            "<p>For the application, React + React DOM was necessary, as well as a few Babel packages.</p>",
            "react <span class=\"token punctuation\">\\</span>",
            "react-dom <span class=\"token punctuation\">\\</span>",
            "<p>And for testing, Jest, JSDom, and React Testing Library were necessary. I also brought in a Jest Mock package because it makes life easier.</p>",
            "@testing-library/react <span class=\"token punctuation\">\\</span>",
            "<p>Not too much has changed as far as the React index file goes. The <code class=\"language-text\">ReactDOM</code> import and API is slightly different from the last time I used it, and <code class=\"language-text\">StrictMode</code> seems to be the default mode, so I'm just rendering to the <code class=\"language-text\">#root</code> and pulling in a component.</p>",
            "<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>",
            "<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>",
            "<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>",
            "<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>",
            "<p>Now to get started writing the tests. I opted to put them in <code class=\"language-text\">App.test.js</code>, but of course there are differing opinions on where tests should live (which I discussed a bit in the <a href=\"/react-architecture-directory-structure/\">React Architecture</a> article). I'm just putting them in a <code class=\"language-text\">tests</code> folder for the sake of this example.</p>",
            "<p>To set up, we'll use <code class=\"language-text\">render</code> and <code class=\"language-text\">screen</code> from the <a href=\"https://testing-library.com/docs/react-testing-library/intro/\">React Testing Library</a>. As implied by the names, <code class=\"language-text\">render</code> is responsible for rendering your app to the JS Dom, and <code class=\"language-text\">screen</code> allows you to interact with it and see what's there.</p>",
            "<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>",
            "<p>Well, there you have it. React, React Testing Library, Jest, and Webpack, all working in harmony in (almost) TYOOL 2023. Hopefully this helps someone struggling to figure out how to test <code class=\"language-text\">useEffect</code> or get their environment set up!</p> hello@taniarascia.com Using Path Matching in React Router Recently on a project I was working on I noticed every page was importing  in order to display the unique page title, like this: For an app\u2026 https://www.taniarascia.com/path-matching-in-react-router/ https://www.taniarascia.com/path-matching-in-react-router/ Mon, 05 Dec 2022 00:00:00 GMT <p>Recently on a project I was working on I noticed every page was importing <a href=\"https://www.npmjs.com/package/react-helmet\"><code class=\"language-text\">react-helmet</code></a> in order to display the unique page title, like this:</p>",
            "<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>",
            "<p>React Router has a function called <a href=\"https://v5.reactrouter.com/web/api/matchPath\"><code class=\"language-text\">matchPath</code></a> which can be used to determine if the current path matches a pattern. Here's an example of the API for that:</p>",
            "<p><strong>Note</strong>: I'm using React Router v5 for the examples, it seems that the order of <code class=\"language-text\">pattern</code> and <code class=\"language-text\">pathname</code> have been <a href=\"https://reactrouter.com/en/main/utils/match-path\">reversed in v6</a> for some reason. This seems like the type of move PHP would never make.</p>",
            "<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>",
            "<p>So what's the best part about writing this article? As I got to this point, I realized if you're using a route wrapper anyway, you could just pass the title directly into the <code class=\"language-text\">PrivateRoute</code> and use it as a prop instead of all the unnecessary <code class=\"language-text\">matchPath</code> code.</p>",
            "<p>There are a lot of reasons contributing to less activity from me, but I think one of the major ones is that I've been treating all my blog posts like they have to be precious. They're not posts, I'll think, they're <em>articles</em>. It's not a blog, it's the <em>writing</em> section of my site. It feels weird to have a short, low-effort post about how I'm doing, what I'm doing, or something personal next to a massive diatribe about <a href=\"/asynchronous-javascript-event-loop-callbacks-promises-async-await/\">the event loop</a> or everything you might want to <a href=\"/overview-of-css-concepts/\">know about CSS fundamentals</a>.</p>",
            "<p>Anyway, it's easy for me to feel like I haven't accomplished much. Only seven articles for the whole year? Hardly any creative accomplishments? But then I look back over eight years of several side projects, and mostly consistent writing for both myself and companies in addition to having a full-time job and trying to live a life and be a person, and maybe it's not so bad. Maybe I can be proud of what I've done, and not be afraid to do something small or something new.</p>",
            "<p>So there's just been a lot going on lately, between art, music, creativity, health, fitness, organization, and life. Well, I'd love to hear your thoughts, and I'll be planning on making more little posts going forward.</p> hello@taniarascia.com Simplifying Drag and Drop (Lists and Nested Lists) I always forget how to use any drag and drop library until I have to use it again. Currently, the one I've been working with is , the\u2026 https://www.taniarascia.com/simplifying-drag-and-drop/ https://www.taniarascia.com/simplifying-drag-and-drop/ Mon, 05 Sep 2022 00:00:00 GMT <p>I always forget how to use any drag and drop library until I have to use it again. Currently, the one I've been working with is <a href=\"https://github.com/atlassian/react-beautiful-dnd\"><code class=\"language-text\">react-beautiful-dnd</code></a>, the library created by Atlassian for products such as Jira. I'll admit, I'm not usually the biggest fan of Atlassian products, but it's a good library for working with drag and drop, particularly for usage with lists.</p>",
            "<p>I made two demos for this article. In the first, I create <code class=\"language-text\">Drag</code> and <code class=\"language-text\">Drop</code> components that simplify usage with the <code class=\"language-text\">react-beautiful-dnd</code> library. In the second, I use those components again for a nested drag and drop, in which you can drag categories or drag items between categories.</p>",
            "<li><a href=\"https://codesandbox.io/s/react-beautiful-dnd-example-qcyqki?file=/src/ListComponent.js\">Drag and Drop Demo</a></li>",
            "<li><a href=\"https://codesandbox.io/s/react-beautiful-dnd-nested-example-forked-3o0i1i?file=/src/NestedListComponent.js\">Nested Drag and Drop Demo</a></li>",
            "<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>",
            "<p>As you can see, even in the simplest example it gets nested like 12 levels deep. Good thing we use 2-space indentation in JavaScript! We also have multiple <code class=\"language-text\">provided</code> and <code class=\"language-text\">snapshot</code> to deal with, and when it gets nested you now have four of them, and multiple <code class=\"language-text\">placeholder</code>, so it starts to get really confusing.</p>",
            "<p>Now, instead of all that nonsense from the beginning of the article, you can just use <code class=\"language-text\">Drag</code> and <code class=\"language-text\">Drop</code>:</p>",
            "<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>",
            "<p>You can see the whole thing working together on the <a href=\"https://codesandbox.io/s/react-beautiful-dnd-example-qcyqki?file=/src/ListComponent.js\">demo</a>.</p>",
            "<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>",
            "<p>In <a href=\"https://codesandbox.io/s/react-beautiful-dnd-nested-example-forked-3o0i1i?file=/src/NestedListComponent.js\">the nested drag and drop demo</a>, you can test out dragging between categories, dragging within a category, and dragging a category itself, including all the items it contains.</p>",
            "<p>I always try to see if I can tame my work when it seems like it's getting out of control, and this is just one example. Hope you enjoyed the article and demos!</p> hello@taniarascia.com Memories of Josh I'm just going to write some memories of Josh. The mundane, everyday things. The stuff I'll slowly, inevitably forget, because I'm not sure\u2026 https://www.taniarascia.com/josh/ https://www.taniarascia.com/josh/ Tue, 02 Aug 2022 00:00:00 GMT <p>I'm just going to write some memories of Josh. The mundane, everyday things. The stuff I'll slowly, inevitably forget, because I'm not sure what else to write but I want to at least have a place where I can remember a bit. And maybe a place to share a bit, so others can know what I knew and it lasts a little longer.</p>",
            "<p>Do you like it? Hate it? I had it sitting there, half way done, for quite a while, and felt like I couldn't make any posts while it was pending, so I finished it up while I was just laying here at home sick with Covid. Now I have some ideas for posts to write and I can do that without being distracted.</p> hello@taniarascia.com How To Set Up a GraphQL API Server in Node.js This article was originally written for DigitalOcean. Introduction In An Introduction to GraphQL, you learned that GraphQL is an open-source\u2026 https://www.taniarascia.com/graphql-server-node/ https://www.taniarascia.com/graphql-server-node/ Mon, 13 Jun 2022 00:00:00 GMT <p><em>This article was originally written for <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-graphql-api-server-in-node-js\">DigitalOcean</a></em>.</p>",
            "<p>In <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-graphql\">An Introduction to GraphQL</a>, you learned that GraphQL is an open-source query language and runtime for APIs created to solve issues that are often experienced with traditional REST API systems.</p>",
            "<p>In this tutorial, you will make an Express API server in <a href=\"https://nodejs.org/en/\">Node.js</a> that serves up a GraphQL endpoint. You will also build a GraphQL schema based on the GraphQL type system, including operations, such as queries and mutations, and resolver functions to generate responses for any requests. You will also use the <a href=\"https://github.com/graphql/graphiql\">GraphiQL integrated development environment (IDE)</a> to explore and debug your schema and query the GraphQL API from a client.</p>",
            "<p>To follow this tutorial, you will need:</p>",
            "<li>A local Node.js environment, which you can set up by following the <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-install-node-js-and-create-a-local-development-environment\">How To Install Node.js and Create a Local Development Environment</a> tutorial for your operating system and distribution.</li>",
            "<li>An understanding of the fundamental concepts of GraphQL, which you can find in the tutorial, <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-graphql\">An Introduction to GraphQL</a>.</li>",
            "<li>A basic knowledge of HTML and JavaScript, which you can gain from the series, <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-build-a-website-with-html\">How To Build a Website With HTML</a> and <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-javascript\">How To Code in JavaScript</a>.</li>",
            "<li><code class=\"language-text\">graphql</code>: the JavaScript reference implementation for GraphQL.</li>",
            "<p><strong>Note</strong>: Using a real data store is outside of the scope of this tutorial. Accessing and manipulating data in a GraphQL server is performed through the reducers. This can be done by manually connecting to the database, through an ORM like <a href=\"https://www.prisma.io/graphql\">Prisma</a>. <a href=\"https://graphql.org/learn/execution/#asynchronous-resolvers\">Asynchronous resolvers</a> make this possible through the <code class=\"language-text\">context</code> of a resolver. For the rest of this tutorial, we will use the <code class=\"language-text\">data</code> variable to represent datastore values.</p>",
            "<p>The ability to query only the fields you need is one of the powerful aspects of GraphQL and is what makes it a <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-graphql#client-driven\">client-driven</a> language.</p>",
            "<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">",
            "<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">",
            "<p>In this tutorial, you made a GraphQL API server using the Express framework in Node.js. The GraphQL server consists of a single <code class=\"language-text\">/graphql</code> endpoint that can handle incoming requests to query the data store. Your API had a schema with the base <code class=\"language-text\">Query</code> type, a custom <code class=\"language-text\">Warrior</code> type, and a resolver to fetch the proper data for those types.</p>",
            "<p>Hopefully, this article helped demystify GraphQL and opens up new ideas and possibilities of what can be accomplished with GraphQL. Many tools exist that can help with the more complex aspects of working with GraphQL, such as authentication, security, and caching, but learning how to set up an API server in the simplest way possible should help you understand the essentials of GraphQL.</p>",
            "<p>This tutorial is part of our <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-manage-data-with-graphql\">How To Manage Data with GraphQL</a> series, which covers the basics of using GraphQL.</p> hello@taniarascia.com Building a Musical Instrument with the Web Audio API and Svelte It's been a while since I've written anything due to some personal concerns that I might write about later, but don't worry, I'm still\u2026 https://www.taniarascia.com/musical-instrument-web-audio-api/ https://www.taniarascia.com/musical-instrument-web-audio-api/ Sun, 01 May 2022 00:00:00 GMT <p>It's been a while since I've written anything due to some personal concerns that I might write about later, but don't worry, I'm still around and I'm still coding. Recently, I went to Texas and bought a three-row diatonic button accordion. Diatonic accordions are popular for a lot of different types of folk music, which is generally learned by ear. This is good for me, because I don't really know how to read music anyway.</p>",
            "<p>I decided to make this app in Svelte, because I've used React and Vue professionally but have no experience with Svelte whatsoever and wanted to know what everyone loves about it.</p>",
            "<p>KeyboardAccordion.com only has one dependency, and that's Svelte. Everything else is done using plain JavaScript and the built-in browser <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API\">Web Audio API</a>. I'd never really used the Web Audio API before, so I figured out what I needed to to get this working.</p>",
            "<p>I'm using waves with the Audio API and not using any sort of audio sample, and I used the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode\"><code class=\"language-text\">OscillatorNode</code></a> to make each note. There are various types of waves you can use - <code class=\"language-text\">square</code>, <code class=\"language-text\">triangle</code>, <code class=\"language-text\">sine</code>, or <code class=\"language-text\">sawtooth</code>, which all have a different type of sound. I went with the sawtooth for this app because it worked out the best. Square makes an extremely loud, chiptune-esque sound like an NES which is kind of nice in its own way. Sine and triangle were a bit more subdued but if you don't fade the sound out properly, it makes a really unpleasant kind of cutting sound due to how your ear reacts when a wave gets cut off.</p>",
            "<p>The way I'm tracking each currently playing note is putting them in the <code class=\"language-text\">activeButtonIdMap</code> object. In Svelte, in order to update a variable you just reassign it, so instead of what you might do in React with <code class=\"language-text\">useState</code>:</p>",
            "<p>I also made a few functions that will play through the scales, starting with <code class=\"language-text\">F</code>, <code class=\"language-text\">B\u266d</code> and <code class=\"language-text\">E\u266d</code> being the main diatonic keys of the accordion, but there are more options. To play the scales, I simply looped through all the ids that correspond to the notes in the scale and used a JavaScript \"sleep\" command of 600ms between each note.</p>",
            "<p>Now that I have all the data structures set up and the JavaScript, I just need to render all the buttons. Svelte has <a href=\"https://svelte.dev/tutorial/each-blocks\"><code class=\"language-text\">#each</code></a> blocks for looping logic, so I just looped through the three rows of buttons and rendered a circle for each button.</p>",
            "<p>This app was fun to make, I learned how to use both Svelte and the Web Audio API, and it's helping me and hopefully some other afficionados to understand the squeezebox a little better. Maybe it'll inspire you to build your own little online instrument, or make an app for one of your hobbies. The best part about coding is that you can make anything you want!</p> hello@taniarascia.com Creating a Schema-Based Form System View the Source or Demo for the schema-based form system described in this article. Working with forms on the front end is tedious and\u2026 https://www.taniarascia.com/schema-based-form-system/ https://www.taniarascia.com/schema-based-form-system/ Mon, 31 Jan 2022 00:00:00 GMT <blockquote>",
            "<p>View the <a href=\"https://github.com/taniarascia/react-advanced-form\">Source</a> or <a href=\"https://taniarascia.github.io/react-advanced-form/\">Demo</a> for the schema-based form system described in this article.</p>",
            "<p>I made an example <a href=\"https://github.com/taniarascia/react-advanced-form\">GitHub repo</a> and <a href=\"https://taniarascia.github.io/react-advanced-form/\">demo</a> of such a system. This follows the rule from the Tao of React - <a href=\"https://alexkondov.com/tao-of-react/#dont-hardcode-markup\">Do not hardcode markup</a>.</p>",
            "<p>Although I'm not using a UI framework in the example to handle form component styles, I am using a library to handle values and form submission - <a href=\"https://formik.org/\">Formik</a>. It's an extremely widely-used tool for working with forms that takes care of much of the annoying stuff, while still being simple under the hood and not bringing in theb complexity of Redux, MobX, observables, or anything else - just simple React state.</p>",
            "<p>In this article, won't go into how to create all the individual form components (you can just <a href=\"https://github.com/taniarascia/react-advanced-form\">view the source</a>), I'll just focus on one, but for every type of form component that you want to include in the form system, make a file for it.</p>",
            "<span class=\"token comment\">// eslint-disable-next-line react-hooks/exhaustive-deps</span>",
            "<p>So there you have it, with the combined power of <a href=\"https://formik.org/\">Formik</a> and <a href=\"https://github.com/jquense/yup\">Yup</a>, you can build an abstraction to drastically reduce the amount of code you have to write overall to work with forms. The concepts outlined in this article can be extended to any component library...Material UI, Ant Design, Blueprint, Semantic UI, or just plain HTML and CSS as seen here.</p>",
            "<p>Hopefully this article helped you think more about defining data upfront and passing it into components as opposed to hard-coding markup and manually handling form state. There will always be some situations an abstraction doesn't handle well or at all, and in those cases you might need to manually work with your form, but a system like <code class=\"language-text\">AdvancedForm</code> can help in many common situations.</p>",
            "<p>View the <a href=\"https://github.com/taniarascia/react-advanced-form\">Source</a> or <a href=\"https://taniarascia.github.io/react-advanced-form/\">Demo</a> for the schema-based form system described in this article. Thanks for reading!</p> hello@taniarascia.com 2021 into 2022 Wow, here we are, the sixth installment in the New Year series of posts.  This year feels almost like a lost weekend. Aside from a few small\u2026 https://www.taniarascia.com/2021-into-2022/ https://www.taniarascia.com/2021-into-2022/ Sat, 01 Jan 2022 00:00:00 GMT <p>Wow, here we are, the sixth installment in the <a href=\"/tags/new-year\">New Year series</a> of posts.</p>",
            "<h3 id=\"i-wrote-7-technical-articles\" style=\"position:relative;\"><a href=\"#i-wrote-7-technical-articles\" aria-label=\"i wrote 7 technical articles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>I wrote 7 technical articles</h3>",
            "<p>I haven't written as much this year as in previous years. However, I'm proud of the quality of the articles I've written.</p>",
            "<p>I ended up writing about one technical article every two months. The articles I'm writing are more focused and specific, so I think they reach a smaller audience than before. I hoped that I might write more non-technical articles by adding a new section, but <a href=\"/notes/behind-the-tutorials\">I only wrote one</a> this year.</p>",
            "<p><a href=\"/integration-testing-with-jest-typescript-objection/\">Integration Tests with Jest, Supertest, Knex, and Objection in TypeScript</a> - this article is a little misleading, in that it's a lot more useful and interesting than the title suggests, at least to me. Testing is kind of a boring topic, but I was proud of getting the full integration test suite set up for a TypeScript API. The more interesting part is the TypeScript API itself, using Express, Knex, and Objection ORM.</p>",
            "<p><a href=\"/react-context-api-hooks/\">How and When to Use Context in React with Hooks</a> - I often write articles for my own reference, and the original article I wrote on React Context was out of date, since it relied on class components. I wrote this one to give a real world example of why you might use context, when Redux might be better, and how to use it.</p>",
            "<p><a href=\"/oauth-pkce-authorization/\">Using OAuth with PKCE Authorization Flow (Proof Key for Code Exchange)</a> - the most up-to-date secure way to handle OAuth authentication for a web or mobile app is using the PKCE flow. This article eplains the different flows, and how to set up the code challenge/code verifier in JavaScript for PKCE.</p>",
            "<p><a href=\"/react-architecture-directory-structure/\">React Architecture: How to Structure and Organize a React Application</a> - React architecture is a topic that's surprisingly hard to find good resources on. In the past I set it up the way I had seen other people do it, but when I discovered a domain-based approach, I decided to write about it to help anyone in the future looking for a better way.</p>",
            "<p><a href=\"/sokoban-game/\">Writing a Sokoban Puzzle Game in JavaScript</a> - I had fun using what I learned on the Chip-8 project to make another little puzzle game in JavaScript. I messed it up by allowing you to push multiple blocks at once (which was actually the hardest part to program) but I left it in.</p>",
            "<p><a href=\"/front-end-tables-sort-filter-paginate/\">Front End Tables: Sorting, Filtering, and Pagination</a> - every job I've had in development has involved tables, usually with sorting, filtering, and pagination on them. Previously I wrote an article about adding all those features to a back end API, and this article goes into doing it on the front end. There are so many (usually outdated) libraries for dealing with tables, but depending on your needs, it's often much more effective to build it yourself.</p>",
            "<p><a href=\"/introduction-to-graphql/\">An Introduction to GraphQL</a> - my only DigitalOcean article of the year, this is the first article about GraphQL. GraphQL is another one of those things that's scary until you delve into the core of it and strip away all the libraries and implementations (such as Apollo). I'm planning on writing more on the topic.</p>",
            "<p>Well, that's it for now! Happy New Year!</p> hello@taniarascia.com An Introduction to GraphQL This article was originally written for DigitalOcean. Introduction As web and mobile applications become more mature and complex, software\u2026 https://www.taniarascia.com/introduction-to-graphql/ https://www.taniarascia.com/introduction-to-graphql/ Wed, 17 Nov 2021 00:00:00 GMT <p><em>This article was originally written for <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-graphql\">DigitalOcean</a></em>.</p>",
            "<p>In this article, you will learn what GraphQL is, familiarize yourself with important terminology and concepts of GraphQL, and discover how the GraphQL specification compares with the REST architectural style.</p>",
            "<p>While GraphQL is not an interchangeable concept with REST, they both describe different ways to manage communication between a client and a server. In this article, you learned what GraphQL is, key differences and similarities between GraphQL and REST, and how a GraphQL server exposes data to a client.</p> hello@taniarascia.com Behind the Tutorials Despite the fact that I've been consistently writing on here for six years now, I've said very little about myself. The writing has been\u2026 https://www.taniarascia.com/behind-the-tutorials/ https://www.taniarascia.com/behind-the-tutorials/ Sat, 23 Oct 2021 00:00:00 GMT <p>Despite the fact that I've been consistently writing on here for six years now, I've said very little about myself. The writing has been mostly dry, and very technical.</p>",
            "<p><a href=\"https://www.youtube.com/watch?v=1HnOFwqpLRQ\">Here's an ABBA song for the occasion</a>. It basically sums it up.</p> hello@taniarascia.com How to Sort, Filter, and Paginate a Table with JavaScript One thing I've had to do at every job I've had is implement a table on the front end of an application that has sorting, filtering, and\u2026 https://www.taniarascia.com/front-end-tables-sort-filter-paginate/ https://www.taniarascia.com/front-end-tables-sort-filter-paginate/ Fri, 22 Oct 2021 00:00:00 GMT <p>One thing I've had to do at every job I've had is implement a table on the front end of an application that has sorting, filtering, and pagination.</p>",
            "<p>Initially, I would look up libraries like <a href=\"https://github.com/tannerlinsley/react-table\">react-table</a> or <a href=\"https://ant.design/components/table/\">Ant Design table</a> and try to ensure they had everything I needed. And that's certainly a viable option, but often the libraries don't match the design and needs of your particular case, and have a lot of features you don't need. Sometimes it's a better option to implement it yourself to have complete flexibility over functionality and design.</p>",
            "<p>So I'm going to demonstrate how to do it using React (but conceptually it can apply to any framework or non-framework).</p>",
            "<li>Knowledge of JavaScript, React</li>",
            "<p>Make a table in React that implements:</p>",
            "<p>I prefer to always use brackets and the <code class=\"language-text\">return</code> statement when mapping in React. It makes debugging and editing a lot easier than with implicit returns.</p>",
            "<p>Success! We have a table in React implementing sorting, filtering, and pagination without using any libraries. It's ugly as sin but since we know how it all works, we know how to improve it, make it harder, better, faster, stronger.</p>",
            "<p>I'm excited about this design, because the site is more interactive, more personalized, and yet familiar. And I just had fun doing it. Hopefully you like it, too!</p> hello@taniarascia.com Writing a Sokoban Puzzle Game in JavaScript So the other day, I made an implementation of a Sokoban puzzle game in JavaScript. Here's the source code and here's the demo. The game\u2026 https://www.taniarascia.com/sokoban-game/ https://www.taniarascia.com/sokoban-game/ Mon, 26 Jul 2021 00:00:00 GMT <p>So the other day, I made an implementation of a <a href=\"https://en.wikipedia.org/wiki/Sokoban\">Sokoban</a> puzzle game in JavaScript.</p>",
            "<p>Hope you enjoyed reading about this and feel inspired to make your own little games and projects.</p> hello@taniarascia.com How to Structure and Organize a React Application There is no consensus on the right way to organize a React application. React gives you a lot of freedom, but with that freedom comes the\u2026 https://www.taniarascia.com/react-architecture-directory-structure/ https://www.taniarascia.com/react-architecture-directory-structure/ Wed, 23 Jun 2021 00:00:00 GMT <p>There is no consensus on the right way to organize a React application. React gives you a lot of freedom, but with that freedom comes the responsibility of deciding on your own architecture. Often the case is that whoever sets up the application in the beginning throws almost everything in a <code class=\"language-text\">components</code> folder, or maybe <code class=\"language-text\">components</code> and <code class=\"language-text\">containers</code> if they used Redux, but I propose there's a better way. I like to be deliberate about how I organize my applications so they're easy to use, understand, and extend.</p>",
            "<p>I'm going to show you what I consider to be an intuitive and scalable system for large-scale production React applications. The main concept I think is important is to make the architecture focused on <strong>feature</strong> as opposed to <strong>type</strong>, organizing only shared components on a global level and modularized all the other related entities together in the localized view.</p>",
            "<p>Since this article will be opinionated, I'll make some assumptions about what technology the project will be using:</p>",
            "<li><strong>Testing</strong> - <a href=\"https://jestjs.io/\">Jest</a>, <a href=\"https://testing-library.com/docs/react-testing-library/intro/\">React Testing Library</a></li>",
            "<p>Everything here can still apply if you're using vanilla Redux instead of Redux Toolkit. I would recommend <a href=\"https://redux.js.org/tutorials/essentials/part-2-app-structure#redux-slices\">setting up your Redux as feature slices</a> either way.</p>",
            "<li><a href=\"#services\">services</a> - JavaScript modules</li>",
            "<li><strong>Component.js</strong> - The actual React component</li>",
            "<p>The <code class=\"language-text\">services</code> directory is less essential than <code class=\"language-text\">components</code>, but if you're making a plain JavaScript module that the rest of the application is using, it can be handy. A common contrived example is a LocalStorage module, which might look like this:</p>",
            "<p>This is my proposal for a sytem for React organization that scales well for a large production app, and handles testing and styling as well as keeping everything together in a feature focused way. It's more nested than the traditional structure of everything being in <code class=\"language-text\">components</code> and <code class=\"language-text\">containers</code>, but that system is a bit more dated due to Redux being much easier to implement with Hooks, and \"smart\" containers and \"dumb\" components no longer being necessary.</p>",
            "<p>For a server-side web app, like a Python Django app, Ruby on Rails app, PHP Laravel, or Node/Express serving React, the <strong>Authorization Code</strong> flow is used, which still uses a client id and client secret on the server side, but the user needs to authorize via the third-party first. This is performed using both an <code class=\"language-text\">/authorize</code> and <code class=\"language-text\">/token</code> endpoints.</p>",
            "<p>At what point you call this function is up to you - it might happen at the click of a button, or automatically if a user is deemed to not be authenticated when they land on the app. In a React app it would probably be in the <code class=\"language-text\">useEffect()</code>.</p>",
            "<p>And there you have it - the two steps to authenticate using PKCE. First, build a URL for <code class=\"language-text\">/authorize</code> on the authorization server and redirect the user to it, then POST to the <code class=\"language-text\">/token</code> endpoint on the redirect. PKCE is currently the most secure authentication system that I know of for a front-end only web or mobile app. Hopefully this helps you understand and implement PKCE in your app!</p> hello@taniarascia.com How and When to Use Context in React with Hooks A while ago, I wrote an article about Using Context API in React. However, most of my examples on that page used Class components, , and\u2026 https://www.taniarascia.com/react-context-api-hooks/ https://www.taniarascia.com/react-context-api-hooks/ Tue, 15 Jun 2021 00:00:00 GMT <p>A while ago, I wrote an article about <a href=\"/using-context-api-in-react/\">Using Context API in React</a>. However, most of my examples on that page used Class components, <code class=\"language-text\">static contextType</code>, and <code class=\"language-text\">Consumer</code>, which is a legacy way of dealing with Context and in TYOOL 2021 we want nice, clean, functional components. I needed to use Context for something recently after quite a while, and I wanted a more succinct explanation using only modern syntax. I decided I'd write a little follow up here for a realistic use of Context.</p>",
            "<p><a href=\"https://reactjs.org/docs/context.html\">Context</a> allows you to pass data across any number of React components, regardless of nesting.</p>",
            "<p>In a very small application, you might be able to get away with just using Context for most of your global data storage needs, but in a large-scale production environment, you're likely using <a href=\"/redux-react-guide/\">Redux</a> for global state management. Redux still provides improved performance, improved debugging capabilities, architectural consistency, the ability to use middleware, and more. Therefore, Context is not a replacement for a proper global state management system.</p>",
            "<p>So I'm going to provide a summary of just how to set up Context with modern React syntax, then go into an example of using Context and how it might work.</p>",
            "<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> createContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>",
            "<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>",
            "<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>",
            "<p>You use <code class=\"language-text\">createContext()</code> to create a Context, which also creates a <code class=\"language-text\">Provider</code> and a <code class=\"language-text\">Consumer</code>, but you only need the <code class=\"language-text\">Provider</code>, which will allow any React element below it in the tree to use the Context.</p>",
            "<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> createContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>",
            "<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>",
            "<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>",
            "<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>",
            "<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>",
            "<p>This article will help if:</p>",
            "<p>This is not meant to be a complete tutorial that gives step-by-step instructions for every detail, but will give you the big picture of setting up the TypeScript API with Objection and making a test suite for it.</p>",
            "<p>It's fun for me to look over those posts - I can see a zoomed out view of what I did and what I was focused on throughout each year. I wrote hundreds of articles, recorded the occasional song, made a lot of commits, built a few open-source projects, had a break up or three, made a bit of art, traveled all over Europe, and learned a ton.</p>",
            "<p>I've spent so long focusing on being productive, feeling like I have to be productive all the time. I made it a point to never make promises or obligations about my creative output, but I've always tried to put out a consistent stream of quality material - at least a good tutorial once a month for the past five years or so. I felt good and productive if I produced something for the web and learned something new and wrote about it.</p>",
            "<p>But that's five years of working 8 hours every day on code during my day job, and often spending the rest of my evening working on articles for DigitalOcean, for this website, for other publications, making my own open-source projects, talking about code on Twitter, and feeling like I should accept or consider all the speaking engagements and podcast requests and anything else that comes my way, because if I start turning them all down, the momentum I'm creating will disappear. (Fortunately I've usually kept <a href=\"https://sive.rs/hellyeah\">\u201cHELL YEAH!\u201d or \u201cno.\u201d</a> by Derek Sivers in mind when responding to things.)</p>",
            "<p>It started getting to the point where I was dreading code, dreading speaking engagements, and the last thing I wanted to do was scroll through the Twitter or Reddit feed and read little arguments about this or that framework intermixed with political outrage, or maintain dozens of open-source GitHub repositories for tutorials that are slowly getting out of date. Not to mention all the emails and comments that would come in, which could be anything from a nice email from a thoughtful person who would become a new friend, to people emailing me their coding questions as if I'm Google, people attempting to shut down or critique every aspect of an article, and of course plenty of \"are you single?\" and \"you're such a good coder for a girl\" type emails, or worse things I'd rather not mention.</p>",
            "<p>I found the latest three articles on The Raptitude interesting and helpful, so I'll share them with you.</p>",
            "<p><a href=\"https://takenote.dev/\">TakeNote</a> is my biggest project yet, and I wrote all about it <a href=\"https://www.taniarascia.com/building-takenote/\">here</a>. It's a web-based note-taking app for developers that looks like an IDE and syncs to GitHub. It uses TypeScript, Node, Express, React, Redux, Codemirror, and several other awesome open-source projects. I ultimately decided not to ship it, but I did finish it, and I'm proud of it.</p>",
            "<h3 id=\"i-wrote-21-articles\" style=\"position:relative;\"><a href=\"#i-wrote-21-articles\" aria-label=\"i wrote 21 articles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>I wrote 21 articles</h3>",
            "<p>I did two project write-ups - TakeNote and Chip8.js, several articles on JavaScript for DigitalOcean's fundamentals series, and covered few big concepts like Redux, Docker, and webpack. Honestly, I got a lot more done than I remembered, which is one of those reasons I like to make these posts. It's easy to forget all that you've done over an entire year.</p>",
            "<li><a href=\"/continuous-integration-pipeline-docker/\">Docker Tutorial: Create a CI/CD Pipeline</a></li>",
            "<li><a href=\"/redux-react-guide/\">Redux Tutorial: An Overview and Walkthrough</a></li>",
            "<li><a href=\"/writing-an-emulator-in-javascript-chip8/\">Writing an Emulator in JavaScript (Chip-8)</a></li>",
            "<li><a href=\"/asynchronous-javascript-event-loop-callbacks-promises-async-await/\">Understanding the Event Loop, Callbacks, Promises, and Async/Await in JavaScript</a></li>",
            "<li><a href=\"/how-to-use-webpack/\">webpack Tutorial: How to Set Up webpack 5 From Scratch</a></li>",
            "<p>I didn't learn most of the things I wanted to this year. Data structures and algorithms have been on the back burner for a few years now, and I never seem to be able to focus on it. I think the best article I wrote this year is <a href=\"https://www.taniarascia.com/asynchronous-javascript-event-loop-callbacks-promises-async-await/\">Understanding the Event Loop, Callbacks, Promises, and Async/Await in JavaScript</a>, which is a deep dive on how JavaScript and the event loop work under the hood. This article was something I wanted to write and understand for a long time, so I'm glad I finally did. I still want to learn computer science fundamentals, so next time I decide to sit down and try to learn something coding related that's probably what I'll do.</p>",
            "<p>I wrote several articles that were the result of things I learned while writing this app.</p>",
            "<p>I wrote <a href=\"https://www.taniarascia.com/full-stack-cookies-localstorage-react-express/\">Client-side Authentication the Right Way (Cookies vs. Local Storage) </a>, which details how to make a secure authentication set up using HTTP Only, Secure, Same-Site cookies with an Express server and a front end. I also learned the OAuth flow, and how easy it is to set up instead of using some third-party system like Auth0, which deceptively sounds similar to OAuth and can easily trick people into thinking they need to use it.</p>",
            "<p>Before I started this project, I mostly avoided Redux, preferring to use Context in React for projects at work. As a result of setting up Redux Toolkit and Redux sagas for this project, I wrote <a href=\"https://www.taniarascia.com/redux-react-guide/\">An Overview and Walkthrough of Redux</a> which builds demo applications of projects using vanilla Redux and Redux Toolkit. After using Redux, I realized I preferred it greatly to using Context. It does add a lot of boilerplate upfront, but the limitations of Context caused issues in previous projects as they grew.</p>",
            "<p>I chose to write TakeNote in <strong>TypeScript</strong>. I had a little bit of experience here and there with TypeScript, but I wanted to make a complete, full-stack app to see if it lives up to the hype. It did get a bit annoying with various React and web types - or using some third-party dependencies, but I did feel confident that a lot of little bugs were prevented by using the strictest settings.</p>",
            "<h3 id=\"front-end-react--redux\" style=\"position:relative;\"><a href=\"#front-end-react--redux\" aria-label=\"front end react  redux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Front end (React + Redux)</h3>",
            "<p>I used <strong>React</strong> and <strong>Redux</strong> for the front end. It was either that, or Vue and Vuex, and although I've used Vue in the past for work, I just feel faster and more productive with React. I used simple <strong>SCSS</strong> for the styles instead of a CSS-in-JS solution, just because it's easier for me and simpler in my opinion.</p>",
            "<p>Lately, I've wanted to do some extracurricular projects outside of programming and writing about JavaScript. Building a PC seemed like a fun project, as I'd learn a bit about how a computer works under the hood, it's inspired me to set up a sweet <a href=\"https://www.reddit.com/r/battlestations/\">battlestation</a> and get some decent gear, and I'd have a much better machine for when I do play games or if I want to do anything with 3D modeling. So I went ahead and built one.</p>",
            "<p>Disclaimer: I don't know you, so I don't know if none, some, or all of what I write here will apply to you or help you. Just as that first article I read may have worked for someone but ultimately was not the right approach for me. Take all advice with a grain of salt. I'm just sharing what I actually do.</p>",
            "<li>One to keep all my personal notes, memories, articles, and lists (<a href=\"https://bear.app/\">Bear</a>)</li>",
            "<p>By the way, there's nothing about writing in these systems. I don't set any sort of tasks, habits, goals, or systems for writing articles. I just write when I feel like it. People sometimes ask me how I've written so many articles, imagining that I'm so productive and doing it all the time. Honestly, I sit down like one or two days a month to write. Do that over 5 years with anything and you'll have a lot of evidence of your work.</p>"
        ]
    },
    {
        "url": "https://www.taniarascia.com/design-for-developers/",
        "title": "Design for Developers: Specific Steps to Improve Your Website Design | Tania Rascia's Personal Website",
        "headings": [
            "Design for Developers: Specific Steps to Improve Your Website Design",
            "Finished Product",
            "Design Guidelines",
            "Step Zero: HTML",
            "Structure layout first",
            "Use More Padding",
            "Use more line height on body than headings",
            "Do not use pure black",
            "Use fewer fonts, or be consistent with fonts",
            "Use fewer colors, or complementary colors",
            "Be consistent with borders and corners",
            "Fine details, transitions and animations last",
            "Don't go overboard with drop shadows, gradients, or animations",
            "Play around with it a bit",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:37.944404",
        "content": [
            "Design for Developers: Specific Steps to Improve Your Website Design | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me Design for Developers: Specific Steps to Improve Your Website Design I've noticed a lot of web developers struggle with design; they think they don't have a natural talent for design and knowing what looks good, and everything they create from scratch is doomed to look amateur and unprofessional . To combat this issue, developers often use CSS frameworks like Bootstrap and Foundation , that come with a set of sensible defaults and themes that can be added on for a sense of a customized look. There's no shame in turning to one of these solutions, and certainly they might be mandatory to use at some companies for consistency. If you'd just like to learn how to get started with Bootstrap, I'd recommend What is Bootstrap and How Do I Use It? . However, you might be a developer that wants to improve his or her own design, or build your own custom portfolio with a unique style or custom CSS. In this case, you probably find it hard to find any sort of resource with clear, concrete tips to improve your design. Sure, you'll find articles at the top of the Google results that tell you to \"study design theory\" or \"learn to identify good design\", but these tips are vague and don't help your design now . So I've decided to list a few things I always watch out for, specific to web design, that you can use to critique your own site right now and improve it . We will be creating a website element (a card) from scratch, using the design principles I list here, step by step . Prerequisites Basic knowledge of HTML and CSS. Goals Develop a card element from scratch using the each of the design guidelines we learn here. Learn specific actions you can take to improve your design and make it look more professional. Apply those guidelines to our finished element to show how we can customize and create totally different, creative designs with a few code changes. Finished Product Here is what we will start with. Here is what we will end up with. You can view a working, responsive, coded version of it here . Why Prague and Chicago? Because I'm from Chicago, and I started writing this article in Prague. (In Munich now...we'll see where I am when I finish). View Demo View GitHub Repo Note that the start is not actually bad design, but unstyled. It's easier to make a good design from nothing, than improve a bad one. However, all these guidelines can be used one-by-one to check for problems in your design. Design Guidelines Structure layout first Use more padding Use more line height on body than headings Do not use pure black Use fewer fonts, or be consistent with fonts Use fewer colors, or complementary colors Be consistent with borders and corners Fine details, transitions and animations last Don\u2019t go overboard with drop shadows, gradients, or animations So, let's begin! Step Zero: HTML First, I'm going to set up the HTML here and the rest of the article will only focus on CSS. A basic overview of how the card is structured is here. (I'm leaving out the image as it's not the focus. We'll just add it at the end.) index.html < div class = \" card \" > < div class = \" card-content \" > <!-- title and content will go here --> < div class = \" card-details \" > <!-- read article, comments, and likes will go here --> </ div > </ div > </ div > Here is the actual, final HTML for one card. It's inside a container to keep the shape, but there are no other styles, normalizers, resets, or any CSS applied yet. index.html < div class = \" card \" > < div class = \" card-content \" > < h1 > The Second City </ h1 > < div class = \" subtitle \" > City of Big Shoulders </ div > < p > Chicago is the home of the blues and the truth of jazz, the heart of comedy and the idea of",
            "found in other cities of its size. </ p > < div class = \" card-details \" > < div class = \" card-details-inner \" > < div class = \" read-more \" > < a class = \" button \" href = \" https://en.wikivoyage.org/wiki/Chicago \" > Read Article </ a > </ div > < div class = \" options \" > < div class = \" comments \" > < a href = \" #! \" > < i class = \" fa fa-comments-o \" > </ i > 16 comments </ a > </ div > < div class = \" likes \" > < a href = \" #! \" > < i class = \" fa fa-heart-o \" > </ i > 322 likes </ a > </ div > </ div > </ div > </ div > </ div > </ div > Here is where we begin. There's going to be a typo on this throughout the entire thing, so do me the favor of ignoring it. Structure layout first Before doing any design, you should figure out structure of the layout first. This means anything that uses flex , float , position , etc, without letting style and design get in the way. Since this article focuses on the design, I won't go into much detail about how flex and absolute positioning work, but I'll explain what's happening. Here is our code, in scss. .card { flex : 1 1 50% ; position : relative ; border : 1px solid #efefef ; } .card-content { padding : 0 0 30px ; } .card-details { position : absolute ; width : 100% ; bottom : 0 ; left : 0 ; } .card-details-inner { display : flex ; justify-content : space-between ; align-items : center ; } Okay, it looks like a whole lot of code for almost no change whatsoever. But here's what's happening: Each card will be equal in size, but not exceed 50% width of the outer container , meaning there will only ever be two cards side-by-side. The details section on the bottom (read more, comments, etc) will be absolutely positioned to the bottom . Why? So that they'll always be equally placed at the bottom, no matter how much content is in the card. The two halves of the details section will be placed to the left and right and vertically centered . \"Read more\" on the left, \"Comments\" and \"Likes\" on the right. I've only included the border so we can see the Now everything that has to do with layout of the card is taken care of, and we can begin to style it. Use More Padding This is the number one issue I see that indicates to me that someone is an amateur at design: not enough padding, or inconsistent padding and margins . We're going to add an equal amount of padding around the four sides of the card ( 30px ), adding extra to to bottom to account for the absolute positioning. .card-content { padding : 30px 30px 110px ; } .card-details-inner { border-top : 1px solid #efefef ; margin : 0 30px ; padding : 30px 0 ; } I'm also going to remove the top margin of the <h1> so it doesn't interfere with the equal padding of the element. I prefer to remove all top margins and only use bottom margins. This is personal preference, but it works best for me. .card h1 { margin : 0 ; } .card p { margin : 0 0 30px ; } .subtitle { margin : 0 0 15px ; } I think it's starting to look better already. You might notice there seems to be too much space around the bottom details area, but that's only because the \"Read Article\" link will become a button - otherwise we would use less. Use more line height on body than headings Headings should have less line height than body text. A good amount is 1.2 for headings, and 1.5 to 1.6 for body text. The \"golden ratio\" is supposedly 1.61803399 , but nobody has time for that many numbers. Here's a code I usually use as the standard for all my websites, and only adjust if necessary. html { line-height : 1.6 ; } h1,",
            "h5 { line-height : 1.2 ; } It's getting a little more spaced out and readable now. Do not use pure black Pure black, as in black or #000000 , is particularly harsh and should be avoided, both for text and backgrounds. I'm going to use a solid nice gray, #444444 for the main text, and a muted #666666 for the card body font. It's less harsh and more pleasant on the eyes. Use fewer fonts, or be consistent with fonts If you really don't know what you're doing with fonts, here's an easy bit of advice: just use one font family (typeface) . A typeface is the entire family of fonts that includes all the bold and italicized versions. We'll just refer to them all as fonts from here out because that's more familiar. Google Fonts is of course a great resource to find custom fonts to use in your project. Sort by \"popular\" and any of the top 20 fonts on there should be perfectly acceptable to use. I'm going to use Nunito, a nice popular font, with one regular width and one bold width. ( 400 and 700 ). Load it in... < link rel = \" stylesheet \" href = \" https://fonts.googleapis.com/css?family=Nunito:400,700 \" /> html { font-family : 'Nunito' , sans-serif ; } And here it is. Another tip: add this code to all your projects to make the text more clear, crisp and defined on all browsers. html { -webkit-font-smoothing : antialiased ; -moz-osx-font-smoothing : grayscale ; } The headings are set to bold by default, but I also want my subtitle to be bold. .subtitle { font-weight : 700 ; } Okay, so maybe you don't like just one font, and you want to use more than one. That makes perfect sense, but at try to follow this rule:** make all headings one font, and all body text the other font**. For example, you can choose to have all headings a serif font (font with tails, such as Times New Roman) and all body text a sans-serif font (font without tails, such as Arial). Or the other way around. Consistency is key . Attempting to be super creative and different when you're not familiar with design is where most of bad design comes from. Keep it simple until you learn more. Use fewer colors, or complementary colors Same advice applies to colors as to fonts when you're new to design: if you don't know what you're doing, just use one color . The example we're making just uses one color. Want to use more than one color? That makes sense, but at least use the complementary color wheel . Here's one for you to look at. If you're not familiar with it from first grade art class, just look at opposite ends of the wheel and match them. Blue and orange. Purple and yellow. Generally more subdued colors look better on the web. I chose #E76C67 , a flat reddish-orange for the color of our design. I could have as easily chose blue, purple, or green, because all of them would look fine with black and white, but I chose this one. a { color : #e76c67 ; text-decoration : none ; } .subtitle { margin : 0 0 15px ; font-weight : 700 ; font-size : 1.25rem ; color : #e76c67 ; } Now we have some color to the design, and as it's only one, it has nothing to clash with. Be consistent with borders and corners If you're going to have round corners, use round corners throughout all your elements: forms, buttons, cards, etc. If you're going to have square corners, use square corners throughout all your elements. Keep your borders and border-radius consistent. I'm sure you're noticing consistency is a common theme throughout this article, and it's for good reason. I'm going to go with sharp corners in our example - no border radius on any of my elements. That means my card and buttons (and if it were a full website, my form inputs as well) will all be rectangles. If I wanted to use rounded corners, I should make sure everything has rounded corners. If your buttons have a 1px border, make sure your forms have a 1px border as well. Make sure the hover and active states match the border size of the regular element so the shape doesn't change on hover and tab. Here's the CSS for our button. .button { display : block ; font-size : 1rem ; background : #e76c67 ; border : 1px solid #e76c67 ; padding : 0.75rem 1rem ; color : white ; text-decoration : none ; font-weight : 700 ; text-align : center ; } .button:hover,",
            ".button:focus { background : darken ( #e76c67 , 10% ) ; border : 1px solid darken ( #e76c67 , 10% ) ; } Fine details, transitions and animations last If the first thing you're doing is putting a gradient or box shadow into your empty design, there's a problem. Transitions, animations, box shadows, and other small details should be added last, after your layout, fonts, and colors have all been chose. I'm going to add a subtle box shadow to the card element. .card { box-shadow : 2px 6px 25px rgba ( 0 , 0 , 0 , 0.1 ) ; transition : all 0.3s ease ; position : relative ; } .card:hover { box-shadow : 2px 6px 30px rgba ( 0 , 0 , 0 , 0.2 ) ; } I also prefer the bottom card details to be gray, with a bit more space between the elements. .options a { color : #666666 ; } .options a:hover { color : #222222 ; } .fa { margin-right : 0.25rem ; } Here's our final card. Let's just add in an image really fast. .card-image { height : 200px ; background-size : cover ; background-position : center center ; background-repeat : no-repeat ; } The HTML, which is set up to allow the image to load in via CMS. < div class = \" card-image \" style = \" background-image : url ( images/chicago.jpg ) \" > </ div > And here we are, the final version! Don't go overboard with drop shadows, gradients, or animations Not much more to be said. If your elements are swooping all throughout the page from every direction, your website is going to be annoying to navigate. Also, I just realized I put \"City of a Big Shoulders\" instead of \"City of Big Shoulders\", so please ignore the typo. I'm not redoing the whole thing! Play around with it a bit Maybe you want the \"big time San Francisco tech company\" look. Video game? New Moon theme? Whatever you want! Conclusion You can use these guidelines to critique your own design. Do you need more padding? Do you have too many or inconsistent fonts? Are you using three different border radii? Here is the demo and source code. View Final Product View Source Code About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: October 12, 2017 Category: Technical Tags css design tutorial Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    },
    {
        "url": "https://www.taniarascia.com/how-to-test-useeffect-api-call/",
        "title": "Testing API Calls With React Testing Library and Jest | Tania Rascia's Personal Website",
        "headings": [
            "Testing API Calls With React Testing Library and Jest",
            "Setting up the Application and Test Environment",
            "File structure",
            "Required packages",
            "Config files",
            "App files",
            "Writing the Tests",
            "When the API call succeeds",
            "When the API call fails",
            "Running the tests",
            "Conclusion",
            "About me",
            "Post Details",
            "Tags",
            "Newsletter",
            "Comments"
        ],
        "last_updated": "2024-10-23T01:36:38.188523",
        "content": [
            "Testing API Calls With React Testing Library and Jest | Tania Rascia's Personal Website Tania Rascia Notes Articles Projects About Me Testing API Calls With React Testing Library and Jest Ever since Hooks were released in React, we've been using the useEffect hook to fetch data, whether directly or abstracted away behind Redux Thunks. Figuring out how to test those scenarios can be really frustrating at first, but fortunately it ends up not being very complicated. I'll show you how to test useEffect with both successful and failed API calls. Prerequisites Command Line React React Hooks Webpack Goals Set up a very simple React app with testing using Jest and React Testing Library Write a test for when the API call succeeds Write a test for when the API call fails Setting up the Application and Test Environment Feel free to skip this part if you want to get right to the good stuff. As I wrote this article, I decided to start with absolutely nothing to see what the bare minimum I could get away with. I wanted all the config files, setup, and modules to get a React environment up and running that outputs a running application and runs tests, with the most up-to-date versions of everything. I know Vite and Rome and Rollup and lord knows what else are all the rage right now - I'm just using a simple webpack setup because it still works and I care more about just showing the tests in this article. However, please leave a comment to enlighten me on some of the improvements they bring to the table! So here's the quick application setup. File structure What I ended up with looked like this: .",
            "\u2514\u2500\u2500 webpack.config.js I won't force you to go on the whole journey as I did, figuring out what was needed, but I'll cut right to the end and let you know all the packages. Required packages For the application, React + React DOM was necessary, as well as a few Babel packages. npm i \\ react \\ react-dom \\ @babel/preset-env \\ @babel/preset-react For setup, bundling, and compilation, webpack, webpack CLI, and a Babel loader were necessary. npm i \\ webpack \\ webpack-cli \\ babel-loader And for testing, Jest, JSDom, and React Testing Library were necessary. I also brought in a Jest Mock package because it makes life easier. npm i -D \\ @testing-library/jest-dom \\ @testing-library/react \\ jest \\ jest-environment-jsdom \\ jest-fetch-mock So these are all the packages necessary to get an environment up and running that spits out an application and tests it. Of course, there are some additional quality of life improvements you'd want, like the webpack serve dev server for hot reloads, but it's not necessary. Config files Babel Of course, there's the Babel config file , the same one you've probably been using for years. .babelrc { \"presets\" : [ \"@babel/preset-env\" , \"@babel/preset-react\" ] } webpack And the webpack config file . It makes most of the decisions by default, such as using index.js as an entry point and outputting to a dist folder. I just needed to add a module to tell it to use babel-loader . webpack.config.js module . exports = { mode : 'production' , module : { rules : [ { test : / \\.js$ / , use : [ 'babel-loader' ] } ] , } , } Jest As for the Jest config file , I just needed it to use jsdom and set the right directories. jest.config.js module . exports = { testEnvironment : 'jsdom' , rootDir : '.' , modulePaths : [ '<rootDir>' ] , moduleDirectories : [ 'node_modules' , 'src' ] , setupFilesAfterEnv : [ '<rootDir>/setupJest.js' ] , } Finally, in setupJest.js , we just want to enable jest-fetch-mock and import the Jest DOM. setupJest.js require ( 'jest-fetch-mock' ) . enableMocks ( ) import '@testing-library/jest-dom' Package Adding a script to package.json that just runs webpack allows you to test the build and ensure the application is running. I also added a jest command for the test. Everything else is just the packages brought in by the commands. package.json { \"scripts\" : { \"test\" : \"jest --coverage\" , \"build\" : \"webpack\" } } So that's everything as far as config for both the application and testing, now to set up the simple app. App files Not too much has changed as far as the React index file goes. The ReactDOM import and API is slightly different from the last time I used it, and StrictMode seems to be the default mode, so I'm just rendering to the #root and pulling in a component. index.js import React from 'react' import ReactDOM from 'react-dom/client' import { App } from './App' const root = ReactDOM . createRoot ( document . getElementById ( 'root' ) ) root . render ( < React.StrictMode > < App /> </ React.StrictMode > ) So now comes the code we're going to be testing, App.js . I'm just going to make this file do some \"componentDidMount\"-esque fetching of data. I know it's not realistic for this to be done in App.js , but the way the code will be written will be pretty similar in a production level app, it'll just be somewhere else further down. I'm going to use JSON Placeholder for the example API, but testing will be the same with your own internal APIs, a wrapper around fetch, and even if you're using Redux or some other state management. So I'll start off with a title and a message, and start setting up the state we'll use: users for the data coming in, and error in case an error gets thrown. I could have added in some loading state, but I just kept it really simple. It should be easy to figure out testing the loading states after reading this article. App.js import React , { useState , useEffect } from 'react' export const App = ( ) => { const [ users , setUsers ] = useState ( null ) const [ error , setError ] = useState ( null ) return ( < > < h1 > List of Users </ h1 > < p > No users found </ p > </ > ) } Now I'll add in the useEffect that fetches data from the API and updates the data state, otherwise updates the error state. App.js import React , { useState , useEffect } from 'react' export const App = ( ) => { const [ users , setUsers ] = useState ( null ) const [ error , setError ] = useState ( null ) useEffect ( ( ) => { const fetchAllUsers = async ( ) => { try { const response = await fetch ( 'https://jsonplaceholder.typicode.com/users' ) const data = await response . json ( ) setUsers ( data ) } catch ( err ) { setError ( 'Something went wrong!' ) } } fetchAllUsers ( ) } , [ ] ) return ( < > < h1 > List of Users </ h1 > < p > No users found </ p > </ > ) } Finally, I'm just displaying the error if one exists, and displaying the users if they loaded. App.js import React , { useState , useEffect } from 'react' export const App = ( ) => { const [ users , setUsers ] = useState ( null ) const [ error , setError ] = useState ( null ) useEffect ( ( ) => { // ... } , [ ] ) return ( < > < h1 > List of Users </ h1 > { error && < div > { error } </ div > } { users ? ( < ul > { users . map ( ( user ) => ( < li key = { user . id } > { user . name } </ li > ) ) } </ ul > ) : ( < p > No users found </ p > ) } </ > ) } Okay, now the whole application is complete and we can write the tests. You can build to ensure everything is working properly first. Build: npm run build Output: > webpack",
            "webpack 5.75.0 compiled successfully in 4035 ms I use http-server in the dist folder to test the output of an application quickly. Writing the Tests You may not have needed all the above context and just want to see the tests. I wrote about it all since it's an up-to-date (for now) example of everything you need to get started, which can be nicer than opening twenty tabs in StackOverflow and seeing answers from 2016. Now to get started writing the tests. I opted to put them in App.test.js , but of course there are differing opinions on where tests should live (which I discussed a bit in the React Architecture article). I'm just putting them in a tests folder for the sake of this example. To set up, we'll use render and screen from the React Testing Library . As implied by the names, render is responsible for rendering your app to the JS Dom, and screen allows you to interact with it and see what's there. I'm putting everything in a describe() block for App , and making sure fetchMock resets between each test. tests/App.test.js import React from 'react' import { render , screen } from '@testing-library/react' import { App } from 'src/App.js' describe ( 'App' , ( ) => { beforeEach ( ( ) => { fetchMock . resetMocks ( ) } ) test ( 'renders users when API call succeeds' , async ( ) => { } ) test ( 'renders error when API call fails' , async ( ) => { } ) } ) When the API call succeeds First, I'll write the test for when the API call succeeds. Using fetchMock , I'll mock the resolved value of the JSON Placeholder /users API with a list of fake users. const fakeUsers = [ { id : 1 , name : 'Joe' } , { id : 2 , name : 'Tony' } , ] fetchMock . mockResolvedValue ( { status : 200 , json : jest . fn ( ( ) => fakeUsers ) } ) Now, what we want is to see what happens after the successful fetch , which is the users displayed and the \"No users found\" message not to be there. This can be done using a combination of waitFor and getBy , which uses act behind the scenes to wait for the event to happen: await waitFor ( ( ) => { expect ( screen . getByText ( 'Joe' ) ) . toBeInTheDocument ( ) } ) However, the findBy query is a combination of waitFor and getBy , so we can simplify that even more into a one liner: expect ( await screen . findByText ( 'Joe' ) ) . toBeInTheDocument ( ) So here's our code to mock the fetch , render the App , ensure the data is rendered, and ensure nothing we don't want to see is visible: tests/App.test.js test ( 'renders users when API call succeeds' , async ( ) => { const fakeUsers = [ { id : 1 , name : 'Joe' } , { id : 2 , name : 'Tony' } , ] fetchMock . mockResolvedValue ( { status : 200 , json : jest . fn ( ( ) => fakeUsers ) } ) render ( < App /> ) expect ( screen . getByRole ( 'heading' ) ) . toHaveTextContent ( 'List of Users' ) expect ( await screen . findByText ( 'Joe' ) ) . toBeInTheDocument ( ) expect ( await screen . findByText ( 'Tony' ) ) . toBeInTheDocument ( ) expect ( screen . queryByText ( 'No users found' ) ) . not . toBeInTheDocument ( ) } ) When the API call fails Using what we've learned in the previous test, writing the next test is pretty easy. Instead of resolving a successful API call, we'll have the API throw an error and ensure the error is visible. tests/App.test.js test ( 'renders error when API call fails' , async ( ) => { fetchMock . mockReject ( ( ) => Promise . reject ( 'API error' ) ) render ( < App /> ) expect ( await screen . findByText ( 'Something went wrong!' ) ) . toBeInTheDocument ( ) expect ( await screen . findByText ( 'No users found' ) ) . toBeInTheDocument ( ) } ) Now that both tests are written, we just need to run them. Running the tests Using the jest command, we can run the tests. You can also add the --coverage flag to see if the tests are catching everything. npm test > jest --coverage",
            "Time:        1.91 s As we can see, the tests passed with 100% coverage, so we get that green dopamine hit. Note : I don't necessarily think having 100% test coverage is particularly meaningful, nor that component tests are the most important type of test. Generally, I think end-to-end tests are the most essential, but unit/component tests can be helpful to supplement them. Conclusion Well, there you have it. React, React Testing Library, Jest, and Webpack, all working in harmony in (almost) TYOOL 2023. Hopefully this helps someone struggling to figure out how to test useEffect or get their environment set up! About me Hello and thanks for visiting! My name is Tania Rascia , and this is my website and digital garden. I'm a software developer who makes open-source projects and writes about code and life. This site is and has always been free of ads, trackers, social media, affiliates, and sponsored posts. Post Details Published: December 09, 2022 Category: Technical Tags react testing jest webpack asynchronous api Newsletter Subscribe to the Newsletter Comments Newsletter Donate a Coffee RSS Gatsby GitHub Netlify"
        ]
    }
]